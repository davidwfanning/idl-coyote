;;
;; IDLWAVE catalog for library coyote
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Mon Jan 27 18:31:38 2014
;;
(setq idlwave-library-catalog-libname "coyote")
(setq idlwave-library-catalog-routines
 '(("AdjustPosition_PlotEvents" pro nil (lib "adjustposition.pro" nil "coyote") "%s, event" (nil))
   ("AdjustPosition_FieldEvents" pro nil (lib "adjustposition.pro" nil "coyote") "%s, event" (nil))
   ("AdjustPosition_ButtonEvents" pro nil (lib "adjustposition.pro" nil "coyote") "%s, event" (nil))
   ("AdjustPosition" fun nil (lib "adjustposition.pro" nil "coyote") "Result = %s(currentPosition)" (nil ("Cancel") ("Group_Leader") ("Title") ("XOffset") ("YOffset")))
   ("ANSI_VALUE" fun nil (lib "ansi_value.pro" nil "coyote") "Result = %s(str_in)" (nil ("EXAMPLE")))
   ("ArcSample" pro nil (lib "arcsample.pro" nil "coyote") "%s, x_in, y_in, x_out, y_out" (nil ("PHASE") ("POINTS")))
   ("ASinhScl_ASinh" fun nil (lib "asinhscl.pro" nil "coyote") "Result = %s(x)" (nil))
   ("ASinhScl" fun nil (lib "asinhscl.pro" nil "coyote") "Result = %s(image)" (nil ("BETA") ("MAX") ("MIN") ("NEGATIVE") ("OMAX") ("OMIN")))
   ("ASPECT" fun nil (lib "aspect.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("BINARY" fun nil (lib "binary.pro" nil "coyote") "Result = %s(number)" (nil ("COLOR") ("SEPARATE")))
   ("BitGet" fun nil (lib "bitget.pro" nil "coyote") "Result = %s(value, bit)" (nil ("SILENT")))
   ("FitEllipse" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(indexNumber)" (nil ("AXES") ("CENTER") ("NOSCALE") ("NPOINTS") ("ORIENTATION") ("SEMIAXES")))
   ("GetIndices" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(indexNumber)" (nil ("COUNT") ("XSIZE") ("YSIZE")))
   ("GetStats" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(indexNumber)" (nil ("INDICES") ("NOSCALE") ("XYINDICES")))
   ("NumberOfBlobs" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("ReportStats" pro "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("FILENAME") ("NOSCALE") ("TOFILE")))
   ("CLEANUP" pro "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(inputImage)" (nil ("ALL_NEIGHBORS") ("MASK") ("SCALE")))
   ("Example" pro nil (lib "blob_analyzer__define.pro" nil "coyote") "%s" (nil))
   ("Blob_Analyzer__DEFINE" pro nil (lib "blob_analyzer__define.pro" nil "coyote") "%s, class" (nil))
   ("CapFirstLetter" fun nil (lib "capfirstletter.pro" nil "coyote") "Result = %s(theString)" (nil))
   ("cgADDTOPATH" pro nil (lib "cgaddtopath.pro" nil "coyote") "%s, theDirectory" (nil ("VERBOSE")))
   ("cgAppendToFilename" fun nil (lib "cgappendtofilename.pro" nil "coyote") "Result = %s(filename, theText)" (nil))
   ("cgArrow" pro nil (lib "cgarrow.pro" nil "coyote") "%s, x0, y0, x1, y1" (nil ("_REF_EXTRA") ("ADDCMD") ("COLOR") ("DATA") ("HSIZE") ("HTHICK") ("LINESTYLE") ("NORMAL") ("SOLID") ("THICK") ("WINDOW")))
   ("cgAspect" fun nil (lib "cgaspect.pro" nil "coyote") "Result = %s(aspect_ratio)" (nil ("ALIGN") ("ASPECT") ("POSITION") ("SINGLE_PLOT") ("WASPECT")))
   ("cgAxis" pro nil (lib "cgaxis.pro" nil "coyote") "%s, xloc, yloc, zloc" (nil ("_REF_EXTRA") ("CHARSIZE") ("COLOR") ("DATA") ("DEVICE") ("FONT") ("NORMAL") ("SAVE") ("T3D") ("TITLE") ("WINDOW") ("XAXIS") ("XLOG") ("XTITLE") ("YAXIS") ("YLOG") ("YNOZERO") ("YTITLE") ("ZAXIS") ("ZLOG") ("ZTITLE")))
   ("cgBarPlot" pro nil (lib "cgbarplot.pro" nil "coyote") "%s, values" (nil ("_REF_EXTRA") ("ADDCMD") ("AXISCOLOR") ("BACKGROUND") ("BARCOORDS") ("BARNAMES") ("BAROFFSET") ("BARSPACE") ("BARTHICK") ("BARWIDTH") ("BASELINES") ("BASERANGE") ("COLORS") ("LAYOUT") ("NOERASE") ("OPLOTCOLORS") ("OUTFILENAME") ("OUTLINE") ("OUTPUT") ("OVERPLOT") ("POSITION") ("RANGE") ("ROTATE") ("TITLE") ("WINDOW") ("XSTYLE") ("XTITLE") ("YSTYLE") ("YTITLE")))
   ("cgBlendImage" pro nil (lib "cgblendimage.pro" nil "coyote") "%s, foreGroundImage, backGroundImage" (nil ("_REF_EXTRA") ("ALPHA") ("WINDOW")))
   ("cgBoxPlot_Prepare_Data" fun nil (lib "cgboxplot.pro" nil "coyote") "Result = %s(data, missing_data_value)" (nil))
   ("cgBoxPlot_Draw" pro nil (lib "cgboxplot.pro" nil "coyote") "%s, thisdata" (nil ("BOXCOLOR") ("COLOR") ("FILLBOXES") ("OUTLIERCOLOR") ("OUTLINECOLOR") ("STATS") ("WIDTH") ("XLOCATION")))
   ("cgBoxPlot" pro nil (lib "cgboxplot.pro" nil "coyote") "%s, data" (nil ("_REF_EXTRA") ("ADDCMD") ("AXISCOLOR") ("BACKGROUND_COLOR") ("BOXCOLOR") ("CHARSIZE") ("COLOR") ("FILLBOXES") ("LABELS") ("LAYOUT") ("MISSING_DATA_VALUE") ("OUTFILENAME") ("OUTLIERCOLOR") ("OUTLINECOLOR") ("OUTPUT") ("OVERPLOT") ("ROTATE") ("STATS") ("WIDTH") ("WINDOW") ("XCHARSIZE") ("XLOCATION") ("XTHICK")))
   ("cgCBar2KML" pro nil (lib "cgcbar2kml.pro" nil "coyote") "%s" (nil ("_REF_EXTRA") ("ADDTOFILE") ("BACKGROUND") ("BOTTOM") ("BREWER") ("CHARPERCENT") ("CHARSIZE") ("CLAMP") ("COLOR") ("CTINDEX") ("DESCRIPTION") ("DISCRETE") ("DIVISIONS") ("DRAWORDER") ("FILENAME") ("FORMAT") ("KMZ") ("LOCATION") ("MAXRANGE") ("MINOR") ("MINRANGE") ("NCOLORS") ("NEUTRALINDEX") ("OOB_FACTOR") ("OOB_HIGH") ("OOB_LOW") ("PALETTE") ("PLACENAME") ("RANGE") ("REVERSE") ("TCHARSIZE") ("TICKINTERVAL") ("TICKLEN") ("TICKNAMES") ("TITLE") ("WIDTH") ("XLOG") ("XTICKINTERVAL") ("XTITLE")))
   ("cgCenterTLB" pro nil (lib "cgcentertlb.pro" nil "coyote") "%s, tlb, x, y" (nil ("CenterOnTLB") ("Device") ("NoCenter")))
   ("cgChangeMapProjection" fun nil (lib "cgchangemapprojection.pro" nil "coyote") "Result = %s(image, mapIn)" (nil ("BILINEAR") ("BOUNDARY") ("LATLONBOX") ("MAPOUT") ("MASK") ("MISSING") ("XYRANGE")))
   ("cgCheckForSymbols" fun nil (lib "cgcheckforsymbols.pro" nil "coyote") "Result = %s(aString)" (nil))
   ("cgCleanUp" pro nil (lib "cgcleanup.pro" nil "coyote") "%s" (nil ("ALL") ("CG") ("DG") ("FG")))
   ("cgCliptoMap" fun nil (lib "cgcliptomap.pro" nil "coyote") "Result = %s(imageIn, boundary)" (nil ("LATLONBOX") ("MAP") ("OUTBOUNDARY") ("OUTMAP") ("OUTPOSITION")))
   ("Init" fun "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("AltPS_Keywords") ("AltPS_Params") ("Background") ("Button_Events") ("CmdDelay") ("Command") ("Drop_Events") ("EraseIt") ("Event_Handler") ("Group_Leader") ("Keyboard_Events") ("Method") ("Motion_Events") ("OXMargin") ("OYMargin") ("P1") ("P2") ("P3") ("P4") ("ReplaceCmd") ("Storage") ("Tracking_Events") ("WAspect") ("WDestroyObjects") ("Wheel_Events") ("WMulti") ("WTitle") ("WXPos") ("WXSize") ("WYPos") ("WYSize")))
   ("cgCmdWindowDrawRealize" pro nil (lib "cgcmdwindow__define.pro" nil "coyote") "%s, drawID" (nil))
   ("cgCmdWindowKillNotify" pro nil (lib "cgcmdwindow__define.pro" nil "coyote") "%s, drawID" (nil))
   ("Cleanup" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CreateCommandStruct" pro "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, structName" (nil ("Quiet")))
   ("Copy" fun "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Keywords" fun "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("HAS_KEYWORDS")))
   ("Draw" pro "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("KEYWORDS") ("SUCCESS")))
   ("EvaluateKeywords" fun "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(keywords)" (nil ("SUCCESS")))
   ("List" pro "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, prefix" (nil))
   ("ReplaceEscapeSequences" fun "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(aString)" (nil))
   ("Cleanup" pro "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "cgWindow_Command" (lib "cgcmdwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("ALTPS_KEYWORDS") ("ALTPS_PARAMS") ("COMMAND") ("DESTROYOBJECTS") ("KEYWORDS") ("P1") ("P2") ("P3") ("P4") ("TYPE")))
   ("cgWindow_ID__Define" pro nil (lib "cgcmdwindow__define.pro" nil "coyote") "%s" (nil))
   ("cgCmdWindow_Cleanup" pro nil (lib "cgcmdwindow__define.pro" nil "coyote") "%s, tlb" (nil))
   ("cgWindow_Command__Define" pro nil (lib "cgcmdwindow__define.pro" nil "coyote") "%s" (nil))
   ("AddCommand" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, command" (nil ("INDEX")))
   ("AutoPostScriptFile" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("AutoRasterFile" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, filetype, filename" (nil))
   ("Copy" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DESTINATION") ("EXTENT") ("IMAGE") ("ORIGIN")))
   ("DrawWidgetConfig" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Button_Events") ("Drop_Events") ("Event_Handler") ("Keyboard_Events") ("Motion_Events") ("Storage") ("Tracking_Events") ("Wheel_Events")))
   ("DrawWidgetEvents" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("CreatePostScriptFile" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("DeleteCommand" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, cmdIndex" (nil ("ALL")))
   ("cgCmdWindow_Dispatch_Events" pro nil (lib "cgcmdwindow__define.pro" nil "coyote") "%s, event" (nil))
   ("ExecuteCommands" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetCommandKeyword" fun "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(keyword, cmdIndex)" (nil ("SUCCESS")))
   ("GetProperty" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ADJUSTSIZE") ("BACKGROUND") ("COMMANDS") ("DELAY") ("DIMENSIONS") ("ERASEIT") ("IM_DENSITY") ("IM_OPTIONS") ("IM_RASTER") ("IM_RESIZE") ("IM_TRANSPARENT") ("MULTI") ("NOEXECUTECOMMANDS") ("PALETTE") ("PDF_PATH") ("PDF_UNIX_CONVERT_CMD") ("PS_CHARSIZE") ("PS_DECOMPOSED") ("PS_DELETE") ("PS_ENCAPSULATED") ("PS_FONT") ("PS_METRIC") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("STORAGE") ("TLB") ("WID") ("XOMARGIN") ("YOMARGIN")))
   ("InvalidateWidgetID" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("ListCommand" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, cmdIndex" (nil ("CREATECOMMANDSTRUCT")))
   ("LoadColors" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, r, g, b" (nil ("XCOLORS_DATA")))
   ("Output" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("PackageCommand" fun "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(command, p1, p2, p3, p4)" (nil ("_Extra") ("AddCmd") ("AltPS_Keywords") ("AltPS_Params") ("CmdIndex") ("DestroyObjects") ("Execute") ("Method") ("Multi") ("ReplaceCmd")))
   ("ReplaceCommand" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, command, cmdIndex" (nil ("MULTI")))
   ("Resize" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, x, y" (nil))
   ("SaveAsRaster" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("RestoreCommands" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("RestoreDataCoords" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SaveCommands" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("SaveDataCoords" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetProperty" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ADJUSTSIZE") ("BACKGROUND") ("DELAY") ("DIMENSIONS") ("ERASEIT") ("IM_DENSITY") ("IM_OPTIONS") ("IM_RASTER") ("IM_RESIZE") ("IM_TRANSPARENT") ("IM_WIDTH") ("MULTI") ("NOEXECUTECOMMANDS") ("PALETTE") ("PDF_PATH") ("PDF_UNIX_CONVERT_CMD") ("PS_CHARSIZE") ("PS_DECOMPOSED") ("PS_DELETE") ("PS_ENCAPSULATED") ("PS_FONT") ("PS_METRIC") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("STORAGE") ("UPDATE") ("WID") ("XOMARGIN") ("YOMARGIN")))
   ("StoreObjectReference" pro "cgCmdWindow" (lib "cgcmdwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgCmdWindow__Define" pro nil (lib "cgcmdwindow__define.pro" nil "coyote") "%s, class" (nil))
   ("cgColor" fun nil (lib "cgcolor.pro" nil "coyote") "Result = %s(theColour, colorIndex)" (nil ("_REF_EXTRA") ("ALLCOLORS") ("BREWER") ("CANCEL") ("CHECK_CONNECTION") ("COLORSTRUCTURE") ("DECOMPOSED") ("FILENAME") ("NAMES") ("NCOLORS") ("NODISPLAY") ("ROW") ("SELECTCOLOR") ("TRIPLE")))
   ("cgCOLOR24" fun nil (lib "cgcolor24.pro" nil "coyote") "Result = %s(color)" (nil))
   ("cgColorbar" pro nil (lib "cgcolorbar.pro" nil "coyote") "%s" (nil ("_REF_EXTRA") ("ADDCMD") ("ANNOTATECOLOR") ("BOTTOM") ("BREWER") ("CHARPERCENT") ("CHARSIZE") ("CLAMP") ("COLOR") ("CTINDEX") ("DISCRETE") ("DIVISIONS") ("FIT") ("FONT") ("FORMAT") ("INVERTCOLORS") ("MAXRANGE") ("MINOR") ("MINRANGE") ("NCOLORS") ("NEUTRALINDEX") ("NODISPLAY") ("OOB_FACTOR") ("OOB_HIGH") ("OOB_LOW") ("PALETTE") ("POSITION") ("RANGE") ("REVERSE") ("RIGHT") ("TCHARSIZE") ("TEXTTHICK") ("TICKINTERVAL") ("TICKLEN") ("TICKNAMES") ("TITLE") ("TLOCATION") ("TOP") ("VERTICAL") ("WINDOW") ("XLOG") ("XTICKINTERVAL") ("XTICKLAYOUT") ("XTITLE") ("YLOG") ("YTICKINTERVAL") ("YTICKLAYOUT") ("YTITLE")))
   ("cgColorFill" pro nil (lib "cgcolorfill.pro" nil "coyote") "%s, x, y, z" (nil ("_REF_EXTRA") ("CHECKFORFINITE") ("COLOR") ("DEVICE") ("MAP_OBJECT") ("NORMAL") ("POSITION") ("WINDOW")))
   ("cgConLevels" fun nil (lib "cgconlevels.pro" nil "coyote") "Result = %s(data)" (nil ("FACTOR") ("MAXVALUE") ("MINMAX") ("MINVALUE") ("NLEVELS") ("SILENT") ("STEP") ("SUCCESS")))
   ("INIT" fun "cgContainer" (lib "cgcontainer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("NAME") ("UVALUE")))
   ("AddToTrash" pro "cgContainer" (lib "cgcontainer__define.pro" nil "coyote") "Obj ->[%s::]%s, object" (nil))
   ("FindByName" fun "cgContainer" (lib "cgcontainer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(searchName)" (nil ("_Extra") ("Case_Sensitive") ("Count") ("RegExp")))
   ("GetName" fun "cgContainer" (lib "cgcontainer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgContainer" (lib "cgcontainer__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("COUNT") ("NAME") ("UVALUE")))
   ("SetProperty" pro "cgContainer" (lib "cgcontainer__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("NAME") ("UVALUE")))
   ("CLEANUP" pro "cgContainer" (lib "cgcontainer__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgContainer__Define" pro nil (lib "cgcontainer__define.pro" nil "coyote") "%s, class" (nil))
   ("cgContour" pro nil (lib "cgcontour.pro" nil "coyote") "%s, data, x, y" (nil ("_REF_EXTRA") ("ADDCMD") ("ASPECT") ("AXESCOLOR") ("AXISCOLOR") ("BACKGROUND") ("C_ANNOTATION") ("C_CHARSIZE") ("C_COLORS") ("C_LABELS") ("C_ORIENTATION") ("C_SPACING") ("CELL_FILL") ("CHARSIZE") ("COLOR") ("FILL") ("FONT") ("IRREGULAR") ("ISOTROPIC") ("LABEL") ("LAYOUT") ("LEVELS") ("MAP_OBJECT") ("MISSINGVALUE") ("NLEVELS") ("NOCLIP") ("NOERASE") ("OLEVELS") ("ONIMAGE") ("OUTCOLOR") ("OUTFILENAME") ("OUTLINE") ("OUTPUT") ("OVERPLOT") ("PALETTE") ("POSITION") ("RESOLUTION") ("T3D") ("TITLE") ("TRADITIONAL") ("WINDOW") ("XSTYLE") ("XTHICK") ("XTICKLEN") ("XTICKS") ("XTICKV") ("XTITLE") ("YSTYLE") ("YTHICK") ("YTICKLEN") ("YTICKS") ("YTICKV") ("YTITLE") ("ZVALUE")))
   ("cgControl" pro nil (lib "cgcontrol.pro" nil "coyote") "%s, selection" (nil ("ADJUSTSIZE") ("ALL") ("BACKGROUND") ("CMDINDEX") ("CREATE_BMP") ("CREATE_GIF") ("CREATE_JPEG") ("CREATE_PDF") ("CREATE_PNG") ("CREATE_PS") ("CREATE_TIFF") ("DELAY") ("DELETECMD") ("DESTROY") ("DIMENSIONS") ("ERASEIT") ("EXECUTE") ("GET_KEYCMDINDEX") ("GET_KEYVALUE") ("GET_KEYWORD") ("IM_DENSITY") ("IM_OPTIONS") ("IM_RASTER") ("IM_RESIZE") ("IM_TRANSPARENT") ("IM_WIDTH") ("LISTCMD") ("MULTI") ("OBJECT") ("OUTPUT") ("PALETTE") ("PDF_PATH") ("PDF_UNIX_CONVERT_CMD") ("PS_CHARSIZE") ("PS_DECOMPOSED") ("PS_DELETE") ("PS_ENCAPSULATED") ("PS_FONT") ("PS_METRIC") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("RESIZE") ("RESTORE_VISUALIZATION") ("SAVE_VISUALIZATION") ("TITLE") ("UPDATE") ("WIDGETID") ("XOMARGIN") ("YOMARGIN")))
   ("INIT" fun "cgCoord" (lib "cgcoord__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("POSITION") ("XLOG") ("XRANGE") ("YLOG") ("YRANGE")))
   ("Draw" pro "cgCoord" (lib "cgcoord__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA")))
   ("GetProperty" pro "cgCoord" (lib "cgcoord__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("POSITION") ("XLOG") ("XRANGE") ("YLOG") ("YRANGE")))
   ("SetProperty" pro "cgCoord" (lib "cgcoord__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("POSITION") ("XLOG") ("XRANGE") ("YLOG") ("YRANGE")))
   ("CLEANUP" pro "cgCoord" (lib "cgcoord__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgCoord__Define" pro nil (lib "cgcoord__define.pro" nil "coyote") "%s, class" (nil))
   ("cgCoyoteGraphic" fun nil (lib "cgcoyotegraphic.pro" nil "coyote") "Result = %s(routine)" (nil))
   ("cgDBLTOSTR" fun nil (lib "cgdbltostr.pro" nil "coyote") "Result = %s(value)" (nil))
   ("cgDCBar" pro nil (lib "cgdcbar.pro" nil "coyote") "%s, colors" (nil ("ADDCMD") ("BARCOLOR") ("BOTTOM") ("CHARPERCENT") ("CHARSIZE") ("COLOR") ("FILENAME") ("FIT") ("FONT") ("LABELS") ("NCOLORS") ("POSITION") ("RIGHT") ("ROTATE") ("SPACING") ("TCHARSIZE") ("TITLE") ("TREVERSE") ("VERTICAL") ("WINDOW")))
   ("cgDefaultColor" fun nil (lib "cgdefaultcolor.pro" nil "coyote") "Result = %s(inputColour)" (nil ("BACKGROUND") ("DEFAULT") ("MODE") ("TRADITIONAL")))
   ("cgDefCharSize" fun nil (lib "cgdefcharsize.pro" nil "coyote") "Result = %s" (nil ("ADJUSTSIZE") ("FONT")))
   ("cgDelete" pro nil (lib "cgdelete.pro" nil "coyote") "%s, selection" (nil ("ALL") ("OBJECT") ("TITLE") ("WIDGETID")))
   ("cgdemodata_smooth2" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(i, w)" (nil ("help")))
   ("cgdemodata_makez" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(nx, ny, w)" (nil ("help") ("lastseed") ("periodic") ("seed")))
   ("cgdemodata_makey" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(n, w)" (nil ("help") ("lastseed") ("periodic") ("seed")))
   ("cgdemodata_gauss2d" pro nil (lib "cgdemodata.pro" nil "coyote") "%s, nx, ny, x, y, fwhm, array" (nil))
   ("cgDemoData_Cancel" pro nil (lib "cgdemodata.pro" nil "coyote") "%s, event" (nil))
   ("cgDemoData_ReadData" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(number)" (nil))
   ("cgDemoData_EVENT" pro nil (lib "cgdemodata.pro" nil "coyote") "%s, event" (nil))
   ("cgDemoData" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(selection)" (nil ("CANCEL") ("GROUP_LEADER") ("IMAGES")))
   ("cgDisplay" pro nil (lib "cgdisplay.pro" nil "coyote") "%s, pxsize, pysize" (nil ("_EXTRA") ("ASPECT") ("COLOR") ("FORCE") ("FREE") ("LOCATION") ("MATCH") ("PIXMAP") ("RETAIN") ("TITLE") ("WID") ("WINDOW") ("XPOS") ("XSIZE") ("YPOS") ("YSIZE")))
   ("cgDotPlot" pro nil (lib "cgdotplot.pro" nil "coyote") "%s, labels, values" (nil ("ADDCMD") ("AXISCOLOR") ("BACKGROUND") ("CHARSIZE") ("COLOR") ("FONT") ("LABELCHARSIZE") ("LABELCOLOR") ("NOERASE") ("NOGRID") ("OUTPUT") ("OVERPLOT") ("PLOTFILLCOLOR") ("POSITION") ("PSYM") ("SYMSIZE") ("TITLE") ("WINDOW") ("XCHARSIZE") ("XGRIDSTYLE") ("XRANGE") ("XSTYLE") ("XTITLE") ("YGRIDSTYLE")))
   ("cgDrawShapes_DrawEntity" pro nil (lib "cgdrawshapes.pro" nil "coyote") "%s, entity" (nil ("COLOR") ("DRAWMAPCOORD") ("FCOLOR") ("FILL") ("LINESTYLE") ("MAPCOORD") ("PROJECTED_XY") ("PSYM") ("SYMSIZE") ("THICK")))
   ("cgDrawShapes" pro nil (lib "cgdrawshapes.pro" nil "coyote") "%s, shapeFile" (nil ("ADDCMD") ("ATTRNAME") ("ATTRVALUES") ("AUTODRAW") ("COLORS") ("DRAWMAPCOORD") ("FCOLORS") ("FILL") ("LINESTYLE") ("MAPCOORD") ("MINNUMVERTS") ("PROJECTED_XY") ("PSYM") ("SYMSIZE") ("THICK") ("USELIMIT") ("WINDOW")))
   ("cgDraw_ROI" pro nil (lib "cgdraw_roi.pro" nil "coyote") "%s, roi" (nil ("_REF_EXTRA") ("ADDCMD") ("COLOR") ("DEVICE") ("LINESTYLE") ("NORMAL") ("OUTLINE") ("PSYM") ("SYMSIZE") ("T3D") ("THICK") ("WINDOW")))
   ("cgErase" pro nil (lib "cgerase.pro" nil "coyote") "%s, background_color" (nil ("COLOR") ("LAYOUT") ("WINDOW")))
   ("cgErrorMsg" fun nil (lib "cgerrormsg.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("Error") ("Informational") ("NoName") ("Quiet") ("Title") ("Traceback")))
   ("GetProperty" pro "cgFileSelect" (lib "cgfileselect__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("FILENAME") ("LASTDIR") ("PARENT") ("TLB") ("UNAME") ("UVALUE")))
   ("SetProperty" pro "cgFileSelect" (lib "cgfileselect__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("FILENAME") ("LASTDIR") ("UVALUE")))
   ("CLEANUP" pro "cgFileSelect" (lib "cgfileselect__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "cgFileSelect" (lib "cgfileselect__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("FILENAME") ("FRAME") ("LABELSIZE") ("NAMESIZE") ("TITLE") ("UNAME") ("UVALUE")))
   ("cgFileSelect_Events" pro nil (lib "cgfileselect__define.pro" nil "coyote") "%s, event" (nil))
   ("cgFileSelect__Define" pro nil (lib "cgfileselect__define.pro" nil "coyote") "%s, class" (nil))
   ("cgFindCoyoteFiles" pro nil (lib "cgfindcoyotefiles.pro" nil "coyote") "%s" (nil))
   ("cgFindMapBoundary" fun nil (lib "cgfindmapboundary.pro" nil "coyote") "Result = %s(filename, boundary)" (nil ("USE_LATLON") ("UTM_SOUTH") ("XRANGE") ("YRANGE")))
   ("cgFindPathTo" fun nil (lib "cgfindpathto.pro" nil "coyote") "Result = %s(filename)" (nil ("SUCCESS")))
   ("cgFIXPS" pro nil (lib "cgfixps.pro" nil "coyote") "%s, in_filename, out_filename" (nil ("A4") ("LEDGER") ("LEGAL") ("LETTER") ("PAGETYPE") ("QUIET") ("SUCCESS")))
   ("cgGeoMap" fun nil (lib "cggeomap.pro" nil "coyote") "Result = %s(image)" (nil ("_EXTRA") ("BOUNDARY") ("CCOLOR") ("CLIP") ("CONTINENTS") ("DISPLAY") ("ELLIPSOID") ("GCOLOR") ("GEOTIFF") ("GRID") ("IMAGE") ("LATLONBOX") ("MAP_PROJECTION") ("MCOLOR") ("ONIMAGE") ("PALETTE") ("SILENT") ("SUB_RECT") ("SUCCESS") ("TITLE")))
   ("cgGeoMosaic" fun nil (lib "cggeomosaic.pro" nil "coyote") "Result = %s(geofile_1, geofile_2)" (nil ("FILENAME") ("IMAGEOUT") ("MAPOUT") ("MISS_OUT") ("MISSING") ("PALETTE") ("SUCCESS")))
   ("cgGetColorState" fun nil (lib "cggetcolorstate.pro" nil "coyote") "Result = %s(device)" (nil ("DEPTH")))
   ("cgGoogleMapMarker__Define" pro nil (lib "cggooglemapmarker__define.pro" nil "coyote") "%s" (nil))
   ("cgGoogleMapWidget" fun nil (lib "cggooglemapwidget.pro" nil "coyote") "Result = %s(parent)" (nil ("BOX_AXES") ("BUTTON_EVENTS") ("CENTER_LATITUDE") ("CENTER_LONGITUDE") ("EVENT_METHOD") ("EVENT_PRO") ("IMAGETYPE") ("KEEP_IMAGE") ("MAPTYPE") ("MARKERS") ("MOTION_EVENTS") ("TEMPDIR") ("VISIBLEMARKERS") ("XSIZE") ("YSIZE") ("ZOOMLEVEL")))
   ("INIT" fun "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("BOX_AXES") ("BUTTON_EVENTS") ("CENTER_LATITUDE") ("CENTER_LONGITUDE") ("EVENT_METHOD") ("EVENT_PRO") ("IMAGETYPE") ("KEEP_IMAGE") ("MAPTYPE") ("MARKERS") ("MOTION_EVENTS") ("TEMPDIR") ("VISIBLEMARKERS") ("XSIZE") ("YSIZE") ("ZOOMLEVEL")))
   ("CLEANUP" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CreateMapCoordObject" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Draw" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("SUCCESS")))
   ("DrawWidgetEvents" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("GetMapCoord" fun "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("UPDATE")))
   ("GetProperty" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CENTER_LATITUDE") ("CENTER_LONGITUDE") ("EVENT_METHOD") ("FILENAME") ("IMAGETYPE") ("MAPCOORD") ("MAPIMAGE") ("MAPPOSITION") ("MAPTYPE") ("MARKERS") ("WID") ("XSIZE") ("YSIZE") ("ZOOMLEVEL")))
   ("Map_Type" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Notify_Realize" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetProperty" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CENTER_LATITUDE") ("CENTER_LONGITUDE") ("DRAW") ("EVENT_METHOD") ("EVENT_PRO") ("IMAGETYPE") ("MAPTYPE") ("MARKERS") ("VISIBLEMARKERS") ("ZOOMLEVEL")))
   ("SetWindow" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Zoom_In" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Zoom_Out" pro "cgGoogleMapWidget" (lib "cggooglemapwidget__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("cgGoogleMapWidget_Notify_Realize" pro nil (lib "cggooglemapwidget__define.pro" nil "coyote") "%s, id" (nil))
   ("cgGoogleMapWidget_Cleanup" pro nil (lib "cggooglemapwidget__define.pro" nil "coyote") "%s, tlb" (nil))
   ("cgGoogleMapWidget_Events" pro nil (lib "cggooglemapwidget__define.pro" nil "coyote") "%s, event" (nil))
   ("cgGoogleMapWidget__Define" pro nil (lib "cggooglemapwidget__define.pro" nil "coyote") "%s, class" (nil))
   ("cgGoogle_MetersPerPixel" fun nil (lib "cggoogle_metersperpixel.pro" nil "coyote") "Result = %s(zoomLevel)" (nil))
   ("INIT" fun "cgGraphicsKeywords" (lib "cggraphicskeywords__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("AXISCOLOR") ("BACKGROUND") ("CHARSIZE") ("CHARTHICK") ("CLIP") ("COLOR") ("DATA") ("DEVICE") ("FONT") ("LINESTYLE") ("NOCLIP") ("NODATA") ("NOERASE") ("NORMAL") ("POSITION") ("PSYM") ("SUBTITLE") ("SYMSIZE") ("T3D") ("THICK") ("TICKLEN") ("TITLE") ("XCHARSIZE") ("XGRIDSTYLE") ("XMARGIN") ("XMINOR") ("XRANGE") ("XSTYLE") ("XTHICK") ("XTICK_GET") ("XTICKFORMAT") ("XTICKINTERVAL") ("XTICKLAYOUT") ("XTICKLEN") ("XTICKNAME") ("XTICKS") ("XTICKUNITS") ("XTICKV") ("XTITLE") ("YCHARSIZE") ("YGRIDSTYLE") ("YMARGIN") ("YMINOR") ("YRANGE") ("YSTYLE") ("YTHICK") ("YTICK_GET") ("YTICKFORMAT") ("YTICKINTERVAL") ("YTICKLAYOUT") ("YTICKLEN") ("YTICKNAME") ("YTICKS") ("YTICKUNITS") ("YTICKV") ("YTITLE") ("ZCHARSIZE") ("ZGRIDSTYLE") ("ZMARGIN") ("ZMINOR") ("ZRANGE") ("ZSTYLE") ("ZTHICK") ("ZTICK_GET") ("ZTICKFORMAT") ("ZTICKINTERVAL") ("ZTICKLAYOUT") ("ZTICKLEN") ("ZTICKNAME") ("ZTICKS") ("ZTICKUNITS") ("ZTICKV") ("ZTITLE") ("ZVALUE")))
   ("CLEANUP" pro "cgGraphicsKeywords" (lib "cggraphicskeywords__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgGraphicsKeywords" (lib "cggraphicskeywords__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("AXISCOLOR") ("BACKGROUND") ("CHARSIZE") ("CHARTHICK") ("CLIP") ("COLOR") ("DATA") ("DEVICE") ("FONT") ("LINESTYLE") ("NOCLIP") ("NODATA") ("NOERASE") ("NORMAL") ("POSITION") ("PSYM") ("SUBTITLE") ("SYMSIZE") ("T3D") ("THICK") ("TICKLEN") ("TITLE") ("XCHARSIZE") ("XGRIDSTYLE") ("XMARGIN") ("XMINOR") ("XRANGE") ("XSTYLE") ("XTHICK") ("XTICK_GET") ("XTICKFORMAT") ("XTICKINTERVAL") ("XTICKLAYOUT") ("XTICKLEN") ("XTICKNAME") ("XTICKS") ("XTICKUNITS") ("XTICKV") ("XTITLE") ("YCHARSIZE") ("YGRIDSTYLE") ("YMARGIN") ("YMINOR") ("YRANGE") ("YSTYLE") ("YTHICK") ("YTICK_GET") ("YTICKFORMAT") ("YTICKINTERVAL") ("YTICKLAYOUT") ("YTICKLEN") ("YTICKNAME") ("YTICKS") ("YTICKUNITS") ("YTICKV") ("YTITLE") ("ZCHARSIZE") ("ZGRIDSTYLE") ("ZMARGIN") ("ZMINOR") ("ZRANGE") ("ZSTYLE") ("ZTHICK") ("ZTICK_GET") ("ZTICKFORMAT") ("ZTICKINTERVAL") ("ZTICKLAYOUT") ("ZTICKLEN") ("ZTICKNAME") ("ZTICKS") ("ZTICKUNITS") ("ZTICKV") ("ZTITLE") ("ZVALUE")))
   ("SetProperty" pro "cgGraphicsKeywords" (lib "cggraphicskeywords__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("AXISCOLOR") ("BACKGROUND") ("CHARSIZE") ("CHARTHICK") ("CLIP") ("COLOR") ("DATA") ("DEVICE") ("FONT") ("LINESTYLE") ("NOCLIP") ("NODATA") ("NOERASE") ("NORMAL") ("POSITION") ("PSYM") ("SUBTITLE") ("SYMSIZE") ("T3D") ("THICK") ("TICKLEN") ("TITLE") ("XCHARSIZE") ("XGRIDSTYLE") ("XMARGIN") ("XMINOR") ("XRANGE") ("XSTYLE") ("XTHICK") ("XTICK_GET") ("XTICKFORMAT") ("XTICKINTERVAL") ("XTICKLAYOUT") ("XTICKLEN") ("XTICKNAME") ("XTICKS") ("XTICKUNITS") ("XTICKV") ("XTITLE") ("YCHARSIZE") ("YGRIDSTYLE") ("YMARGIN") ("YMINOR") ("YRANGE") ("YSTYLE") ("YTHICK") ("YTICK_GET") ("YTICKFORMAT") ("YTICKINTERVAL") ("YTICKLAYOUT") ("YTICKLEN") ("YTICKNAME") ("YTICKS") ("YTICKUNITS") ("YTICKV") ("YTITLE") ("ZCHARSIZE") ("ZGRIDSTYLE") ("ZMARGIN") ("ZMINOR") ("ZRANGE") ("ZSTYLE") ("ZTHICK") ("ZTICK_GET") ("ZTICKFORMAT") ("ZTICKINTERVAL") ("ZTICKLAYOUT") ("ZTICKLEN") ("ZTICKNAME") ("ZTICKS") ("ZTICKUNITS") ("ZTICKV") ("ZTITLE") ("ZVALUE")))
   ("cgGraphicsKeywords__Define" pro nil (lib "cggraphicskeywords__define.pro" nil "coyote") "%s, class" (nil))
   ("cgGreek_Example" pro nil (lib "cggreek.pro" nil "coyote") "%s" (nil ("PS") ("UNICODE")))
   ("cgGreek" fun nil (lib "cggreek.pro" nil "coyote") "Result = %s(letter)" (nil ("CAPITAL") ("EXAMPLE") ("PS") ("UNICODE")))
   ("cgHasImageMagick" fun nil (lib "cghasimagemagick.pro" nil "coyote") "Result = %s" (nil ("VERSION")))
   ("cgHistogram" fun nil (lib "cghistogram.pro" nil "coyote") "Result = %s(data)" (nil ("BINSIZE") ("FREQUENCY") ("INPUT") ("L64") ("LOCATIONS") ("MAX") ("MIN") ("MISSING") ("NAN") ("NBINS") ("OMAX") ("OMIN") ("REVERSE_INDICES") ("SMOOTH")))
   ("cgHistoplot" pro nil (lib "cghistoplot.pro" nil "coyote") "%s, data" (nil ("_REF_EXTRA") ("ADDCMD") ("AXISCOLORNAME") ("BACKCOLORNAME") ("BINSIZE") ("CHARSIZE") ("COLOR") ("DATACOLORNAME") ("FILENAME") ("FILLPOLYGON") ("FREQUENCY") ("HISTDATA") ("L64") ("LAYOUT") ("LINE_FILL") ("LINE_THICK") ("LOCATIONS") ("LOG") ("MAX_VALUE") ("MAXINPUT") ("MIN_VALUE") ("MININPUT") ("MISSING") ("NAN") ("NBINS") ("NOERASE") ("OMAX") ("OMIN") ("OPLOT") ("OPROBABILITY") ("ORIENTATION") ("OUTFILENAME") ("OUTLINE") ("OUTPUT") ("PATTERN") ("POLYCOLOR") ("POSITION") ("PROBABILITY_FUNCTION") ("PROBCOLORNAME") ("PROBTHICK") ("REVERSE_INDICES") ("ROTATE") ("SMOOTH") ("SPACING") ("THICK") ("TITLE") ("WINDOW") ("XTICKFORMAT") ("XTICKNAMES") ("XTICKS") ("XTICKVALUES") ("XTITLE") ("YTICKFORMAT") ("YTICKNAMES") ("YTICKS") ("YTICKVALUES") ("YTITLE")))
   ("cgImage_Make_Transparent_Image" fun nil (lib "cgimage.pro" nil "coyote") "Result = %s(image, transparent)" (nil ("MISSING_VALUE") ("PALETTE") ("SUCCESS")))
   ("cgImage_Prepare_Alpha" fun nil (lib "cgimage.pro" nil "coyote") "Result = %s(image, alphaBackgroundImage)" (nil ("ALPHABGPOSITION") ("ALPHAFGPOSITION") ("TV")))
   ("cgImage_Prepare_Output" fun nil (lib "cgimage.pro" nil "coyote") "Result = %s(image, xsize, ysize)" (nil ("BETA") ("BOTTOM") ("CLIP") ("EXCLUDE") ("EXPONENT") ("GAMMA") ("INTERPOLATE") ("MAXVALUE") ("MEAN") ("MINUS_ONE") ("MINVALUE") ("MISSING_INDEX") ("MISSING_VALUE") ("MULTIPLIER") ("NEGATIVE") ("SCALE") ("SIGMA") ("STRETCH") ("TOP")))
   ("cgImage" pro nil (lib "cgimage.pro" nil "coyote") "%s, image, x, y" (nil ("_REF_EXTRA") ("ADDCMD") ("ALPHABACKGROUNDIMAGE") ("ALPHABGPOSITION") ("ALPHAFGPOSITION") ("AXES") ("AXIS") ("AXKEYWORDS") ("BACKGROUND") ("BETA") ("BOTTOM") ("BREWER") ("CHARSIZE") ("CLIP") ("COLOR") ("CTINDEX") ("DISPLAY") ("ERASE") ("EXCLUDE") ("EXPONENT") ("FILENAME") ("FIT_INSIDE") ("FONT") ("GAMMA") ("INTERPOLATE") ("KEEP_ASPECT_RATIO") ("LAYOUT") ("MAPCOORD") ("MARGIN") ("MAXVALUE") ("MEAN") ("MINUS_ONE") ("MINVALUE") ("MISSING_COLOR") ("MISSING_INDEX") ("MISSING_VALUE") ("MULTIMARGIN") ("MULTIPLIER") ("NCOLORS") ("NEGATIVE") ("NOERASE") ("NOINTERPOLATION") ("NORMAL") ("OPOSITION") ("OUTFILENAME") ("OUTPUT") ("OVERPLOT") ("PALETTE") ("POSITION") ("QUIET") ("REVERSE") ("SAVE") ("SCALE") ("SIGMA") ("STRETCH") ("TITLE") ("TOP") ("TRANSPARENT") ("TV") ("WINDOW") ("XRANGE") ("XTITLE") ("YRANGE") ("YTITLE")))
   ("cgImage2KML" pro nil (lib "cgimage2kml.pro" nil "coyote") "%s, image, mapCoord" (nil ("ADDTOFILE") ("BREWER") ("CTINDEX") ("DESCRIPTION") ("DRAWORDER") ("FILENAME") ("FLYTO") ("GEOTIFF") ("KMZ") ("LATLONBOX") ("MAX_VALUE") ("MIN_VALUE") ("MISSING_VALUE") ("PALETTE") ("PLACENAME") ("RESIZE_FACTOR") ("REVERSE") ("TRANSPARENT")))
   ("Init" fun "cgImageGroup" (lib "cgimagegroup__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(image)" (nil ("FILENAME") ("REVERSE")))
   ("cgImageGroup__Define" pro nil (lib "cgimagegroup__define.pro" nil "coyote") "%s, class" (nil))
   ("cgImageInfo" pro nil (lib "cgimageinfo.pro" nil "coyote") "%s, image, position" (nil))
   ("cgDescribeThisImgValues" pro nil (lib "cgimageinfodescribevalues.pro" nil "coyote") "%s, image, id, xpixel, ypixel" (nil))
   ("cgImageInfoDescribeValues" pro nil (lib "cgimageinfodescribevalues.pro" nil "coyote") "%s, iimage, xpixel, ypixel, hsh" (nil))
   ("cgImgScl" fun nil (lib "cgimgscl.pro" nil "coyote") "Result = %s(image, xsize, ysize)" (nil ("BETA") ("BOTTOM") ("CLIP") ("EXCLUDE") ("EXPONENT") ("GAMMA") ("INTERPOLATE") ("MAXVALUE") ("MEAN") ("MINUS_ONE") ("MINVALUE") ("MISSING_INDEX") ("MISSING_VALUE") ("MULTIPLIER") ("NCOLORS") ("NEGATIVE") ("SCALE") ("SIGMA") ("STRETCH") ("TOP")))
   ("cgJulian2Date" fun nil (lib "cgjulian2date.pro" nil "coyote") "Result = %s(jnumber)" (nil ("FORMAT")))
   ("cgKML2KMZ" pro nil (lib "cgkml2kmz.pro" nil "coyote") "%s, kml_filename, supportFiles" (nil))
   ("INIT" fun "cgKML_Feature" (lib "cgkml_feature__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ABSTRACTVIEW") ("ADDRESS") ("AUTHOR") ("DESCRIPTION") ("EXTENDEDDATA") ("OPEN") ("PHONENUMBER") ("PLACENAME") ("SNIPPET") ("STYLEURL") ("TIMEPRIMITIVE") ("VISIBILITY")))
   ("Body" pro "cgKML_Feature" (lib "cgkml_feature__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Build" pro "cgKML_Feature" (lib "cgkml_feature__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("GetProperty" pro "cgKML_Feature" (lib "cgkml_feature__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ABSTRACTVIEW") ("ADDRESS") ("AUTHOR") ("DESCRIPTION") ("EXTENDEDDATA") ("OPEN") ("PHONENUMBER") ("PLACENAME") ("SNIPPET") ("STYLEURL") ("TIMEPRIMITIVE") ("VISIBILITY")))
   ("SetProperty" pro "cgKML_Feature" (lib "cgkml_feature__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ABSTRACTVIEW") ("ADDRESS") ("AUTHOR") ("DESCRIPTION") ("EXTENDEDDATA") ("OPEN") ("PHONENUMBER") ("PLACENAME") ("SNIPPET") ("STYLEURL") ("TIMEPRIMITIVE") ("VISIBILITY")))
   ("CLEANUP" pro "cgKML_Feature" (lib "cgkml_feature__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgKML_Feature__Define" pro nil (lib "cgkml_feature__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename)" (nil ("HINT")))
   ("Add" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s, theObject" (nil))
   ("Body" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Destroy" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("FILENAME") ("HINT") ("LEVEL")))
   ("Head" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Save" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("KMZ") ("SupportFiles")))
   ("SetProperty" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("FILENAME") ("HINT")))
   ("Tail" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("CLEANUP" pro "cgKML_File" (lib "cgkml_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgKML_File__Define" pro nil (lib "cgkml_file__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgKML_GroundOverlay" (lib "cgkml_groundoverlay__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ALTITUDE") ("ALTMODE") ("COLOR") ("DRAWORDER") ("HREF") ("LATLONBOX") ("LATLONQUAD") ("ROTATION")))
   ("Head" pro "cgKML_GroundOverlay" (lib "cgkml_groundoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Body" pro "cgKML_GroundOverlay" (lib "cgkml_groundoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Tail" pro "cgKML_GroundOverlay" (lib "cgkml_groundoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Build" pro "cgKML_GroundOverlay" (lib "cgkml_groundoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("GetProperty" pro "cgKML_GroundOverlay" (lib "cgkml_groundoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ALTITUDE") ("ALTMODE") ("LATLONBOX") ("LATLONQUAD") ("ROTATION")))
   ("SetProperty" pro "cgKML_GroundOverlay" (lib "cgkml_groundoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ALTITUDE") ("ALTMODE") ("LATLONBOX") ("LATLONQUAD") ("ROTATION")))
   ("CLEANUP" pro "cgKML_GroundOverlay" (lib "cgkml_groundoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgKML_GroundOverlay__Define" pro nil (lib "cgkml_groundoverlay__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgKML_LookAt" (lib "cgkml_lookat__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ALTITUDEMODE") ("HEADING") ("HEIGHT") ("LATITUDE") ("LONGITUDE") ("TILT")))
   ("Build" pro "cgKML_LookAt" (lib "cgkml_lookat__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Body" pro "cgKML_LookAt" (lib "cgkml_lookat__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Head" pro "cgKML_LookAt" (lib "cgkml_lookat__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Tail" pro "cgKML_LookAt" (lib "cgkml_lookat__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("GetProperty" pro "cgKML_LookAt" (lib "cgkml_lookat__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ALTITUDEMODE") ("HEADING") ("HEIGHT") ("LATITUDE") ("LONGITUDE") ("TILT")))
   ("SetProperty" pro "cgKML_LookAt" (lib "cgkml_lookat__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ALTITUDEMODE") ("HEADING") ("HEIGHT") ("LATITUDE") ("LONGITUDE") ("TILT")))
   ("CLEANUP" pro "cgKML_LookAt" (lib "cgkml_lookat__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgKML_LookAt__Define" pro nil (lib "cgkml_lookat__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgKML_Object" (lib "cgkml_object__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(id)" (nil ("_REF_EXTRA") ("TARGETID")))
   ("Build" pro "cgKML_Object" (lib "cgkml_object__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("XMLTag" pro "cgKML_Object" (lib "cgkml_object__define.pro" nil "coyote") "Obj ->[%s::]%s, tag, value" (nil ("LUN") ("SPACE")))
   ("GetParent" fun "cgKML_Object" (lib "cgkml_object__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgKML_Object" (lib "cgkml_object__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ID") ("PARENT") ("TARGETID")))
   ("SetProperty" pro "cgKML_Object" (lib "cgkml_object__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ID") ("PARENT") ("TARGETID")))
   ("CLEANUP" pro "cgKML_Object" (lib "cgkml_object__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgKML_Object__Define" pro nil (lib "cgkml_object__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgKML_Overlay" (lib "cgkml_overlay__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("COLOR") ("DRAWORDER") ("HREF")))
   ("Body" pro "cgKML_Overlay" (lib "cgkml_overlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Build" pro "cgKML_Overlay" (lib "cgkml_overlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("GetProperty" pro "cgKML_Overlay" (lib "cgkml_overlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("COLOR") ("DRAWORDER") ("HREF")))
   ("SetProperty" pro "cgKML_Overlay" (lib "cgkml_overlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("COLOR") ("DRAWORDER") ("HREF")))
   ("CLEANUP" pro "cgKML_Overlay" (lib "cgkml_overlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgKML_Overlay__Define" pro nil (lib "cgkml_overlay__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgKML_ScreenOverlay" (lib "cgkml_screenoverlay__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("COLOR") ("DRAWORDER") ("HREF") ("OVERLAY_UNIT_X") ("OVERLAY_UNIT_Y") ("OVERLAY_XY") ("ROTATION") ("SCREEN_UNIT_X") ("SCREEN_UNIT_Y") ("SCREEN_XY") ("SIZE_UNIT_X") ("SIZE_UNIT_Y") ("SIZE_XY")))
   ("Head" pro "cgKML_ScreenOverlay" (lib "cgkml_screenoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Body" pro "cgKML_ScreenOverlay" (lib "cgkml_screenoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Tail" pro "cgKML_ScreenOverlay" (lib "cgkml_screenoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("Build" pro "cgKML_ScreenOverlay" (lib "cgkml_screenoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("LUN")))
   ("GetProperty" pro "cgKML_ScreenOverlay" (lib "cgkml_screenoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("OVERLAY_UNIT_X") ("OVERLAY_UNIT_Y") ("OVERLAY_XY") ("ROTATION") ("SCREEN_UNIT_X") ("SCREEN_UNIT_Y") ("SCREEN_XY") ("SIZE_UNIT_X") ("SIZE_UNIT_Y") ("SIZE_XY")))
   ("SetProperty" pro "cgKML_ScreenOverlay" (lib "cgkml_screenoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("OVERLAY_UNIT_X") ("OVERLAY_UNIT_Y") ("OVERLAY_XY") ("ROTATION") ("SCREEN_UNIT_X") ("SCREEN_UNIT_Y") ("SCREEN_XY") ("SIZE_UNIT_X") ("SIZE_UNIT_Y") ("SIZE_XY")))
   ("CLEANUP" pro "cgKML_ScreenOverlay" (lib "cgkml_screenoverlay__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgKML_ScreenOverlay__Define" pro nil (lib "cgkml_screenoverlay__define.pro" nil "coyote") "%s, class" (nil))
   ("cgKrig2d_Exponential" fun nil (lib "cgkrig2d.pro" nil "coyote") "Result = %s(d, t)" (nil))
   ("cgKrig2d_Spherical" fun nil (lib "cgkrig2d.pro" nil "coyote") "Result = %s(d, t)" (nil))
   ("cgKrig2d" fun nil (lib "cgkrig2d.pro" nil "coyote") "Result = %s(z, x, y)" (nil ("BOUNDS") ("DOUBLE") ("EXPONENTIAL") ("GS") ("NX") ("NY") ("REGULAR") ("SPHERICAL") ("XGRID") ("XOUT") ("XVALUES") ("YGRID") ("YOUT") ("YVALUES")))
   ("cgLayout" fun nil (lib "cglayout.pro" nil "coyote") "Result = %s(layout)" (nil ("ASPECT") ("IXMARGIN") ("IYMARGIN") ("OXMARGIN") ("OYMARGIN") ("XGAP") ("YGAP")))
   ("cgLegend" pro nil (lib "cglegend.pro" nil "coyote") "%s" (nil ("ADDCMD") ("ALIGNMENT") ("BACKGROUND") ("BG_COLOR") ("BOX") ("BX_COLOR") ("BX_THICK") ("CENTER_SYM") ("CHARSIZE") ("COLORS") ("DATA") ("HARDWARE") ("LENGTH") ("LINESTYLES") ("LOCATION") ("PSYMS") ("SYMCOLORS") ("SYMSIZE") ("SYMTHICK") ("TCOLORS") ("THICK") ("TITLES") ("TT_FONT") ("VISIBLE") ("VSPACE") ("WINDOW")))
   ("INIT" fun "cgLegendItem" (lib "cglegenditem__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("ADDCMD") ("ALIGNMENT") ("BACKGROUND") ("BG_COLOR") ("BOX") ("BX_COLOR") ("BX_THICK") ("CENTER_SYM") ("CHARSIZE") ("COLORS") ("DATA") ("DRAW") ("HARDWARE") ("LENGTH") ("LINESTYLES") ("LOCATION") ("PSYMS") ("SYMCOLORS") ("SYMSIZE") ("SYMTHICK") ("TCOLORS") ("THICK") ("TITLES") ("TT_FONT") ("VISIBLE") ("VSPACE") ("WINDOW")))
   ("AddCmd" pro "cgLegendItem" (lib "cglegenditem__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DESTROY_OBJECT") ("METHOD") ("REPLACE")))
   ("CalculateBoxSize" pro "cgLegendItem" (lib "cglegenditem__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Draw" pro "cgLegendItem" (lib "cglegenditem__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgLegendItem" (lib "cglegenditem__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("ALIGNMENT") ("BACKGROUND") ("BG_COLOR") ("BOX") ("BX_COLOR") ("BX_THICK") ("CENTER_SYM") ("CHARSIZE") ("COLORS") ("DATA") ("HARDWARE") ("LENGTH") ("LINESTYLES") ("LOCATION") ("PSYMS") ("SYMCOLORS") ("SYMSIZE") ("SYMTHICK") ("TCOLORS") ("THICK") ("TITLES") ("TT_FONT") ("VISIBLE") ("VSPACE")))
   ("SetProperty" pro "cgLegendItem" (lib "cglegenditem__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("ALIGNMENT") ("BG_COLOR") ("BOX") ("BX_COLOR") ("BX_THICK") ("CENTER_SYM") ("CHARSIZE") ("COLORS") ("DATA") ("HARDWARE") ("LENGTH") ("LINESTYLES") ("LOCATION") ("PSYMS") ("SYMCOLORS") ("SYMSIZE") ("SYMTHICK") ("TCOLORS") ("THICK") ("TITLES") ("TT_FONT") ("VISIBLE") ("VSPACE")))
   ("CLEANUP" pro "cgLegendItem" (lib "cglegenditem__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgLegendItem__Define" pro nil (lib "cglegenditem__define.pro" nil "coyote") "%s, class" (nil))
   ("cgLoadCT" pro nil (lib "cgloadct.pro" nil "coyote") "%s, table" (nil ("ADDCMD") ("BOTTOM") ("BREWER") ("CLIP") ("FILENAME") ("GET_NAMES") ("NCOLORS") ("REVERSE") ("RGB_TABLE") ("ROW") ("SILENT") ("WINDOW") ("WINID")))
   ("cgLogGen" fun nil (lib "cgloggen.pro" nil "coyote") "Result = %s(numpts)" (nil ("Double") ("Finish") ("Start")))
   ("INIT" fun "cgMapContinents" (lib "cgmapcontinents__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(mapCoord)" (nil ("_EXTRA") ("ADDCMD") ("BACKGROUND") ("COASTS") ("COLOR") ("CONTINENTS") ("COUNTRIES") ("FILENAME") ("FILL") ("GSHHS") ("HIRES") ("LAND_COLOR") ("LEVEL") ("LINESTYLE") ("MAP_OBJECT") ("MINAREA") ("OUTLINE") ("RIVERS") ("T3D") ("THICK") ("USA") ("WATER_COLOR") ("ZVALUE")))
   ("AddCmd" pro "cgMapContinents" (lib "cgmapcontinents__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Confirm_Filename" fun "cgMapContinents" (lib "cgmapcontinents__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename)" (nil))
   ("Draw" pro "cgMapContinents" (lib "cgmapcontinents__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgMapContinents" (lib "cgmapcontinents__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("BACKGROUND") ("COASTS") ("COLOR") ("CONTINENTS") ("COUNTRIES") ("FILENAME") ("FILL") ("GSHHS") ("HIRES") ("LAND_COLOR") ("LEVEL") ("LINESTYLE") ("MAP_OBJECT") ("MAP_STRUCTURE") ("MINAREA") ("OUTLINE") ("RIVERS") ("T3D") ("THICK") ("USA") ("WATER_COLOR") ("ZVALUE")))
   ("SetProperty" pro "cgMapContinents" (lib "cgmapcontinents__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("BACKGROUND") ("COASTS") ("COLOR") ("CONTINENTS") ("COUNTRIES") ("DRAW") ("FILENAME") ("FILL") ("GSHHS") ("HIRES") ("LAND_COLOR") ("LEVEL") ("LINESTYLE") ("MAP_OBJECT") ("MINAREA") ("OUTLINE") ("RIVERS") ("T3D") ("THICK") ("USA") ("WATER_COLOR") ("ZVALUE")))
   ("CLEANUP" pro "cgMapContinents" (lib "cgmapcontinents__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgMapContinents__DEFINE" pro nil (lib "cgmapcontinents__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgMapGrid" (lib "cgmapgrid__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(mapCoord)" (nil ("_EXTRA") ("ADDCMD") ("AUTODRAWGRID") ("BCOLOR") ("BOX_AXES") ("CHARSIZE") ("CLIP_TEXT") ("COLOR") ("FILL_HORIZON") ("FORMAT") ("FUZZY") ("HORIZON") ("INCREMENT") ("LABEL") ("LATALIGN") ("LATDEL") ("LATLAB") ("LATNAMES") ("LATS") ("LCOLOR") ("LINESTYLE") ("LONALIGN") ("LONDEL") ("LONLAB") ("LONNAMES") ("LONS") ("THICK")))
   ("AddCmd" pro "cgMapGrid" (lib "cgmapgrid__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("AutoDrawGrid" pro "cgMapGrid" (lib "cgmapgrid__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("SUCCESS")))
   ("Draw" pro "cgMapGrid" (lib "cgmapgrid__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgMapGrid" (lib "cgmapgrid__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("AUTODRAWGRID") ("BOX_AXES") ("CHARSIZE") ("CLIP_TEXT") ("COLOR") ("FILL_HORIZON") ("FIXED_cgMapGrid") ("FORMAT") ("HORIZON") ("INCREMENT") ("LABEL") ("LATALIGN") ("LATDEL") ("LATLAB") ("LATNAMES") ("LATS") ("LCOLOR") ("LINESTYLE") ("LONALIGN") ("LONDEL") ("LONLAB") ("LONNAMES") ("LONS") ("MAP_OBJECT") ("MAP_STRUCTURE") ("THICK")))
   ("SetProperty" pro "cgMapGrid" (lib "cgmapgrid__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("AUTODRAWGRID") ("BOX_AXES") ("CHARSIZE") ("CLIP_TEXT") ("COLOR") ("DRAW") ("FILL_HORIZON") ("FIXED_cgMapGrid") ("FORMAT") ("HORIZON") ("INCREMENT") ("LABEL") ("LATALIGN") ("LATDEL") ("LATLAB") ("LATNAMES") ("LATS") ("LCOLOR") ("LINESTYLE") ("LONALIGN") ("LONDEL") ("LONLAB") ("LONNAMES") ("LONS") ("THICK")))
   ("CLEANUP" pro "cgMapGrid" (lib "cgmapgrid__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgMapGrid__DEFINE" pro nil (lib "cgmapgrid__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgMapPlotS" (lib "cgmapplots__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(mapCoord)" (nil ("_EXTRA") ("ADDCMD") ("CLIP") ("COLOR") ("LATS") ("LINESTYLE") ("LONS") ("NOCLIP") ("PSYM") ("SYMSIZE") ("T3D") ("THICK") ("UVCOORDS") ("ZVALUE")))
   ("AddCmd" pro "cgMapPlotS" (lib "cgmapplots__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Draw" pro "cgMapPlotS" (lib "cgmapplots__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgMapPlotS" (lib "cgmapplots__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("CLIP") ("COLOR") ("LATS") ("LINESTYLE") ("LONS") ("MAPCOORD") ("NOCLIP") ("PSYM") ("SYMSIZE") ("T3D") ("THICK") ("UVCOORDS") ("ZVALUE")))
   ("SetProperty" pro "cgMapPlotS" (lib "cgmapplots__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ADDCMD") ("CLIP") ("COLOR") ("LATS") ("LINESTYLE") ("LONS") ("NOCLIP") ("PSYM") ("SYMSIZE") ("T3D") ("THICK") ("UVCOORDS") ("ZVALUE")))
   ("CLEANUP" pro "cgMapPlotS" (lib "cgmapplots__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgMapPlotS__DEFINE" pro nil (lib "cgmapplots__define.pro" nil "coyote") "%s, class" (nil))
   ("INIT" fun "cgMapVector" (lib "cgmapvector__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(mapCoord)" (nil ("_EXTRA") ("ADDCMD") ("CLIP") ("COLOR") ("HSIZE") ("LATS") ("LENGTH") ("LINESTYLE") ("LONS") ("NOCLIP") ("PALETTE") ("SOLID") ("T3d") ("THICK") ("UMAGNITUDE") ("UVCOORDS") ("VMAGNITUDE") ("ZVALUE")))
   ("DrawArrow" pro "cgMapVector" (lib "cgmapvector__define.pro" nil "coyote") "Obj ->[%s::]%s, x0, y0, x1, y1" (nil ("_EXTRA") ("CLIP") ("COLOR") ("DATA") ("HSIZE") ("HTHICK") ("LINESTYLE") ("NORMALIZED") ("SOLID") ("THICK")))
   ("Draw" pro "cgMapVector" (lib "cgmapvector__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgMapVector" (lib "cgmapvector__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("CLIP") ("COLOR") ("HSIZE") ("LATS") ("LENGTH") ("LINESTYLE") ("LONS") ("MAPCOORD") ("NOCLIP") ("SOLID") ("T3D") ("THICK") ("UMAGNITUDE") ("UVCOORDS") ("VMAGNITUDE") ("ZVALUE")))
   ("SetProperty" pro "cgMapVector" (lib "cgmapvector__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ADDCMD") ("CLIP") ("COLOR") ("HSIZE") ("LATS") ("LENGTH") ("LINESTYLE") ("LONS") ("MAPCOORD") ("NOCLIP") ("PALETTE") ("SOLID") ("T3D") ("THICK") ("UMAGNITUDE") ("UVCOORDS") ("VMAGNITUDE") ("ZVALUE")))
   ("CLEANUP" pro "cgMapVector" (lib "cgmapvector__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgMapVector__DEFINE" pro nil (lib "cgmapvector__define.pro" nil "coyote") "%s, class" (nil))
   ("cgMap_Continents" pro nil (lib "cgmap_continents.pro" nil "coyote") "%s" (nil ("_EXTRA") ("ADDCMD") ("BACKGROUND") ("COASTS") ("COLOR") ("CONTINENTS") ("COUNTRIES") ("FILL_CONTINENTS") ("HIRES") ("LIMITS") ("LINESTYLE") ("MAP_STRUCTURE") ("MLINESTYLE") ("MLINETHICK") ("ORIENTATION") ("OUTLINE") ("RIVERS") ("SPACING") ("T3D") ("THICK") ("USA") ("ZVALUE")))
   ("cgMap_Grid_Incr" fun nil (lib "cgmap_grid.pro" nil "coyote") "Result = %s(span)" (nil))
   ("cgMap_Grid_Solve" fun nil (lib "cgmap_grid.pro" nil "coyote") "Result = %s(c0, c1, icoord, gwant)" (nil ("MAP_STRUCTURE")))
   ("cgMap_Grid_Check_Range" fun nil (lib "cgmap_grid.pro" nil "coyote") "Result = %s(xy)" (nil ("FUZZY") ("GCTP")))
   ("cgMap_Grid" pro nil (lib "cgmap_grid.pro" nil "coyote") "%s" (nil ("ADDCMD") ("BCOLOR") ("BLABEL") ("BOX_AXES") ("BTHICK") ("CGGRID") ("CHARSIZE") ("CLIP_TEXT") ("COLOR") ("FILL_HORIZON") ("FORMAT") ("FUZZY") ("GLINESTYLE") ("GLINETHICK") ("HORIZON") ("INCREMENT") ("LABEL") ("LATALIGN") ("LATDELTA") ("LATLABEL") ("LATNAMES") ("LATS") ("LCOLOR") ("LINESTYLE") ("LONALIGN") ("LONDELTA") ("LONLABEL") ("LONNAMES") ("LONS") ("MAP_STRUCTURE") ("NO_GRID") ("NOCLIP") ("ORIENTATION") ("T3D") ("THICK") ("ZVALUE")))
   ("cgMap_GSHHS" pro nil (lib "cgmap_gshhs.pro" nil "coyote") "%s, filename" (nil ("ADDCMD") ("COLOR") ("FILL") ("LAND_COLOR") ("LEVEL") ("MAP_STRUCTURE") ("MINAREA") ("NOCLIP") ("OUTLINE") ("THICK") ("WATER_COLOR")))
   ("cgMap_Set" pro nil (lib "cgmap_set.pro" nil "coyote") "%s, p0lat, p0lon, rot" (nil ("ADDCMD") ("ADVANCE") ("AITOFF") ("ALBERS") ("AZIMUTHAL") ("BACKGROUND") ("BOX_AXES") ("CENTRAL_AZIMUTH") ("CHARSIZE") ("CLIP") ("COASTS") ("COLOR") ("CON_COLOR") ("CONIC") ("CONTINENTS") ("COUNTRIES") ("CYLINDRICAL") ("E_CONTINENTS") ("E_GRID") ("E_HORIZON") ("ELLIPSOID") ("ERASE") ("FILL_CONTINENTS") ("GLINESTYLE") ("GLINETHICK") ("GNOMIC") ("GOODESHOMOLOSINE") ("GRID") ("HAMMER") ("HIRES") ("HORIZON") ("ISOTROPIC")))
   ("INIT" fun "cgMap" (lib "cgmap__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(map_projection)" (nil ("_EXTRA") ("ADDCMD") ("ASPECT") ("BACKGROUND") ("BCOLOR") ("BOX_AXES") ("CCOLOR") ("CENTER_LATITUDE") ("CENTER_LONGITUDE") ("COLOR") ("CONTINENTS") ("DATUM") ("DRAW") ("ELLIPSOID") ("ERASE") ("FALSE_EASTING") ("FALSE_NORTHING") ("FILL") ("GCOLOR") ("GRID") ("HIRES") ("ISOTROPIC") ("LAND_COLOR") ("LATLON_RANGES") ("LCOLOR") ("LIMIT") ("NAME") ("NOBORDER") ("NOFORWARDFIX") ("ONIMAGE") ("POSITION") ("RADIANS") ("SEMIMAJOR_AXIS") ("SEMIMINOR_AXIS") ("SPHERE_RADIUS") ("TITLE") ("UVALUE") ("WINDOW") ("XRANGE") ("YRANGE") ("ZONE")))
   ("AddCmd" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("METHOD") ("REPLACE")))
   ("AddOverlay" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s, overLayObject" (nil))
   ("Advance" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DRAW")))
   ("Draw" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ERASE") ("NOGRAPHICS")))
   ("Erase" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("COLOR")))
   ("Forward" fun "cgMap" (lib "cgmap__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(lons, lats, mapStruct)" (nil ("NOFORWARDFIX")))
   ("Is_Cylindrical" fun "cgMap" (lib "cgmap__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetMapStruct" fun "cgMap" (lib "cgmap__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("BACKGROUND") ("BCOLOR") ("BOUNDARY") ("CENTER_LATITUDE") ("CENTER_LONGITUDE") ("COLOR") ("DATUM") ("DRAW") ("ELLIPSOID") ("ERASE") ("FALSE_EASTING") ("FALSE_NORTHING") ("HIRES") ("LATLONBOX") ("LIMIT") ("MAP_PROJECTION") ("NAME") ("NOBORDER") ("NOFORWARDFIX") ("ONIMAGE") ("OVERLAYS") ("POSITION") ("RADIANS") ("SEMIMAJOR_AXIS") ("SEMIMINOR_AXIS") ("SPHERE_RADIUS") ("TITLE") ("UVALUE") ("XRANGE") ("YRANGE") ("ZONE")))
   ("Inverse" fun "cgMap" (lib "cgmap__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(x, y)" (nil))
   ("LatLonLabels" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("FORMAT") ("LATDELTA") ("LATLAB") ("LATNAMES") ("LATS") ("LONDELTA") ("LONLAB") ("LONNAMES") ("LONS") ("SUCCESS")))
   ("MapInfo" fun "cgMap" (lib "cgmap__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("SetProperty" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("BACKGROUND") ("BCOLOR") ("BOX_AXES") ("CCOLOR") ("CENTER_LATITUDE") ("CENTER_LONGITUDE") ("COLOR") ("CONTINENTS") ("DATUM") ("DRAW") ("ELLIPSOID") ("ERASE") ("FALSE_EASTING") ("FALSE_NORTHING") ("GCOLOR") ("GRID") ("HIRES") ("LATLON_RANGES") ("LCOLOR") ("LIMIT") ("MAP_PROJECTION") ("NAME") ("NOBORDER") ("NOFORWARDFIX") ("ONIMAGE") ("POSITION") ("RADIANS") ("SEMIMAJOR_AXIS") ("SEMIMINOR_AXIS") ("SPHERE_RADIUS") ("TITLE") ("UVALUE") ("XRANGE") ("YRANGE") ("ZONE")))
   ("SetMapProjection" fun "cgMap" (lib "cgmap__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(map_projection)" (nil ("_EXTRA") ("CENTER_LATITUDE") ("CENTER_LONGITUDE") ("DATUM") ("ELLIPSOID") ("FALSE_EASTING") ("FALSE_NORTHING") ("LATLON_RANGES") ("LIMIT") ("POSITION") ("RADIANS") ("SEMIMAJOR_AXIS") ("SEMIMINOR_AXIS") ("SPHERE_RADIUS") ("XRANGE") ("YRANGE") ("ZONE")))
   ("CLEANUP" pro "cgMap" (lib "cgmap__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("cgMap__Define" pro nil (lib "cgmap__define.pro" nil "coyote") "%s, class" (nil))
   ("cgMinMax" pro nil (lib "cgminmax.pro" nil "coyote") "%s, variable" (nil ("NAN") ("TEXT")))
   ("cgMonths" fun nil (lib "cgmonths.pro" nil "coyote") "Result = %s(index)" (nil ("ABBREVIATION") ("ALLCAPS") ("FIRSTLETTER") ("LOWCASE")))
   ("cgNCDFMap_GetMapUnit" fun nil (lib "cgncdfmap.pro" nil "coyote") "Result = %s(varWithMap, fileObj)" (nil ("SILENT")))
   ("cgNCDFMap_FindBoundary" fun nil (lib "cgncdfmap.pro" nil "coyote") "Result = %s(varWithMap, thisMapVar, fileObj, mapCoord)" (nil ("SILENT") ("USE_LATLON") ("XRANGE") ("YRANGE")))
   ("cgNCDFMap_EllipseAxes" fun nil (lib "cgncdfmap.pro" nil "coyote") "Result = %s(varWithMap, thisMapVar, fileObj)" (nil ("SEMIMAJOR_AXIS") ("SEMIMINOR_AXIS") ("SILENT")))
   ("cgNCDFMap" fun nil (lib "cgncdfmap.pro" nil "coyote") "Result = %s(ncdf_filename)" (nil ("CCOLOR") ("CONTINENTS") ("GCOLOR") ("GRID") ("MCOLOR") ("ONIMAGE") ("SILENT") ("SUCCESS") ("TITLE") ("USE_LATLON") ("XRANGE") ("YRANGE")))
   ("cgNormalize" fun nil (lib "cgnormalize.pro" nil "coyote") "Result = %s(range)" (nil ("Position")))
   ("cgNumber_Formatter" fun nil (lib "cgnumber_formatter.pro" nil "coyote") "Result = %s(number)" (nil ("DECIMALS")))
   ("cgOBJ_ISA" fun nil (lib "cgobj_isa.pro" nil "coyote") "Result = %s(object, classname)" (nil))
   ("cgOPlot" pro nil (lib "cgoplot.pro" nil "coyote") "%s, x, y" (nil ("_REF_EXTRA") ("ADDCMD") ("CHARSIZE") ("COLOR") ("PSYM") ("SYMCOLOR") ("SYMSIZE")))
   ("cgOTSU_THRESHOLD" fun nil (lib "cgotsu_threshold.pro" nil "coyote") "Result = %s(data)" (nil ("BINSIZE") ("EXAMPLE") ("HISTDATA") ("L64") ("LOCATIONS") ("MAX") ("MIN") ("MISSING") ("NAN") ("NBINS") ("OMAX") ("OMIN") ("PLOTIT") ("REVERSE_INDICES")))
   ("INIT" fun "cgOverPlot" (lib "cgoverplot__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(x, y)" (nil ("ADDCMD") ("COLOR") ("DRAW") ("LINESTYLE") ("PSYM") ("SKIP") ("SYMCOLOR") ("SYMSIZE") ("SYMTHICK") ("THICK") ("VISIBLE")))
   ("CLEANUP" pro "cgOverPlot" (lib "cgoverplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Draw" pro "cgOverPlot" (lib "cgoverplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("SKIP")))
   ("GetProperty" pro "cgOverPlot" (lib "cgoverplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("COLOR") ("DEP") ("DRAW") ("INDEP") ("LINESTYLE") ("PSYM") ("SKIP") ("SYMCOLOR") ("SYMSIZE") ("SYMTHICK") ("THICK") ("VISIBLE") ("XRANGE") ("YRANGE")))
   ("SetProperty" pro "cgOverPlot" (lib "cgoverplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("COLOR") ("DEP") ("DRAW") ("INDEP") ("LINESTYLE") ("PSYM") ("SKIP") ("SYMCOLOR") ("SYMSIZE") ("SYMTHICK") ("THICK") ("VISIBLE")))
   ("cgOverPlot__Define" pro nil (lib "cgoverplot__define.pro" nil "coyote") "%s, class" (nil))
   ("cgPercentiles" fun nil (lib "cgpercentiles.pro" nil "coyote") "Result = %s(data)" (nil ("Percentiles")))
   ("cgPickColorName_Select_Color" pro nil (lib "cgpickcolorname.pro" nil "coyote") "%s, event" (nil))
   ("cgPickColorName_Buttons" pro nil (lib "cgpickcolorname.pro" nil "coyote") "%s, event" (nil))
   ("cgPickColorName" fun nil (lib "cgpickcolorname.pro" nil "coyote") "Result = %s(theName)" (nil ("Bottom") ("Brewer") ("Cancel") ("Columns") ("Filename") ("Group_Leader") ("Index") ("Title")))
   ("cgPickfile" fun nil (lib "cgpickfile.pro" nil "coyote") "Result = %s" (nil ("_REF_EXTRA") ("DATADIR") ("DEMO") ("HDF") ("JPEG") ("LAST_FILE") ("LIDAR") ("NCDF") ("PNG") ("TIFF") ("TITLE") ("WRITE")))
   ("cgPixmap" fun nil (lib "cgpixmap.pro" nil "coyote") "Result = %s(command, p1, p2, p3, p4)" (nil ("_Extra") ("AddCmd") ("AltPS_Keywords") ("AltPS_Params") ("CmdDelay") ("CmdIndex") ("DeleteCmd") ("ExecuteCmd") ("Group_Leader") ("ListCmd") ("LoadCmd") ("Method") ("ReplaceCmd") ("WAspect") ("WBackground") ("WDestroyObjects") ("WErase") ("WinID") ("WMulti") ("WObject") ("WOXMargin") ("WOYMargin") ("WTitle") ("WXPos") ("WXSize") ("WYPos") ("WYSize")))
   ("INIT" fun "cgPixmapWindow" (lib "cgpixmapwindow__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("AltPS_Keywords") ("AltPS_Params") ("Command") ("EraseIt") ("Group_Leader") ("Method") ("Multi") ("OXMargin") ("OYMargin") ("P1") ("P2") ("P3") ("P4") ("ReplaceCmd") ("Storage") ("Visible") ("WAspect") ("WBackground") ("WDestroyObjects") ("WXSize") ("WYSize")))
   ("SetProperty" pro "cgPixmapWindow" (lib "cgpixmapwindow__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("VISIBLE")))
   ("cgPixmapWindow__Define" pro nil (lib "cgpixmapwindow__define.pro" nil "coyote") "%s, class" (nil))
   ("cgPlot" pro nil (lib "cgplot.pro" nil "coyote") "%s, x, y" (nil ("_REF_EXTRA") ("ADDCMD") ("ASPECT") ("AXESCOLOR") ("AXISCOLOR") ("BACKGROUND") ("CHARSIZE") ("COLOR") ("ERR_COLOR") ("ERR_THICK") ("ERR_WIDTH") ("ERR_XHIGH") ("ERR_XLOW") ("ERR_YHIGH") ("ERR_YLOW") ("FONT") ("ISOTROPIC") ("LABEL") ("LAYOUT") ("LEGENDS") ("MAP_OBJECT") ("NODATA") ("NOERASE") ("OPLOTS") ("OUTFILENAME") ("OUTPUT") ("OVERPLOT") ("POSITION") ("PSYM") ("SYMCOLOR") ("SYMSIZE") ("TITLE") ("TRADITIONAL") ("WINDOW") ("XRANGE") ("XSTYLE") ("XTITLE") ("YRANGE") ("YSTYLE") ("YTITLE")))
   ("cgPlotS" pro nil (lib "cgplots.pro" nil "coyote") "%s, x, y, z" (nil ("_EXTRA") ("ADDCMD") ("COLOR") ("MAP_OBJECT") ("PSYM") ("SYMCOLOR") ("SYMSIZE") ("WINDOW")))
   ("cgPolygon" pro nil (lib "cgpolygon.pro" nil "coyote") "%s, x, y, z" (nil ("_REF_EXTRA") ("ADDCMD") ("CHECKFORFINITE") ("COLOR") ("DEVICE") ("FCOLOR") ("FILL") ("MAP_OBJECT") ("NORMAL") ("POSITION") ("WINDOW")))
   ("INIT" fun "cgProgressBar" (lib "cgprogressbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("CANCELBUTTON") ("GROUP_LEADER") ("NOCANCEL") ("PERCENT") ("START") ("TEXT") ("TITLE") ("XOFFSET") ("XSIZE") ("YOFFSET") ("YSIZE")))
   ("CLEANUP" pro "cgProgressBar" (lib "cgprogressbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CheckCancel" fun "cgProgressBar" (lib "cgprogressbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("MESSAGE") ("RESPOND")))
   ("CreateImage" fun "cgProgressBar" (lib "cgprogressbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Destroy" pro "cgProgressBar" (lib "cgprogressbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Update" pro "cgProgressBar" (lib "cgprogressbar__define.pro" nil "coyote") "Obj ->[%s::]%s, percent" (nil))
   ("UpdateMask" pro "cgProgressBar" (lib "cgprogressbar__define.pro" nil "coyote") "Obj ->[%s::]%s, percent" (nil))
   ("Start" pro "cgProgressBar" (lib "cgprogressbar__define.pro" nil "coyote") "Obj ->[%s::]%s, percent" (nil))
   ("Progressbar_Example_Event" pro nil (lib "cgprogressbar__define.pro" nil "coyote") "%s, event" (nil))
   ("Progressbar_Example" pro nil (lib "cgprogressbar__define.pro" nil "coyote") "%s" (nil))
   ("cgProgressBar__Define" pro nil (lib "cgprogressbar__define.pro" nil "coyote") "%s, class" (nil))
   ("cgPS2PDF" pro nil (lib "cgps2pdf.pro" nil "coyote") "%s, ps_file, pdf_file" (nil ("DELETE_PS") ("GS_PATH") ("PAGETYPE") ("SHOWCMD") ("SILENT") ("SUCCESS") ("UNIX_CONVERT_CMD") ("VERSION")))
   ("cgPS2Raster" pro nil (lib "cgps2raster.pro" nil "coyote") "%s, ps_filename, raster_filename" (nil ("ALLOW_TRANSPARENT") ("BMP") ("DELETE_PS") ("DENSITY") ("FILETYPE") ("GIF") ("HEIGHT") ("IM_COMMAND") ("IM_OPTIONS") ("JPEG") ("OUTFILENAME") ("PDF") ("PNG") ("PORTRAIT") ("RESIZE") ("SHOWCMD") ("SILENT") ("SUCCESS") ("TIFF") ("WIDTH")))
   ("cgPSDims" fun nil (lib "cgpsdims.pro" nil "coyote") "Result = %s(filename)" (nil ("SUCCESS")))
   ("cgPS_Close" pro nil (lib "cgps_close.pro" nil "coyote") "%s" (nil ("ALLOW_TRANSPARENT") ("BMP") ("DELETE_PS") ("DENSITY") ("FILETYPE") ("GIF") ("GS_PATH") ("IM_OPTIONS") ("JPEG") ("NOFIX") ("NOMESSAGE") ("OUTFILENAME") ("PDF") ("PNG") ("RESIZE") ("SHOWCMD") ("TIFF") ("UNIX_CONVERT_CMD") ("WIDTH")))
   ("cgPS_Config" fun nil (lib "cgps_config.pro" nil "coyote") "Result = %s(psObject)" (nil ("AvantGarde") ("Bits_per_Pixel") ("Bkman") ("Bold") ("BookStyle") ("Cancel") ("CMYK") ("Color") ("Courier") ("Debug") ("Decomposed") ("DefaultSetup") ("Demi") ("Directory") ("Encapsulated") ("European") ("Filename") ("FontInfo") ("FontSize") ("FontType") ("Group_Leader") ("Helvetica") ("Inches") ("Isolatin") ("Italic") ("Landscape") ("Light") ("Match") ("Medium") ("Metric") ("Name") ("Narrow") ("NoGUI") ("Oblique") ("PageType") ("Palatino") ("Preview") ("Schoolbook") ("Set_Font") ("Symbol") ("Times") ("TrueType") ("XOffset") ("XSize") ("YOffset") ("YSize") ("ZapfChancery") ("ZapfDingbats")))
   ("cgPS_Open" pro nil (lib "cgps_open.pro" nil "coyote") "%s, filename" (nil ("_REF_EXTRA") ("CANCEL") ("CHARSIZE") ("DEFAULT_THICKNESS") ("DEJAVUSANS") ("ENCAPSULATED") ("FILENAME") ("FONT") ("GUI") ("KEYWORDS") ("LANDSCAPE") ("NOMATCH") ("QUIET") ("SCALE_FACTOR") ("TT_FONT")))
   ("cgPS_SETUP__DEFINE" pro nil (lib "cgps_setup__define.pro" nil "coyote") "%s" (nil))
   ("cgQuery" fun nil (lib "cgquery.pro" nil "coyote") "Result = %s" (nil ("COUNT") ("CURRENT") ("DIMENSIONS") ("OBJECTREF") ("TITLE") ("WIDGETID")))
   ("cgRandomIndices" fun nil (lib "cgrandomindices.pro" nil "coyote") "Result = %s(length, number)" (nil ("SEED")))
   ("cgRandomWald" fun nil (lib "cgrandomwald.pro" nil "coyote") "Result = %s(seed, dims)" (nil ("LAMBDA") ("MU")))
   ("cgResizeImage" fun nil (lib "cgresizeimage.pro" nil "coyote") "Result = %s(image, cols, rows)" (nil ("INTERPOLATE") ("MINUS_ONE")))
   ("cgResizeRaster" pro nil (lib "cgresizeraster.pro" nil "coyote") "%s, rasterfile, percentage" (nil ("HEIGHT") ("KEEP_ORIGINAL") ("SILENT") ("WIDTH")))
   ("cgReverseIndices" fun nil (lib "cgreverseindices.pro" nil "coyote") "Result = %s(ri, index)" (nil ("COUNT")))
   ("cgRootName" fun nil (lib "cgrootname.pro" nil "coyote") "Result = %s(filename)" (nil ("Directory") ("Extension") ("Path_Separator")))
   ("cgScaleVector" fun nil (lib "cgscalevector.pro" nil "coyote") "Result = %s(vector, minRange, maxRange)" (nil ("DOUBLE") ("MAXVALUE") ("MINVALUE") ("NAN") ("PRESERVE_TYPE")))
   ("cgScatter2D" pro nil (lib "cgscatter2d.pro" nil "coyote") "%s, x, y" (nil ("_REF_EXTRA") ("AddCmd") ("Aspect") ("AxesColor") ("AxisColor") ("Background") ("Charsize") ("Coefficient") ("Color") ("FCharsize") ("FColor") ("FillColor") ("Fit") ("Font") ("FThick") ("GColor") ("GLinestyle") ("Grid") ("Isotropic") ("Layout") ("NoDisplay") ("NoErase") ("OutFilename") ("Output") ("Overplot") ("Params") ("Position") ("PSym") ("SymSize") ("Title") ("Traditional") ("Window") ("XRange") ("XStyle") ("XTickLen") ("XTitle") ("YRange") ("YStyle") ("YTicklen") ("YTitle")))
   ("cgSet" pro nil (lib "cgset.pro" nil "coyote") "%s, selection" (nil ("DISPLAY") ("OBJECT") ("TITLE") ("WIDGETID")))
   ("cgSetColorState" pro nil (lib "cgsetcolorstate.pro" nil "coyote") "%s, state" (nil ("CURRENTSTATE") ("DEPTH") ("ZDEPTH")))
   ("cgSetDifference" fun nil (lib "cgsetdifference.pro" nil "coyote") "Result = %s(set_a, set_b)" (nil ("COUNT") ("NORESULT") ("POSITIONS") ("SUCCESS")))
   ("cgSetIntersection" fun nil (lib "cgsetintersection.pro" nil "coyote") "Result = %s(set_a, set_b)" (nil ("COUNT") ("INDICES_A") ("INDICES_B") ("NORESULT") ("POSITIONS") ("SUCCESS")))
   ("cgSetUnion" fun nil (lib "cgsetunion.pro" nil "coyote") "Result = %s(set_a, set_b)" (nil))
   ("cgSet_TTFont" pro nil (lib "cgset_ttfont.pro" nil "coyote") "%s, font_name" (nil ("ADDCMD")))
   ("cgShade_Surf" pro nil (lib "cgshade_surf.pro" nil "coyote") "%s, data, x, y" (nil ("_Ref_Extra") ("ADDCMD") ("AXESCOLOR") ("AXISCOLOR") ("BACKGROUND") ("BOTTOM") ("CHARSIZE") ("COLOR") ("ELEVATION_SHADING") ("FONT") ("LAYOUT") ("NOERASE") ("OUTFILENAME") ("OUTPUT") ("PALETTE") ("ROTX") ("ROTZ") ("SHADED") ("SHADES") ("SKIRT") ("TITLE") ("TRADITIONAL") ("TSIZE") ("TSPACE") ("WINDOW") ("XSTYLE") ("XTITLE") ("YSTYLE") ("YTITLE") ("ZSTYLE") ("ZTITLE")))
   ("cgShapeInfo_Events" pro nil (lib "cgshapeinfo.pro" nil "coyote") "%s, event" (nil))
   ("cgShapeInfo_Cleanup" pro nil (lib "cgshapeinfo.pro" nil "coyote") "%s, tlb" (nil))
   ("cgShapeInfo" pro nil (lib "cgshapeinfo.pro" nil "coyote") "%s, filename" (nil ("XRANGE") ("YRANGE")))
   ("cgShapePointFile" pro nil (lib "cgshapepointfile.pro" nil "coyote") "%s, xpts, ypts" (nil ("APPEND") ("ATTRIBUTES") ("FILENAME") ("MAPCOORD")))
   ("cgShapeRange" fun nil (lib "cgshaperange.pro" nil "coyote") "Result = %s(shapefile)" (nil ("MEAN") ("MEDIAN") ("XRANGE") ("YRANGE")))
   ("cgShow" pro nil (lib "cgshow.pro" nil "coyote") "%s, selection" (nil ("OBJECT") ("TITLE") ("WIDGETID")))
   ("cgSnake" fun nil (lib "cgsnake.pro" nil "coyote") "Result = %s(image, x_init, y_init)" (nil ("ALPHA") ("BETA") ("BLUR") ("DELTA_MAX") ("DELTA_MIN") ("DISPLAY_IMAGE") ("GAMMA") ("GRADIENTSCALE") ("GVF_ITERATIONS") ("ITERATIONS") ("KAPPA") ("MAX_VALUE") ("MIN_VALUE") ("MU") ("PARAMETERFILE") ("SIGMA") ("SPATIAL_SCALE")))
   ("cgSnapshot" fun nil (lib "cgsnapshot.pro" nil "coyote") "Result = %s(xstart, ystart, ncols, nrows)" (nil ("_Ref_Extra") ("BMP") ("Cancel") ("Colors") ("Cube") ("Dither") ("Filename") ("GIF") ("JPEG") ("NoDialog") ("Order") ("Overwrite_Prompt") ("PICT") ("PNG") ("POSITION") ("Quality") ("TIFF") ("True") ("Type") ("WID")))
   ("cgSourceDir" fun nil (lib "cgsourcedir.pro" nil "coyote") "Result = %s" (nil ("NoMark") ("OneUp") ("TwoUp")))
   ("cgSTRETCH_VALIDATE_THRESHOLD" fun nil (lib "cgstretch.pro" nil "coyote") "Result = %s(threshold, info)" (nil))
   ("cgSTRETCH_SCALEIMAGE" fun nil (lib "cgstretch.pro" nil "coyote") "Result = %s(info)" (nil))
   ("cgSTRETCH_IMAGEWINDOWKILLED" pro nil (lib "cgstretch.pro" nil "coyote") "%s, imageWindowID" (nil))
   ("cgSTRETCH_SAVETOMAIN" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_DRAWLINES" pro nil (lib "cgstretch.pro" nil "coyote") "%s, minThresh, maxThresh, info" (nil))
   ("cgSTRETCH_NOTIFYOTHERS" pro nil (lib "cgstretch.pro" nil "coyote") "%s, info" (nil))
   ("cgSTRETCH_HISTOPLOT" pro nil (lib "cgstretch.pro" nil "coyote") "%s, info" (nil ("MAXVALUE") ("WID")))
   ("cgSTRETCH_PARAMETERS" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_FLIPIMAGE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_GAMMA" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_NEGATIVE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_OPENIMAGE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_SAVEAS" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_SAVEHISTOAS" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_SETTHRESHOLD" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_PRINT" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_PROCESS_EVENTS" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_MOVELINE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_RESTORE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_STRETCHTYPE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_QUIT" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_COLORS" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_MAXVALUE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_IMAGE_RESIZE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_HISTOGRAM_RESIZE" pro nil (lib "cgstretch.pro" nil "coyote") "%s, event" (nil))
   ("cgSTRETCH_CLEANUP" pro nil (lib "cgstretch.pro" nil "coyote") "%s, tlb" (nil))
   ("cgSTRETCH" pro nil (lib "cgstretch.pro" nil "coyote") "%s, theImage" (nil ("_EXTRA") ("Beta") ("Block") ("Brewer") ("Colors") ("Colortable") ("Exclude") ("Exponent") ("Filename") ("Gamma") ("Group_Leader") ("Max_Value") ("MaxThresh") ("Mean") ("MinThresh") ("Multiplier") ("Negative") ("No_Window") ("Notify_Obj") ("Notify_Pro") ("Sigma") ("Title") ("Type") ("UValue") ("XPos") ("YPos")))
   ("cgSurf" pro nil (lib "cgsurf.pro" nil "coyote") "%s, data, x, y" (nil ("_Ref_Extra") ("ADDCMD") ("AXESCOLOR") ("AXISCOLOR") ("BACKGROUND") ("BOTTOM") ("CHARSIZE") ("COLOR") ("ELEVATION_SHADING") ("FONT") ("LAYOUT") ("NOERASE") ("OUTFILENAME") ("OUTPUT") ("PALETTE") ("ROTX") ("ROTZ") ("SHADED") ("SHADES") ("SKIRT") ("TITLE") ("TLOCATION") ("TRADITIONAL") ("TSIZE") ("TSPACE") ("WINDOW") ("XSTYLE") ("XTITLE") ("YSTYLE") ("YTITLE") ("ZSTYLE") ("ZTITLE")))
   ("CW_Light_Control_Intensity_Events" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("CW_Light_Control_Events" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("CW_Light_Control" fun nil (lib "cgsurface.pro" nil "coyote") "Result = %s(parent, theLight)" (nil ("Color") ("Event_Pro") ("Index") ("LabelSize") ("Name") ("SetColor_Name") ("UValue")))
   ("cgSurface_Light_Done" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Light_Controls_Event" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Light_Controls" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Axes_OnOff" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Bottom_OnOff" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Change_Colors" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Draw_Events" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Elevation_Colors" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Elevation_Shading" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Exit" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Move_Surface" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Move_Title" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Output" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Properties" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Resize" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Skirt_OnOff" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Style" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Cleanup" pro nil (lib "cgsurface.pro" nil "coyote") "%s, tlb" (nil))
   ("cgSurface_Aspect" fun nil (lib "cgsurface.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("cgSurface" pro nil (lib "cgsurface.pro" nil "coyote") "%s, data, x, y" (nil ("_Extra") ("Axiscolor") ("Background") ("Block") ("Bottom") ("Brewer") ("Charsize") ("Color") ("Constrain_Aspect") ("CTable") ("Elevation_Shading") ("Font") ("Group_Leader") ("Hidden_Lines") ("Palette") ("Reverse") ("Shaded") ("Skirt") ("Style") ("TCharsize") ("TColor") ("Texture_Image") ("Title") ("Transform") ("Vert_Colors") ("XOffset") ("XRange") ("XSize") ("XStyle") ("XTitle") ("YOffset") ("YRange") ("YSize") ("YStyle") ("YTitle") ("ZRange") ("ZScale") ("ZStyle") ("ZTitle")))
   ("cgSymbol_Example" pro nil (lib "cgsymbol.pro" nil "coyote") "%s" (nil ("PS") ("UNICODE")))
   ("cgSymbol" fun nil (lib "cgsymbol.pro" nil "coyote") "Result = %s(symbol)" (nil ("CAPITAL") ("EXAMPLE") ("PS") ("UNICODE")))
   ("cgSymCat" fun nil (lib "cgsymcat.pro" nil "coyote") "Result = %s(theInSymbol)" (nil ("COLOR") ("NAMES") ("THICK")))
   ("cgTasseledCap" fun nil (lib "cgtasseledcap.pro" nil "coyote") "Result = %s(input)" (nil ("DISPLAY") ("ENVI") ("ETM") ("IMAGINE") ("LS4") ("LS5") ("MSS") ("QUICKBIRD") ("TM")))
   ("cgTasseledCapCoeffs" fun nil (lib "cgtasseledcapcoeffs.pro" nil "coyote") "Result = %s" (nil ("ENVI") ("ETM") ("IMAGINE") ("LS4") ("LS5") ("MSS") ("QUICKBIRD") ("TM")))
   ("cgTaylorDiagram" pro nil (lib "cgtaylordiagram.pro" nil "coyote") "%s, stddev, correlation" (nil ("ADDCMD") ("C_CORRELATION") ("C_REF") ("C_STDDEV") ("C_SYMBOL") ("LABELS") ("NOERASE") ("OUTPUT") ("OVERPLOT") ("POSITION") ("REF_STDDEV") ("RMS_CIRCLES_OFF") ("RMS_FORMAT") ("RMS_INCREMENT") ("RMS_LABELS_OFF") ("STDDEV_MAX") ("SYMBOL") ("SYMSIZE") ("WINDOW")))
   ("cgText" pro nil (lib "cgtext.pro" nil "coyote") "%s, xloc, yloc, text" (nil ("_REF_EXTRA") ("ADDCMD") ("ALIGNMENT") ("CHARSIZE") ("COLOR") ("DATA") ("DEVICE") ("FONT") ("MAP_OBJECT") ("NORMAL") ("ORIENTATION") ("OUTLOC") ("PLACE") ("TT_FONT") ("WIDTH") ("WINDOW")))
   ("cgTimeStamp" fun nil (lib "cgtimestamp.pro" nil "coyote") "Result = %s(format)" (nil ("No_Prefix") ("Random_Digits") ("UTC") ("Valid")))
   ("cgTransparentImage" fun nil (lib "cgtransparentimage.pro" nil "coyote") "Result = %s(image)" (nil ("BREWER") ("CTINDEX") ("FILENAME") ("MISSING_VALUE") ("NOGUI") ("PALETTE") ("PNGFILE") ("REVERSE") ("TRANSPARENT") ("WSET")))
   ("cgUTMZone" fun nil (lib "cgutmzone.pro" nil "coyote") "Result = %s(longitude, latitude)" (nil ("FORMAL")))
   ("cgWarpToMap" fun nil (lib "cgwarptomap.pro" nil "coyote") "Result = %s(data, lons, lats)" (nil ("CUBIC") ("GRIDDATA") ("MAP") ("MISSING") ("NEAREST_NEIGHBOR") ("RESOLUTION") ("SETRANGE") ("XRANGE") ("YRANGE")))
   ("cgWhoAmI" fun nil (lib "cgwhoami.pro" nil "coyote") "Result = %s" (nil))
   ("cgWhoCalledMe" fun nil (lib "cgwhocalledme.pro" nil "coyote") "Result = %s" (nil))
   ("cgWindow" pro nil (lib "cgwindow.pro" nil "coyote") "%s, command, p1, p2, p3, p4" (nil ("_Extra") ("AddCmd") ("AltPS_Keywords") ("AltPS_Params") ("CmdDelay") ("CmdIndex") ("DeleteCmd") ("ExecuteCmd") ("Group_Leader") ("ListCmd") ("LoadCmd") ("Method") ("ReplaceCmd") ("WAspect") ("WBackground") ("WDestroyObjects") ("WErase") ("WinID") ("WMulti") ("WObject") ("WOXMargin") ("WOYMargin") ("WTitle") ("WXPos") ("WXSize") ("WYPos") ("WYSize")))
   ("cgWindow_GetDefs" pro nil (lib "cgwindow_getdefs.pro" nil "coyote") "%s" (nil ("AdjustSize") ("Aspect") ("Background") ("Delay") ("EraseIt") ("IM_Density") ("IM_Options") ("IM_PNG8") ("IM_Raster") ("IM_Resize") ("IM_TIFF_Depth") ("IM_Transparent") ("IM_Width") ("Multi") ("Palette") ("PDF_Path") ("PDF_Unix_Convert_Cmd") ("PS_CHARSIZE") ("PS_Decomposed") ("PS_Delete") ("PS_Encapsulated") ("PS_FONT") ("PS_Metric") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("Title") ("XOMargin") ("XPos") ("XSize") ("YOMargin") ("YPos") ("YSize")))
   ("cgWindow_SetDefs" pro nil (lib "cgwindow_setdefs.pro" nil "coyote") "%s" (nil ("AdjustSize") ("Aspect") ("Background") ("Delay") ("EraseIt") ("IM_Density") ("IM_Options") ("IM_PNG8") ("IM_Raster") ("IM_Resize") ("IM_TIFF_Depth") ("IM_Transparent") ("IM_Width") ("Multi") ("Palette") ("PDF_Path") ("PDF_Unix_Convert_Cmd") ("PS_CHARSIZE") ("PS_Decomposed") ("PS_Delete") ("PS_Encapsulated") ("PS_FONT") ("PS_Metric") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("Reset") ("Title") ("XOMargin") ("XPos") ("XSize") ("YOMargin") ("YPos") ("YSize")))
   ("cgWindRoseArc" fun nil (lib "cgwindrose.pro" nil "coyote") "Result = %s(xcenter, ycenter, radius, angle1, angle2)" (nil))
   ("cgWindRose_PositiveLabel" fun nil (lib "cgwindrose.pro" nil "coyote") "Result = %s(axis, index, value)" (nil))
   ("cgWindRose_ReadSamFile" pro nil (lib "cgwindrose.pro" nil "coyote") "%s, filename" (nil ("DIRECTION") ("SPEED")))
   ("cgWindRose" pro nil (lib "cgwindrose.pro" nil "coyote") "%s, speed, direction" (nil ("CALMSFREQ") ("SAMFILE") ("SPEEDBINSIZE") ("TITLE")))
   ("cgZImage_ZoomWindow_Events" pro nil (lib "cgzimage.pro" nil "coyote") "%s, event" (nil))
   ("cgZImage_ZoomDied" pro nil (lib "cgzimage.pro" nil "coyote") "%s, zoomID" (nil))
   ("cgZImage_BoxColor" pro nil (lib "cgzimage.pro" nil "coyote") "%s, event" (nil))
   ("cgZImage_LoadColors" pro nil (lib "cgzimage.pro" nil "coyote") "%s, event" (nil))
   ("cgZImage_Quit" pro nil (lib "cgzimage.pro" nil "coyote") "%s, event" (nil))
   ("cgZImage_Cleanup" pro nil (lib "cgzimage.pro" nil "coyote") "%s, tlb" (nil))
   ("cgZImage_Factor" pro nil (lib "cgzimage.pro" nil "coyote") "%s, event" (nil))
   ("cgZImage_DrawEvents" pro nil (lib "cgzimage.pro" nil "coyote") "%s, event" (nil))
   ("cgZImage" pro nil (lib "cgzimage.pro" nil "coyote") "%s, image" (nil ("BETA") ("BOTTOM") ("BOXCOLOR") ("CLIP") ("EXCLUDE") ("EXPONENT") ("FILENAME") ("GAMMA") ("GROUP_LEADER") ("INTERPOLATE") ("MAP") ("MAXVALUE") ("MEAN") ("MINVALUE") ("MISSING_COLOR") ("MISSING_INDEX") ("MISSING_VALUE") ("MULTIPLIER") ("NCOLORS") ("NEGATIVE") ("PALETTE") ("SCALE") ("SIGMA") ("STRETCH") ("TITLE") ("TOP") ("ZOOMFACTOR")))
   ("cgZPlot" pro nil (lib "cgzplot.pro" nil "coyote") "%s, x, y" (nil ("_REF_EXTRA") ("LABEL") ("LEGENDS") ("OBJECT") ("OPLOTS") ("PARENT") ("XSIZE") ("YSIZE") ("ZOOMFACTOR")))
   ("INIT" fun "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(x, y)" (nil ("_REF_EXTRA") ("ASPECT") ("DRAWID") ("LABEL") ("LEGENDS") ("MAX_VALUE") ("MIN_VALUE") ("OPLOTS") ("PARENT") ("XLOG") ("XRANGE") ("XSIZE") ("YLOG") ("YNOZERO") ("YRANGE") ("YSIZE") ("ZOOMFACTOR")))
   ("CLEANUP" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("AddLegends" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, legendObject" (nil ("CLEAR") ("DRAW") ("INDEX") ("REPLACE")))
   ("AddOverplots" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, oplotObject" (nil ("CLEAR") ("DRAW") ("INDEX") ("REPLACE")))
   ("AdjustRange" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Button_Events" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("CopyPixmap" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Destroy" pro "cgZplot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Draw" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("DrawPlot" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("OUTPUT")))
   ("Erase" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FileOutput" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("GetProperty" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_REF_EXTRA") ("ASPECT") ("DATA_X") ("DATA_Y") ("LABEL") ("LEGENDS") ("MAX_VALUE") ("MIN_VALUE") ("OPLOTS") ("UNDOLIST") ("XLOG") ("YLOG") ("YNOZERO") ("ZOOMFACTOR")))
   ("InsidePlot" fun "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(x, y)" (nil))
   ("Notify_Realize" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Pan_Events" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ResizeDrawWidget" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, xsize, ysize" (nil ("DRAW")))
   ("SetProperty" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ASPECT") ("DEP") ("DRAW") ("INDEP") ("LABEL") ("LEGENDS") ("MAX_VALUE") ("MIN_VALUE") ("OPLOTS") ("XLOG") ("YLOG") ("YNOZERO") ("ZOOMFACTOR")))
   ("Quit" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Redo" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("TLB_Resize_Events" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Undo" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("UndoList" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Zoom_Events" pro "cgZPlot" (lib "cgzplot__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("cgZPlot_Events" pro nil (lib "cgzplot__define.pro" nil "coyote") "%s, event" (nil))
   ("cgZPlot_Cleanup" pro nil (lib "cgzplot__define.pro" nil "coyote") "%s, tlb" (nil))
   ("cgZPlot_Notify_Realize" pro nil (lib "cgzplot__define.pro" nil "coyote") "%s, id" (nil))
   ("cgZPlot__Define" pro nil (lib "cgzplot__define.pro" nil "coyote") "%s, class" (nil))
   ("Checkerboard" fun nil (lib "checkerboard.pro" nil "coyote") "Result = %s(boxes)" (nil ("BLACK") ("WHITE") ("XSIZE") ("YSIZE")))
   ("CIndex_Colors" pro nil (lib "cindex.pro" nil "coyote") "%s, event" (nil))
   ("CIndex_Event" pro nil (lib "cindex.pro" nil "coyote") "%s, event" (nil))
   ("CIndex" pro nil (lib "cindex.pro" nil "coyote") "%s" (nil ("BREWER") ("NOTIFYID")))
   ("Clipboard" pro nil (lib "clipboard.pro" nil "coyote") "%s, windowIndex" (nil ("_Extra")))
   ("ClipScl" fun nil (lib "clipscl.pro" nil "coyote") "Result = %s(image, clip)" (nil ("NEGATIVE") ("OMAX") ("OMIN") ("THRESHOLD")))
   ("ColorButtonBitmap" fun nil (lib "colorbuttonbitmap.pro" nil "coyote") "Result = %s(theText)" (nil ("BGColor") ("FGColor")))
   ("ColorsAreIdentical" fun nil (lib "colorsareidentical.pro" nil "coyote") "Result = %s(color_1, color_2)" (nil))
   ("Clamp" pro "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Obj ->[%s::]%s, datarange" (nil))
   ("INIT" fun "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("NColors") ("Palette") ("Position") ("Range") ("Title")))
   ("Cleanup" pro "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Ref_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Text") ("Title") ("Transform")))
   ("SetProperty" pro "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Title") ("Transform")))
   ("ContrastZoom_VColorBar__Define" pro nil (lib "contrastzoom.pro" nil "coyote") "%s" (nil))
   ("ContrastZoom_Aspect" fun nil (lib "contrastzoom.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("ContrastZoom_Resize" pro nil (lib "contrastzoom.pro" nil "coyote") "%s, event" (nil))
   ("ContrastZoom_DistinguishEvents" pro nil (lib "contrastzoom.pro" nil "coyote") "%s, event" (nil))
   ("ContrastZoom_Cleanup" pro nil (lib "contrastzoom.pro" nil "coyote") "%s, tlb" (nil))
   ("ContrastZoom" pro nil (lib "contrastzoom.pro" nil "coyote") "%s, image" (nil ("Colortable") ("Group_Leader")))
   ("Convert_To_Type" fun nil (lib "convert_to_type.pro" nil "coyote") "Result = %s(input, theType)" (nil ("CEILING") ("FLOOR") ("ROUND")))
   ("CW_Drawcolor_FindTLB" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(startID)" (nil))
   ("GetTLB" fun "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Realize" pro "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CW_DrawColor_Realize" pro nil (lib "cw_drawcolor.pro" nil "coyote") "%s, drawID" (nil))
   ("CW_DrawColor_Pickcolor" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(event)" (nil))
   ("Pickcolor" fun "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("CW_DrawColor_Set_Value" pro nil (lib "cw_drawcolor.pro" nil "coyote") "%s, id, newcolor" (nil))
   ("Set_Value" pro "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Obj ->[%s::]%s, newcolor" (nil))
   ("CW_DrawColor_Get_Value" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(id)" (nil))
   ("Get_Value" fun "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Init" fun "CW_DRAWCOLOR" (lib "cw_drawcolor.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("Color") ("Column") ("Event_Func") ("Event_Pro") ("Filename") ("Index") ("Label_Left") ("Label_Right") ("LabelSize") ("LabelText") ("Title") ("UValue") ("XSize") ("YSize")))
   ("CW_DRAWCOLOR_Kill_Notify" pro nil (lib "cw_drawcolor.pro" nil "coyote") "%s, drawID" (nil))
   ("Cleanup" pro "CW_DRAWCOLOR" (lib "cw_drawcolor.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CW_DRAWCOLOR__DEFINE" pro nil (lib "cw_drawcolor.pro" nil "coyote") "%s" (nil))
   ("CW_DRAWCOLOR" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(parent)" (nil ("Color") ("Column") ("Event_Func") ("Event_Pro") ("Filename") ("Index") ("Label_Left") ("Label_Right") ("LabelSize") ("LabelText") ("Object") ("Title") ("UValue") ("XSize") ("YSize")))
   ("CW_Spacer" fun nil (lib "cw_spacer.pro" nil "coyote") "Result = %s(parent, spacer)" (nil))
   ("DirPath" fun nil (lib "dirpath.pro" nil "coyote") "Result = %s(subdirectory)" (nil ("RootDirectory")))
   ("AddError" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s, theText" (nil))
   ("AddText" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s, theText" (nil ("ADD_CALLER") ("PRINT")))
   ("ClearLog" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Flush" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CloseFile" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetFileName" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Status" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("SetStatus" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s, status" (nil))
   ("OpenFile" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(newLogFilename)" (nil ("DELETE_CURRENT_FILE")))
   ("LastMessage" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("PrintLastMessage" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("ALERT") ("DELETE_ON_DESTROY") ("FILENAME") ("LAST_MESSAGE") ("LUN") ("NOCLUTTER") ("NOTRACEBACK") ("STATUS")))
   ("SetProperty" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("ALERT") ("DELETE_ON_DESTROY") ("NOCLUTTER") ("NOTRACEBACK") ("STATUS")))
   ("CLEANUP" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename)" (nil ("ALERT") ("DELETE_ON_DESTROY") ("IMMEDIATE") ("NOCLUTTER") ("NOTRACEBACK") ("TIMESTAMP")))
   ("ErrorLogger__Define" pro nil (lib "errorlogger__define.pro" nil "coyote") "%s, class" (nil))
   ("Find_Boundary_Outline" fun nil (lib "find_boundary.pro" nil "coyote") "Result = %s(mask, darray, boundaryPts, ptIndex, xsize, ysize, from_direction)" (nil))
   ("Find_Boundary" fun nil (lib "find_boundary.pro" nil "coyote") "Result = %s(indices)" (nil ("AREA") ("CENTER") ("PERIM_AREA") ("PERIMETER") ("SCALE") ("XSIZE") ("YSIZE")))
   ("Fit_Ellipse" fun nil (lib "fit_ellipse.pro" nil "coyote") "Result = %s(indices)" (nil ("AXES") ("CENTER") ("NPOINTS") ("ORIENTATION") ("SCALE") ("SEMIAXES") ("XSIZE") ("YSIZE")))
   ("map_grid_check_range" fun nil (lib "fixed_map_grid.pro" nil "coyote") "Result = %s(xy)" (nil))
   ("fixed_map_grid_incr" fun nil (lib "fixed_map_grid.pro" nil "coyote") "Result = %s(span)" (nil))
   ("fixed_map_grid_SOLVE" fun nil (lib "fixed_map_grid.pro" nil "coyote") "Result = %s(c0, c1, Icoord, Gwant)" (nil ("MAP_STRUCTURE") ("RECURSIVE")))
   ("fixed_map_grid" pro nil (lib "fixed_map_grid.pro" nil "coyote") "%s" (nil ("_EXTRA") ("BOX_AXES") ("CHARSIZE") ("CLIP_TEXT") ("COLOR") ("FILL_HORIZON") ("FORMAT") ("GLINESTYLE") ("GLINETHICK") ("HORIZON") ("INCREMENT") ("LABEL") ("LATALIGN") ("LATDEL") ("LATLAB") ("LATNAMES") ("LATS") ("LONALIGN") ("LONDEL") ("LONLAB") ("LONNAMES") ("LONS") ("MAP_STRUCTURE") ("NO_GRID") ("ORIENTATION") ("T3D") ("WHOLE_MAP") ("ZVALUE")))
   ("FLOATS_EQUAL" fun nil (lib "floats_equal.pro" nil "coyote") "Result = %s(array_1, array_2)" (nil ("ULP")))
   ("FPUFIX" fun nil (lib "fpufix.pro" nil "coyote") "Result = %s(data)" (nil))
   ("FSCCleanUp7" pro nil (lib "fsccleanup7.pro" nil "coyote") "%s" (nil ("ALL") ("CG") ("DG")))
   ("FSCCleanUp8" pro nil (lib "fsccleanup8.pro" nil "coyote") "%s" (nil ("ALL") ("CG") ("DG") ("FG")))
   ("Clamp" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s, datarange" (nil ("Draw")))
   ("GetProperty" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Background") ("Bottom") ("Charsize") ("Color") ("Font") ("Format") ("Index") ("Major") ("Minor") ("MinusOne") ("NColors") ("Neighbor") ("Position") ("Range") ("TickLen") ("TickV") ("Title") ("Vertical") ("XEraseBox") ("YEraseBox")))
   ("SetProperty" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Background") ("Bottom") ("Charsize") ("Color") ("Draw") ("Erase") ("Font") ("Format") ("Horizontal") ("Index") ("Major") ("Minor") ("MinusOne") ("NColors") ("Neighbor") ("Position") ("Range") ("TickLen") ("TickV") ("Title") ("Vertical") ("XEraseBox") ("YEraseBox")))
   ("LoadCT" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s, index" (nil ("Draw") ("Erase")))
   ("Erase" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Draw" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Erase")))
   ("CleanUp" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Init" fun "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("Background") ("Bottom") ("Charsize") ("Color") ("Font") ("Format") ("Index") ("Major") ("Minor") ("MinusOne") ("NColors") ("Neighbor") ("Position") ("Range") ("TickLen") ("TickV") ("Title") ("Vertical") ("XEraseBox") ("YEraseBox")))
   ("FSC_Colorbar__Define" pro nil (lib "fsc_colorbar__define.pro" nil "coyote") "%s" (nil))
   ("FSC_COLORSELECT_WidgetFont" fun nil (lib "fsc_colorselect.pro" nil "coyote") "Result = %s" (nil ("DEFAULT")))
   ("GetTextID" fun "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Resize" pro "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s, newsize" (nil))
   ("GetID" fun "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetLabelSize" fun "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetTextSize" fun "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Geometry" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Color" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Color_Index" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("BREWER")))
   ("Set_Color" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s, color" (nil))
   ("Set_Color_Index" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s, colorIndex" (nil ("BREWER") ("TABLENAME")))
   ("FSC_ColorSelect_Event__Define" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s" (nil))
   ("PickColorEvents" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("FSC_ColorSelect_Event_Handler" fun nil (lib "fsc_colorselect.pro" nil "coyote") "Result = %s(event)" (nil))
   ("GetProperty" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("BREWER") ("COLOR") ("CT_INDEX") ("EVENT_FUNC") ("EVENT_PRO") ("ID") ("NAME") ("TEXTID") ("UVALUE")))
   ("SetProperty" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("BREWER") ("COLOR") ("CT_INDEX") ("EVENT_FUNC") ("EVENT_PRO") ("LABELSIZE") ("NAME") ("SCR_XSIZE") ("SCR_YSIZE") ("SENSITIVE") ("STYLE") ("TITLE") ("UVALUE") ("XSIZE")))
   ("INIT" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("Brewer") ("Button_Text") ("CFont") ("Color") ("CT_Index") ("CT_NColors") ("Event_Func") ("Event_Pro") ("Frame") ("LabelAlign") ("LabelFont") ("LabelSize") ("Name") ("Scr_XSize") ("Scr_YSize") ("Style") ("Title") ("UValue") ("XSize")))
   ("FSC_ColorSelect_Kill_Notify" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s, textID" (nil))
   ("CLEANUP" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_ColorSelect__Define" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s" (nil))
   ("FSC_ColorSelect" fun nil (lib "fsc_colorselect.pro" nil "coyote") "Result = %s(parent)" (nil ("_Extra") ("Brewer") ("Button_Text") ("CFont") ("Color") ("CT_Index") ("CT_NColors") ("Event_Func") ("Event_Pro") ("Frame") ("LabelAlign") ("LabelFont") ("LabelSize") ("Name") ("Scr_XSize") ("Scr_YSize") ("Style") ("Title") ("UValue") ("XSize")))
   ("Example_Event" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s" (nil))
   ("FSC_Droplist_Kill_Notify" pro nil (lib "fsc_droplist.pro" nil "coyote") "%s, droplistID" (nil))
   ("EventHandler" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("FSC_Droplist_Events" fun nil (lib "fsc_droplist.pro" nil "coyote") "Result = %s(event)" (nil))
   ("Sensitive" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, value" (nil))
   ("Resize" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, newSize" (nil ("ParentSize")))
   ("SetSelection" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, selection" (nil))
   ("SetIndex" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, index" (nil))
   ("SetValues" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, theValues" (nil ("CurrentIndex")))
   ("GetIndex" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetSelection" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetValues" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetUValue" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetID" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("CLEANUP" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("debug") ("Event_Func") ("Event_Pro") ("Format") ("Index") ("Spaces") ("Title") ("UName") ("UValue") ("Value")))
   ("FSC_Droplist__DEFINE" pro nil (lib "fsc_droplist.pro" nil "coyote") "%s" (nil))
   ("FSC_Droplist" fun nil (lib "fsc_droplist.pro" nil "coyote") "Result = %s(parent)" (nil ("_Extra") ("Title") ("Value")))
   ("Example_Events" pro nil (lib "fsc_droplist.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_droplist.pro" nil "coyote") "%s" (nil))
   ("FSC_Field_WidgetFont" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s" (nil ("DEFAULT")))
   ("GetLabelSize" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetTextSize" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("MoveTab" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetTabNext" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, nextID" (nil))
   ("GetTextID" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Resize" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, newsize" (nil))
   ("GetID" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Geometry" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Value" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Set_Value" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, value" (nil))
   ("Validate" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s(value)" (nil))
   ("ReturnValue" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s(inputValue)" (nil))
   ("TextEvents" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("GetProperty" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CR_Only") ("DataType") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("Focus_Events") ("Has_Focus") ("Highlight") ("Name") ("NoEdit") ("NonSensitive") ("Undefined") ("UValue") ("Value")))
   ("SetProperty" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CR_Only") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("Focus_Events") ("Highlight") ("LabelSize") ("Name") ("NoEdit") ("NonSensitive") ("Scr_XSize") ("Scr_YSize") ("Title") ("Undefined") ("UValue") ("Value") ("XSize")))
   ("SetEdit" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, editvalue" (nil))
   ("SetSensitive" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, value" (nil))
   ("INIT" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("Column") ("CR_Only") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("FieldFont") ("Focus_Events") ("Frame") ("Highlight") ("Label_Left") ("Label_Right") ("LabelFont") ("LabelSize") ("Name") ("NoEdit") ("NonSensitive") ("Positive") ("Scr_XSize") ("Scr_YSize") ("Title") ("Undefined") ("UValue") ("Value") ("XSize")))
   ("CLEANUP" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_Field_Event_Handler" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s(event)" (nil))
   ("FSC_Field_Event__Define" pro nil (lib "fsc_field.pro" nil "coyote") "%s" (nil))
   ("FSC_Field_Set_Compound_Widget_Value" pro nil (lib "fsc_field.pro" nil "coyote") "%s, tlb, value" (nil))
   ("FSC_Field_Get_Compound_Widget_Value" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s(tlb)" (nil))
   ("FSC_Field_Kill_Notify" pro nil (lib "fsc_field.pro" nil "coyote") "%s, textID" (nil))
   ("FSC_Field__Define" pro nil (lib "fsc_field.pro" nil "coyote") "%s" (nil))
   ("FSC_FIELD" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s(parent)" (nil ("_Extra") ("Column") ("CR_Only") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("FieldFont") ("Focus_Events") ("Frame") ("Highlight") ("Label_Left") ("Label_Right") ("LabelFont") ("LabelSize") ("Name") ("NoEdit") ("NonSensitive") ("Object") ("Positive") ("Scr_XSize") ("Scr_YSize") ("Title") ("Undefined") ("UValue") ("Value") ("XSize")))
   ("Example_Event" pro nil (lib "fsc_field.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_field.pro" nil "coyote") "%s, field1, field2, field3" (nil))
   ("FSC_Fileselect_WidgetFont" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s" (nil ("DEFAULT")))
   ("Directory_Events" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Filename_Events" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("GetFilename" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetNoMaxSize" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DirectoryName") ("Event_Func") ("Event_Pro") ("Filename") ("Filter") ("LabelName") ("LabelSize") ("MustExist") ("Parent") ("Read") ("SelectTitle") ("TLB") ("UValue") ("Write") ("XSize")))
   ("GetTLB" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Inspect_DirectoryName" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(dirname, textSelection)" (nil))
   ("Inspect_Filename" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename, textSelection)" (nil))
   ("LabelSize" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("MatchSize" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_FileSelect_RStrPos" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s(Expr, SubStr, Pos)" (nil))
   ("Select_File" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SetFilename" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, theName" (nil))
   ("SetProperty" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DirectoryName") ("Event_Func") ("Event_Pro") ("Filename") ("Filter") ("LabelName") ("LabelSize") ("MustExist") ("Read") ("SelectTitle") ("UValue") ("Write") ("XSize")))
   ("TextSelect" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, selection" (nil))
   ("CLEANUP" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("DirectoryName") ("Event_Func") ("Event_Pro") ("Filename") ("Filter") ("Frame") ("LabelFont") ("LabelName") ("LabelSize") ("MustExist") ("NoMaxSize") ("Read") ("Scr_XSize") ("Selectdir") ("SelectFont") ("SelectTitle") ("TextFont") ("UValue") ("Write") ("XSize")))
   ("FSC_FileSelect__Define" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s" (nil))
   ("FSC_FileSelect_Set_Value" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, id, filename" (nil))
   ("FSC_FileSelect_Get_Value" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s(id)" (nil))
   ("CW_FileSelect__Define" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s" (nil))
   ("FSC_FileSelect_Event_Handler" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s(event)" (nil))
   ("FSC_FileSelect_Notify_Realize" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, labelID" (nil))
   ("FSC_FileSelect_Kill_Notify" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, labelID" (nil))
   ("FSC_FileSelect" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s(parent)" (nil ("DirectoryName") ("Event_Func") ("Event_Pro") ("Filename") ("Filter") ("Frame") ("LabelFont") ("LabelName") ("LabelSize") ("MustExist") ("NoMaxSize") ("ObjectRef") ("Read") ("SelectDirectory") ("SelectFont") ("SelectTitle") ("TextFont") ("UValue") ("Write") ("XSize")))
   ("Example_Set_Size" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Set_Filter" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Set_Filename" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Shrink" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Print_Filename" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Quit" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, theObject" (nil))
   ("FSC_InputField_WidgetFont" fun nil (lib "fsc_inputfield.pro" nil "coyote") "Result = %s" (nil ("DEFAULT")))
   ("MoveTab" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetTabNext" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s, nextID" (nil))
   ("GetTextID" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Resize" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s, newsize" (nil))
   ("GetID" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetLabelSize" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetTextSize" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Geometry" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Value" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Set_Value" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s, value" (nil ("DoubleValue") ("FloatValue") ("IntegerValue") ("LongValue") ("StringValue")))
   ("Validate" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s(value)" (nil))
   ("FSC_InputField_Event__Define" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s" (nil))
   ("ReturnValue" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s(inputValue)" (nil))
   ("TextEvents" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("FSC_InputField_Event_Handler" fun nil (lib "fsc_inputfield.pro" nil "coyote") "Result = %s(event)" (nil))
   ("GetProperty" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CR_Only") ("DataType") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("Focus_Events") ("Name") ("Positive") ("UValue") ("Value")))
   ("SetProperty" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CR_Only") ("Decimal") ("Digits") ("DoubleValue") ("Event_Func") ("Event_Pro") ("FloatValue") ("Focus_Events") ("IntegerValue") ("LabelSize") ("LongValue") ("Name") ("Positive") ("Scr_XSize") ("Scr_YSize") ("Sensitive") ("StringValue") ("Title") ("UValue") ("Value") ("XSize")))
   ("INIT" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("Column") ("CR_Only") ("Decimal") ("Digits") ("DoubleValue") ("Event_Func") ("Event_Pro") ("FieldFont") ("FloatValue") ("Focus_Events") ("Frame") ("IntegerValue") ("LabelAlign") ("LabelFont") ("LabelSize") ("LongValue") ("Name") ("Positive") ("Row") ("Scr_XSize") ("Scr_YSize") ("StringValue") ("Title") ("UValue") ("Value") ("XSize")))
   ("FSC_InputField_Kill_Notify" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s, textID" (nil))
   ("CLEANUP" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_InputField__Define" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s" (nil))
   ("FSC_INPUTFIELD" fun nil (lib "fsc_inputfield.pro" nil "coyote") "Result = %s(parent)" (nil ("_Extra") ("Column") ("CR_Only") ("Decimal") ("Digits") ("DoubleValue") ("Event_Func") ("Event_Pro") ("FieldFont") ("FloatValue") ("Focus_Events") ("Frame") ("IntegerValue") ("LabelAlign") ("LabelFont") ("LabelSize") ("LongValue") ("Name") ("Positive") ("Row") ("Scr_XSize") ("Scr_YSize") ("StringValue") ("Title") ("UValue") ("Value") ("XSize")))
   ("Example_Event" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s" (nil))
   ("FSC_PLOTWINDOW_Normalize" fun nil (lib "fsc_plotwindow.pro" nil "coyote") "Result = %s(range)" (nil ("Position")))
   ("Refresh" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetWindowColor" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, theColor" (nil))
   ("GetUValue" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("SetColor" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, on_off" (nil))
   ("SetUnits" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, units" (nil))
   ("GetWindowLocation" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, xsize, ysize, xoffset, yoffset" (nil))
   ("SetWindowLocation" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, xsize, ysize, xoffset, yoffset" (nil))
   ("SetWindowSize" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, position" (nil))
   ("SetPageSize" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, pagesize" (nil ("Landscape") ("TLB")))
   ("GetPagePixels" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(pagesize)" (nil ("Landscape")))
   ("GetPosition" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Resize" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, event, direction" (nil))
   ("CenterPlot" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("MovePlot" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("WhichButtonReleased" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("WhichButtonPressed" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("InTarget" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(x, y)" (nil ("DIRECTION")))
   ("Realize" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_PLOTWINDOW_Notify_Realize" pro nil (lib "fsc_plotwindow.pro" nil "coyote") "%s, drawID" (nil))
   ("Process_Events" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("FSC_PLOTWINDOW_Events" pro nil (lib "fsc_plotwindow.pro" nil "coyote") "%s, event" (nil))
   ("FSC_PLOTWINDOW_Kill_Notify" pro nil (lib "fsc_plotwindow.pro" nil "coyote") "%s, drawID" (nil))
   ("CLEANUP" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("Color") ("Debug") ("Event_Pro") ("Landscape") ("PageSize") ("Units") ("UValue") ("WindowColor") ("WindowSize")))
   ("FSC_PLOTWINDOW__DEFINE" pro nil (lib "fsc_plotwindow.pro" nil "coyote") "%s" (nil))
   ("FSC_PLOTWINDOW" fun nil (lib "fsc_plotwindow.pro" nil "coyote") "Result = %s(parent)" (nil ("Color") ("Event_Pro") ("Landscape") ("PageSize") ("Units") ("UValue") ("WindowSize")))
   ("FSC_PSCONFIG_RStrPos" fun nil (lib "fsc_psconfig__define.pro" nil "coyote") "Result = %s(Expr, SubStr, Pos)" (nil))
   ("FSC_PSCONFIG_Events" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s, event" (nil))
   ("FSC_PSCONFIG_Normalize" fun nil (lib "fsc_psconfig__define.pro" nil "coyote") "Result = %s(range)" (nil ("Position")))
   ("FSC_PSCONFIG_Help_Event" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s, event" (nil))
   ("FSC_PSCONFIG_Restore_Device" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s, id" (nil))
   ("Accept" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Cancel" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ClearStyles" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Color" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("CMYK" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Construct_Full_Filename" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("DefaultList" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Defaults" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Encapsulate" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("FontType" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("MetricStyle" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("GetKeywords" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("FontType")))
   ("GetName" fun "FSC_PSConfig" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "FSC_PSConfig" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Name")))
   ("GetSizes" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GUI" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Accept_Button_Name") ("Cancel") ("FontInfo") ("FontType") ("Group_Leader") ("NoBlock")))
   ("GUIFont" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Accept_Button_Name") ("Cancel") ("FontType") ("Group_Leader") ("NoBlock") ("NoFont")))
   ("Help" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("PageDimensions" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Orientation" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("PageSize" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("PlotWindow" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Revert" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SaveConfiguration" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetDefault" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, defaultname" (nil))
   ("StatusLight" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, safe" (nil))
   ("StyleButtons" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Units" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("UpdateDisplay" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("UpdateFontStyle" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Clear")))
   ("UpdateSizes" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, xsize, ysize, xoffset, yoffset" (nil))
   ("WindowSize" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SetProperty" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("AvantGarde") ("Bits_per_Pixel") ("Bkman") ("Bold") ("BookStyle") ("CMYK") ("Color") ("Courier") ("DefaultSetup") ("Demi") ("Directory") ("Encapsulated") ("Filename") ("FontSize") ("FontType") ("Helvetica") ("Inches") ("Isolatin") ("Italic") ("Landscape") ("LanguageLevel") ("Light") ("Medium") ("Metric") ("Name") ("Narrow") ("Oblique") ("Palatino") ("Preview") ("Schoolbook") ("Set_Font") ("Symbol") ("Times") ("TrueType") ("UpDate") ("XSize") ("YOffset") ("YSize") ("ZapfChancery") ("ZapfDingbats")))
   ("CLEANUP" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("AvantGarde") ("Bits_per_Pixel") ("Bkman") ("Bold") ("BookStyle") ("CMYK") ("Color") ("Courier") ("Debug") ("Decomposed") ("Demi") ("Directory") ("Encapsulated") ("Filename") ("FontSize") ("FontType") ("Helvetica") ("Inches") ("Isolatin") ("Italic") ("Landscape") ("LanguageLevel") ("Medium") ("Metric") ("Name") ("Narrow") ("Oblique") ("Palatino") ("Preview") ("Schoolbook") ("Set_Font") ("Symbol") ("Times") ("TrueType") ("XOffset") ("XSize") ("YOffset") ("YSize") ("ZapfChancery") ("ZapfDingbats")))
   ("FSC_PSCONFIG__DEFINE" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s" (nil))
   ("GaussScl" fun nil (lib "gaussscl.pro" nil "coyote") "Result = %s(image)" (nil ("MAX") ("MIN") ("NEGATIVE") ("OMAX") ("OMIN") ("SIGMA")))
   ("GETIMAGE_NULL_EVENTS" pro nil (lib "getimage.pro" nil "coyote") "%s, event" (nil))
   ("GETIMAGE_DIMS_EVENTS" pro nil (lib "getimage.pro" nil "coyote") "%s, event" (nil))
   ("GETIMAGE_XDR_EVENTS" pro nil (lib "getimage.pro" nil "coyote") "%s, event" (nil))
   ("GETIMAGE_FIND_COYOTE" fun nil (lib "getimage.pro" nil "coyote") "Result = %s" (nil))
   ("GETIMAGE_EVENT" pro nil (lib "getimage.pro" nil "coyote") "%s, event" (nil))
   ("GETIMAGE" fun nil (lib "getimage.pro" nil "coyote") "Result = %s(filename)" (nil ("Cancel") ("Catch") ("DataType") ("Dimensions") ("Directory") ("Endian") ("FRAMES") ("Group_Leader") ("HeadData") ("Header") ("Parent") ("XDR") ("XOffSet") ("XSIZE") ("YOffSet") ("YSIZE")))
   ("GetPrimaryScreenSize" fun nil (lib "getprimaryscreensize.pro" nil "coyote") "Result = %s" (nil ("Exclude_Taskbar")))
   ("Get_Object_ID" fun nil (lib "get_object_id.pro" nil "coyote") "Result = %s(theObject)" (nil ("NUMBER")))
   ("GmaScl" fun nil (lib "gmascl.pro" nil "coyote") "Result = %s(image)" (nil ("GAMMA") ("MAX") ("MIN") ("NEGATIVE") ("OMAX") ("OMIN")))
   ("Clamp" pro "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s, datarange" (nil))
   ("INIT" fun "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("FontSize") ("Major") ("Minor") ("Name") ("NColors") ("Palette") ("Position") ("Range") ("Text") ("Title")))
   ("Cleanup" pro "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Ref_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Text") ("Title") ("Transform")))
   ("SetProperty" pro "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Text") ("Title") ("Transform")))
   ("HColorBar__Define" pro nil (lib "hcolorbar__define.pro" nil "coyote") "%s" (nil))
   ("TEST_ISHDF" fun nil (lib "hdfread.pro" nil "coyote") "Result = %s(filename)" (nil))
   ("HDFREAD" pro nil (lib "hdfread.pro" nil "coyote") "%s, filename" (nil))
   ("HDFWRITE" pro nil (lib "hdfwrite.pro" nil "coyote") "%s, filename" (nil))
   ("HELP_VAR_UNDEFINE" pro nil (lib "help_var.pro" nil "coyote") "%s, varname" (nil))
   ("HELP_VAR" pro nil (lib "help_var.pro" nil "coyote") "%s" (nil))
   ("HISTOMATCH" fun nil (lib "histomatch.pro" nil "coyote") "Result = %s(image, histogram_to_match)" (nil))
   ("Example" pro nil (lib "histomatch.pro" nil "coyote") "%s" (nil))
   ("IDL_Object" pro nil (lib "idl_object__define.pro" nil "coyote") "%s" (nil))
   ("IDL_Object" fun nil (lib "idl_object__define.pro" nil "coyote") "Result = %s" (nil))
   ("IDL_Object__Define" pro nil (lib "idl_object__define.pro" nil "coyote") "%s" (nil))
   ("ImageSelect_WindowSize" fun nil (lib "imageselect.pro" nil "coyote") "Result = %s(image)" (nil ("XSIZE") ("YSIZE")))
   ("ImageSelect_Action" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect_BSort" fun nil (lib "imageselect.pro" nil "coyote") "Result = %s(Array, Asort)" (nil ("INFO") ("REVERSE")))
   ("ImageSelect_Cleanup" pro nil (lib "imageselect.pro" nil "coyote") "%s, tlb" (nil))
   ("ImageSelect_FileExtension" fun nil (lib "imageselect.pro" nil "coyote") "Result = %s(filename)" (nil))
   ("ImageSelect_FilenameEvents" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect_FlipImage" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect_ListEvents" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect_ReadFiles" pro nil (lib "imageselect.pro" nil "coyote") "%s, extension, filename, info, fileinfo, image, ok, type" (nil ("_Extra")))
   ("ImageSelect_SetFilter" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect" fun nil (lib "imageselect.pro" nil "coyote") "Result = %s" (nil ("_Extra") ("BMP") ("Cancel") ("Demo") ("Dicom") ("Directory") ("Examples") ("Exclude") ("FHeader") ("FileInfo") ("Filename") ("Filter") ("FITS") ("Flipimage") ("GEOTIFF") ("GIF") ("Group_Leader") ("J2000") ("J2K") ("JPEG") ("LISTXSIZE") ("OFFSETS") ("ONLY2D") ("ONLY3D") ("OutDirectory") ("OutFilename") ("Palette") ("PGM") ("PICT") ("PNG") ("PPM") ("PreviewSize") ("SILENT") ("TIFF") ("TITLE")))
   ("Image_Blend_Output" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Exit" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Foreground_Colors" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Background_Colors" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_CleanUp" pro nil (lib "image_blend.pro" nil "coyote") "%s, id" (nil))
   ("Image_Blend_Slider" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Expose" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Event" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend" pro nil (lib "image_blend.pro" nil "coyote") "%s, backgroundImage, foregroundImage" (nil ("Colortable")))
   ("Image_Dimensions" fun nil (lib "image_dimensions.pro" nil "coyote") "Result = %s(image)" (nil ("AlphaChannel") ("TrueIndex") ("XIndex") ("XSize") ("YIndex") ("YSize")))
   ("Inside" fun nil (lib "inside.pro" nil "coyote") "Result = %s(x, y, xpts, ypts)" (nil ("INDEX")))
   ("JD2Time" fun nil (lib "jd2time.pro" nil "coyote") "Result = %s(jdnumber, jdyear)" (nil ("DAY") ("MONTH") ("YEAR")))
   ("LeftJustify" fun nil (lib "leftjustify.pro" nil "coyote") "Result = %s(theString, theWidth)" (nil))
   ("ADD" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item, index" (nil ("After") ("Before") ("Error") ("No_Copy") ("Replace")))
   ("ADD_AFTER" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item, index" (nil ("ERROR") ("NO_COPY")))
   ("ADD_BEFORE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item, index" (nil ("ERROR") ("NO_COPY")))
   ("ADD_TO_END" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item" (nil ("ERROR") ("NO_COPY")))
   ("DELETE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, index" (nil ("All") ("DESTROY") ("ERROR")))
   ("DELETE_LAST_NODE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DESTROY") ("ERROR")))
   ("DELETE_NODE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, index" (nil ("DESTROY") ("ERROR")))
   ("DELETE_NODES" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DESTROY") ("ERROR")))
   ("GET_COUNT" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GET_ITEM" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(index)" (nil ("ALL") ("Dereference") ("ERROR") ("ItemPtr") ("NO_COPY")))
   ("GET_NODE" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(index)" (nil ("ERROR")))
   ("GET_VALUE" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(index)" (nil ("ERROR") ("NO_COPY")))
   ("HAVE_ITEM" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(index)" (nil ("ERROR")))
   ("HELP" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Print")))
   ("MOVE_NODE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, nodeIndex, location" (nil ("Before") ("Error")))
   ("REPLACE_ITEM" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item, index" (nil ("ERROR") ("NO_COPY")))
   ("CLEANUP" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(item)" (nil))
   ("LINKEDLIST__DEFINE" pro nil (lib "linkedlist__define.pro" nil "coyote") "%s" (nil))
   ("List_Selector_Button_Events" pro nil (lib "list_selector.pro" nil "coyote") "%s, event" (nil))
   ("List_Selector_Click_Events" pro nil (lib "list_selector.pro" nil "coyote") "%s, event" (nil))
   ("List_Selector_Size_Events" pro nil (lib "list_selector.pro" nil "coyote") "%s, event" (nil))
   ("List_Selector_Test" pro nil (lib "list_selector.pro" nil "coyote") "%s" (nil ("LIST_COUNTER") ("MORENAMES") ("SELECTED_INDICES")))
   ("List_Selector" fun nil (lib "list_selector.pro" nil "coyote") "Result = %s(theNames)" (nil ("ALL") ("CANCEL") ("COUNT") ("GROUP_LEADER") ("LABEL") ("LIST_COUNTER") ("NUMCOLS") ("SELECTED_INDICES") ("TITLE")))
   ("LogScl" fun nil (lib "logscl.pro" nil "coyote") "Result = %s(image)" (nil ("EXPONENT") ("MAX") ("MEAN") ("MIN") ("NEGATIVE") ("OMAX") ("OMIN")))
   ("MaxMin" pro nil (lib "maxmin.pro" nil "coyote") "%s, variable" (nil ("NAN") ("TEXT")))
   ("MaxWindowSize" fun nil (lib "maxwindowsize.pro" nil "coyote") "Result = %s" (nil ("MONITOR_RESOLUTION")))
   ("Name_Selector_Button_Events" pro nil (lib "name_selector.pro" nil "coyote") "%s, event" (nil))
   ("Name_Selector_Null_Events" pro nil (lib "name_selector.pro" nil "coyote") "%s, event" (nil))
   ("Name_Selector_Size_Events" pro nil (lib "name_selector.pro" nil "coyote") "%s, event" (nil))
   ("Name_Selector_Test" pro nil (lib "name_selector.pro" nil "coyote") "%s" (nil ("MORENAMES") ("NUMCOLS")))
   ("Name_Selector" fun nil (lib "name_selector.pro" nil "coyote") "Result = %s(theNames)" (nil ("ALL") ("CANCEL") ("COUNT") ("GROUP_LEADER") ("LABEL") ("NUMCOLS") ("TITLE")))
   ("GetName" fun "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" fun "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisProperty)" (nil))
   ("GetValue" fun "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("DATATYPE")))
   ("ParseAttribute" pro "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CLEANUP" pro "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName, parent)" (nil ("VARNAME")))
   ("NCDF_Attribute__DEFINE" pro nil (lib "ncdf_attribute__define.pro" nil "coyote") "%s, class" (nil))
   ("NCDF_BROWSER" pro nil (lib "ncdf_browser.pro" nil "coyote") "%s, filename" (nil ("EXTENSION") ("NO_NEW_FILE") ("NO_READ_ON_PARSE") ("TITLE") ("XOFFSET") ("YOFFSET")))
   ("NCDF_CastDataType" fun nil (lib "ncdf_castdatatype.pro" nil "coyote") "Result = %s(variable)" (nil ("TNAME") ("TYPE")))
   ("FindByID" fun "NCDF_Container" (lib "ncdf_container__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisID)" (nil ("COUNT")))
   ("FindByName" fun "NCDF_Container" (lib "ncdf_container__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(searchName)" (nil ("_Extra") ("Case_Sensitive") ("Count") ("RegExp")))
   ("NCDF_Container__DEFINE" pro nil (lib "ncdf_container__define.pro" nil "coyote") "%s, class" (nil))
   ("Browse" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("NO_NEW_FILE") ("SUCCESS") ("TITLE") ("XOFFSET") ("YOFFSET")))
   ("CleanParsedStructures" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("EventHandler" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("FindDimensions" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(fileID, varID)" (nil))
   ("Destroy_From_Browser" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetAttrNames" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("ListAttrNames" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetVarNames" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("ListVarNames" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetVarAttrNames" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theVariable)" (nil))
   ("OpenNewFile" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("OpenFile" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("ParseFile" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Parse_HDF_File" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Parse_HDF_EOS_File" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("ReadAttribute" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theAttribute)" (nil ("SUCCESS")))
   ("ReadAttributeFromGUI" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadAttributeFromGUI_Events" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadDimension" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(dimensionName)" (nil ("SUCCESS")))
   ("ReadFile" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theFile)" (nil ("SUCCESS")))
   ("ReadFileFromGUI" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadGlobalAttr" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("SUCCESS")))
   ("ReadVariable" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theVariable)" (nil ("COUNT") ("FILLVALUE") ("MISSINGINDICES") ("OFFSET") ("START") ("STRIDE") ("SUCCESS")))
   ("ReadVariableFromGUI" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadVarAttr" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theVariableName, theAttributeName)" (nil))
   ("ReadVariableFromGUI_Events" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadVariableWithAttr" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theVariable)" (nil ("SUCCESS")))
   ("ReadVarPlusFromGUI" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadVarPlusFromGUI_Events" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SelectionInTree" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("CLEANUP" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename)" (nil ("BROWSE") ("DESTROY_FROM_BROWSER") ("EXTENSION") ("NO_NEW_FILE") ("NO_READ_ON_PARSE")))
   ("NCDF_DATA_ATTRIBUTE__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s" (nil))
   ("NCDF_DATA_DIMENSION__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s" (nil))
   ("NCDF_DATA_VARIABLE__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s" (nil))
   ("NCDF_DATA_SWATH__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s" (nil))
   ("NCDF_DATA_WIDGET_CLEANUP" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s, tlb" (nil))
   ("NCDF_DATA_WIDGET_EVENTS" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s, event" (nil))
   ("NCDF_DATA__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s, class" (nil))
   ("GetID" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetName" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetSize" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetUnlimited" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisProperty)" (nil))
   ("GetValue" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("ParseDimension" pro "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CLEANUP" pro "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(dimName, parent)" (nil))
   ("NCDF_Dimension__DEFINE" pro nil (lib "ncdf_dimension__define.pro" nil "coyote") "%s, class" (nil))
   ("NCDF_File_Examples" pro nil (lib "ncdf_file_examples.pro" nil "coyote") "%s" (nil))
   ("Browse" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("TITLE") ("XOFFSET") ("YOFFSET")))
   ("Close_File" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CreateVarObj" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName" (nil))
   ("CreateAttrObj" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName" (nil))
   ("CreateDimObj" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, dimensionName" (nil))
   ("CopyVarAttrTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, attrName, destObj" (nil))
   ("CopyVariableTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, destObj" (nil))
   ("CopyVarDataTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, destObj" (nil ("COUNT") ("OFFSET") ("STRIDE")))
   ("CopyVarDefTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, destObj" (nil ("CHUNK_DIMENSIONS") ("GZIP") ("SHUFFLE")))
   ("CopyGlobalAttrTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName, destObj" (nil))
   ("CopyDimTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, dimName, destObj" (nil))
   ("DelGlobalAttr" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName" (nil))
   ("GetDimNames" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetDimValue" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(dimName)" (nil))
   ("GetFileID" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetGlobalAttrNames" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetGlobalAttrValue" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName)" (nil ("DATATYPE")))
   ("GetProperty" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("ALL") ("ATTRNAMES") ("DEFINE") ("DIMENSIONS") ("DIMNAMES") ("ERRORLOGGER") ("FILEHASBEENPARSED") ("FILEID") ("FILENAME") ("N_ATTRS") ("N_DIMS") ("N_VARS") ("UNLIMITED") ("VARNAMES") ("WRITABLE")))
   ("GetProperty" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisProperty)" (nil))
   ("GetVarAttrNames" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName)" (nil ("COUNT")))
   ("GetVarAttrValue" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName, attrName)" (nil ("DATATYPE")))
   ("GetVarNames" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetVarData" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName)" (nil ("ADD_OFFSET") ("COUNT") ("DATATYPE") ("FILLVALUE") ("MISSINGINDICES") ("OFFSET") ("SCALE_FACTOR") ("STRIDE")))
   ("GetVarInfo" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName)" (nil))
   ("HasGlobalAttr" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName)" (nil ("OBJECT")))
   ("HasDim" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(dimName)" (nil ("OBJECT")))
   ("HasVar" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName)" (nil ("OBJECT")))
   ("HasVarAttr" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName, varAttrName)" (nil ("OBJECT")))
   ("PrintFileInfo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, outputFile" (nil))
   ("ParseFile" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetMode" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DATA") ("DEFINE")))
   ("Sync" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("WriteVarData" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, data" (nil ("COUNT") ("OFFSET") ("STRIDE")))
   ("WriteVarDef" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, dimNames" (nil ("CHUNK_DIMENSIONS") ("CONTIGUOUS") ("DATATYPE") ("GZIP") ("OBJECT") ("SHUFFLE")))
   ("WriteDim" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, dimName, dimSize" (nil ("OBJECT") ("UNLIMITED")))
   ("WriteGlobalAttr" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName, attrValue" (nil ("DATATYPE") ("OBJECT")))
   ("WriteVarAttr" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, attrName, attrValue" (nil ("DATATYPE")))
   ("CLEANUP" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_FILE" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename)" (nil ("ALERT") ("BROWSE") ("CLOBBER") ("CREATE") ("DELETE_ON_DESTROY") ("ERRORLOGGERNAME") ("MODIFY") ("NETCDF4_FORMAT") ("NOCLUTTER") ("TIMESTAMP")))
   ("NCDF_File__DEFINE" pro nil (lib "ncdf_file__define.pro" nil "coyote") "%s, class" (nil))
   ("NCDF_IsValidFile" fun nil (lib "ncdf_isvalidfile.pro" nil "coyote") "Result = %s(filename)" (nil))
   ("AddAttr" pro "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName, attrValue" (nil ("DATATYPE")))
   ("GetAttrNames" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetAttrValue" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName)" (nil ("DATATYPE")))
   ("GetDimIDs" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetDimNames" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetDimSizes" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetID" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetInfo" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetName" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisProperty)" (nil))
   ("GetValue" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("ADD_OFFSET") ("COUNT") ("DATATYPE") ("FILLVALUE") ("MISSINGINDICES") ("OFFSET") ("SCALE_FACTOR") ("STRIDE")))
   ("HasAttr" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName)" (nil ("OBJECT")))
   ("ParseVariable" pro "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CLEANUP" pro "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName, parent)" (nil))
   ("NCDF_Variable__DEFINE" pro nil (lib "ncdf_variable__define.pro" nil "coyote") "%s, class" (nil))
   ("PickColor_CenterTLB" pro nil (lib "pickcolor.pro" nil "coyote") "%s, tlb" (nil))
   ("PickColor_Select_Color" pro nil (lib "pickcolor.pro" nil "coyote") "%s, event" (nil))
   ("PickColor_Sliders" pro nil (lib "pickcolor.pro" nil "coyote") "%s, event" (nil))
   ("PickColor_Buttons" pro nil (lib "pickcolor.pro" nil "coyote") "%s, event" (nil))
   ("PickColor" fun nil (lib "pickcolor.pro" nil "coyote") "Result = %s(currentColorIndex)" (nil ("Cancel") ("Group_Leader") ("Names") ("StartIndex") ("Title")))
   ("PrecipMap_Annotate" fun nil (lib "precipmap.pro" nil "coyote") "Result = %s(axis, index, value)" (nil))
   ("PrecipMap" pro nil (lib "precipmap.pro" nil "coyote") "%s, filename" (nil ("DATA") ("MAP") ("Palette")))
   ("PrintPath" pro nil (lib "printpath.pro" nil "coyote") "%s, filename" (nil))
   ("PRINTWINDOW_PSWINDOW_ASPECT" fun nil (lib "printwindow.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("PRINTWINDOW_PSWINDOW" fun nil (lib "printwindow.pro" nil "coyote") "Result = %s" (nil ("CM") ("Fudge") ("LANDSCAPE") ("MARGIN") ("PageSize") ("Printer") ("XFudge") ("YFudge")))
   ("PrintWindow" pro nil (lib "printwindow.pro" nil "coyote") "%s, wid" (nil ("Landscape") ("PageSize") ("RGB_Error")))
   ("PSWINDOW_ASPECT" fun nil (lib "pswindow.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("PSWINDOW" fun nil (lib "pswindow.pro" nil "coyote") "Result = %s" (nil ("ASPECTRATIO") ("CM") ("EUROPEAN") ("FUDGE") ("LANDSCAPE") ("MARGIN") ("METRIC") ("PAGESIZE") ("PRINTER") ("XFUDGE") ("YFUDGE")))
   ("PS_Background" pro nil (lib "ps_background.pro" nil "coyote") "%s, color" (nil))
   ("PWD" pro nil (lib "pwd.pro" nil "coyote") "%s" (nil))
   ("GetRandomDigits" fun "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(digits)" (nil ("BYTES")))
   ("GetRandomNumbers" fun "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(d1, d2, d3, d4, d5, d6, d7, d8)" (nil ("BINOMIAL") ("DOUBLE") ("GAMMA") ("LONG") ("NORMAL") ("POISSON") ("UNIFORM")))
   ("SetSeed" pro "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Obj ->[%s::]%s, theSeed" (nil))
   ("CLEANUP" pro "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(initialSeed)" (nil))
   ("RandomNumberGenerator__Define" pro nil (lib "randomnumbergenerator__define.pro" nil "coyote") "%s" (nil))
   ("RangeOf" fun nil (lib "rangeof.pro" nil "coyote") "Result = %s(variable)" (nil))
   ("RepMat" fun nil (lib "repmat.pro" nil "coyote") "Result = %s(matrix, ncol, nrow)" (nil))
   ("Resolve_Object" pro nil (lib "resolve_object.pro" nil "coyote") "%s, obj_or_class" (nil ("ROUTINE_INFO")))
   ("Reverse_Axes_Cleanup" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, tlb" (nil))
   ("Reverse_Axes_Draw_Events" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Style" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_AxisRotation" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Output" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Exit" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Printing" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Resize" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, data, x, y" (nil ("_Extra") ("Exact") ("Group_Leader") ("Hidden_Lines") ("Landscape") ("Vector") ("XTitle") ("YTitle") ("ZTitle")))
   ("SaveToMain" pro nil (lib "savetomain.pro" nil "coyote") "%s, data, name" (nil))
   ("ScaleModis_ScaleIt" fun nil (lib "scalemodis.pro" nil "coyote") "Result = %s(image, input, output)" (nil))
   ("ScaleModis" fun nil (lib "scalemodis.pro" nil "coyote") "Result = %s(red, grn, blu)" (nil ("CLOUD") ("RANGE")))
   ("ScrollWindow" pro nil (lib "scrollwindow.pro" nil "coyote") "%s, xsize, ysize" (nil ("FREE") ("PIXMAP") ("SIZEFRACTION") ("TITLE") ("WID") ("XPOS") ("XSIZE") ("YPOS") ("YSIZE")))
   ("SDevScl" fun nil (lib "sdevscl.pro" nil "coyote") "Result = %s(image)" (nil ("EXCLUDE") ("MULTIPLIER") ("NEGATIVE") ("OMAX") ("OMIN") ("THRESHOLD")))
   ("Select_Button_Events" pro nil (lib "select_objects.pro" nil "coyote") "%s, event" (nil))
   ("Select_Cleanup" pro nil (lib "select_objects.pro" nil "coyote") "%s, tlb" (nil))
   ("Select_Resize" pro nil (lib "select_objects.pro" nil "coyote") "%s, event" (nil))
   ("Select_Objects" pro nil (lib "select_objects.pro" nil "coyote") "%s" (nil))
   ("SetDefaultValue" pro nil (lib "setdefaultvalue.pro" nil "coyote") "%s, argument, defaultValue" (nil ("BOOLEAN")))
   ("Sharpen_HistoMatch" fun nil (lib "sharpen.pro" nil "coyote") "Result = %s(image, histogram_to_match)" (nil))
   ("Sharpen" fun nil (lib "sharpen.pro" nil "coyote") "Result = %s(image)" (nil ("Display") ("Kernel")))
   ("Example" pro nil (lib "sharpen.pro" nil "coyote") "%s" (nil))
   ("sort_nd" fun nil (lib "sort_nd.pro" nil "coyote") "Result = %s(array, dimension)" (nil))
   ("StationPlot" pro nil (lib "stationplot.pro" nil "coyote") "%s, xc, yc" (nil ("Color") ("Radius") ("Thick")))
   ("STR_SIZE" fun nil (lib "str_size.pro" nil "coyote") "Result = %s(theString, targetWidth)" (nil ("INITSIZE") ("STEP") ("XPOS") ("YPOS")))
   ("TextBox_Event" pro nil (lib "textbox.pro" nil "coyote") "%s, event" (nil))
   ("TextBox" fun nil (lib "textbox.pro" nil "coyote") "Result = %s" (nil ("Cancel") ("Group_Leader") ("Label") ("Title") ("Value") ("XSize")))
   ("TEXTLINEFORMAT" fun nil (lib "textlineformat.pro" nil "coyote") "Result = %s(theText)" (nil ("LENGTH")))
   ("Texture_Surface_Cleanup" pro nil (lib "texture_surface.pro" nil "coyote") "%s, tlb" (nil))
   ("Texture_Surface_Draw_Events" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Style" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Output" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Exit" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Printing" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Resize" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface" pro nil (lib "texture_surface.pro" nil "coyote") "%s, surfaceData, x, y" (nil ("_Extra") ("BorderColor") ("Colortable") ("Exact") ("Group_Leader") ("Hidden_Lines") ("Image") ("Landscape") ("Position") ("Vector") ("XTitle") ("YTitle") ("ZScale") ("ZTitle")))
   ("TheMonths" fun nil (lib "themonths.pro" nil "coyote") "Result = %s(index)" (nil ("ABBREVIATION") ("ALLCAPS") ("FIRSTLETTER") ("LOWCASE")))
   ("Transform_Volume" fun nil (lib "transform_volume.pro" nil "coyote") "Result = %s(volume)" (nil ("Buffer_Size") ("Centre_Rotation") ("Missing") ("Rotation") ("Scale") ("T3Dmat") ("Translate")))
   ("UNDEFINE" pro nil (lib "undefine.pro" nil "coyote") "%s, var0, var1, var2, var3, var4, var5, var6, var7, var8, var9" (nil))
   ("Clamp" pro "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s, datarange" (nil))
   ("INIT" fun "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("NColors") ("Palette") ("Position") ("Range") ("Title")))
   ("Cleanup" pro "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Ref_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Text") ("Title") ("Transform")))
   ("SetProperty" pro "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Title") ("Transform")))
   ("VColorBar__Define" pro nil (lib "vcolorbar__define.pro" nil "coyote") "%s" (nil))
   ("Windbarb" pro nil (lib "windbarb.pro" nil "coyote") "%s, x, y, wspeed, wdirection" (nil ("Aspect") ("Clip") ("Color") ("Length") ("Map_Rotation") ("Southern_Hemisphere") ("Station") ("Thick")))
   ("WindowAvailable" fun nil (lib "windowavailable.pro" nil "coyote") "Result = %s(windowID)" (nil))
   ("WindowImage_OriginalSettings" pro nil (lib "windowimage.pro" nil "coyote") "%s, event" (nil))
   ("WindowImage_Quit" pro nil (lib "windowimage.pro" nil "coyote") "%s, event" (nil))
   ("WindowImage_Resize" pro nil (lib "windowimage.pro" nil "coyote") "%s, event" (nil))
   ("WindowImage_DrawEvents" pro nil (lib "windowimage.pro" nil "coyote") "%s, event" (nil))
   ("WindowImage_Display" pro nil (lib "windowimage.pro" nil "coyote") "%s, info" (nil))
   ("WindowImage" pro nil (lib "windowimage.pro" nil "coyote") "%s, image" (nil ("BREWER") ("COLORTABLE") ("NEUTRALCOLOR") ("REVERSE")))
   ("XColors_Congrid" fun nil (lib "xcolors.pro" nil "coyote") "Result = %s(arr, x, y, z)" (nil ("CUBIC") ("INTERP") ("MINUS_ONE")))
   ("XColors_NotifyObj__Define" pro nil (lib "xcolors.pro" nil "coyote") "%s" (nil))
   ("XColors_Set" pro nil (lib "xcolors.pro" nil "coyote") "%s, info" (nil))
   ("XCOLORS_TOP_SLIDER" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_BOTTOM_SLIDER" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_GAMMA_SLIDER" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_REVERSE_BUTTON" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_COLORTABLE" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_PROTECT_COLORS" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_CANCEL" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_DISMISS" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_SWITCH_COLORS" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_CLEANUP" pro nil (lib "xcolors.pro" nil "coyote") "%s, tlb" (nil))
   ("XCOLORS" pro nil (lib "xcolors.pro" nil "coyote") "%s" (nil ("_EXTRA") ("Block") ("Bottom") ("Brewer") ("ColorInfo") ("Data") ("Drag") ("File") ("Group_Leader") ("Index") ("Modal") ("NColors") ("NoSliders") ("NotifyID") ("NotifyObj") ("NotifyPro") ("Object_Data") ("Reverse") ("Title") ("Window") ("WinID") ("XOffset") ("YOffset")))))
