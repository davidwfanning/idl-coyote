;;
;; IDLWAVE catalog for library coyote
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Thu Oct  6 08:41:10 2011
;;
(setq idlwave-library-catalog-libname "coyote")
(setq idlwave-library-catalog-routines
 '(("ADDTOPATH" pro nil (lib "addtopath.pro" nil "coyote") "%s, theDirectory" (nil ("VERBOSE")))
   ("AdjustPosition_CenterTLB" pro nil (lib "adjustposition.pro" nil "coyote") "%s, tlb" (nil))
   ("AdjustPosition_PlotEvents" pro nil (lib "adjustposition.pro" nil "coyote") "%s, event" (nil))
   ("AdjustPosition_FieldEvents" pro nil (lib "adjustposition.pro" nil "coyote") "%s, event" (nil))
   ("AdjustPosition_ButtonEvents" pro nil (lib "adjustposition.pro" nil "coyote") "%s, event" (nil))
   ("AdjustPosition" fun nil (lib "adjustposition.pro" nil "coyote") "Result = %s(currentPosition)" (nil ("Cancel") ("Group_Leader") ("Title") ("XOffset") ("YOffset")))
   ("ANSI_VALUE" fun nil (lib "ansi_value.pro" nil "coyote") "Result = %s(str_in)" (nil ("EXAMPLE")))
   ("ArcSample" pro nil (lib "arcsample.pro" nil "coyote") "%s, x_in, y_in, x_out, y_out" (nil ("PHASE") ("POINTS")))
   ("ASinhScl_ASinh" fun nil (lib "asinhscl.pro" nil "coyote") "Result = %s(x)" (nil))
   ("ASinhScl" fun nil (lib "asinhscl.pro" nil "coyote") "Result = %s(image)" (nil ("BETA") ("MAX") ("MIN") ("NEGATIVE") ("OMAX") ("OMIN")))
   ("ASPECT" fun nil (lib "aspect.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("BINARY" fun nil (lib "binary.pro" nil "coyote") "Result = %s(number)" (nil ("COLOR") ("SEPARATE")))
   ("BitGet" fun nil (lib "bitget.pro" nil "coyote") "Result = %s(value, bit)" (nil ("SILENT")))
   ("FitEllipse" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(indexNumber)" (nil ("AXES") ("CENTER") ("NOSCALE") ("NPOINTS") ("ORIENTATION") ("SEMIAXES")))
   ("GetIndices" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(indexNumber)" (nil ("COUNT") ("XSIZE") ("YSIZE")))
   ("GetStats" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(indexNumber)" (nil ("INDICES") ("NOSCALE") ("XYINDICES")))
   ("NumberOfBlobs" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("ReportStats" pro "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("FILENAME") ("NOSCALE") ("TOFILE")))
   ("CLEANUP" pro "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "Blob_Analyzer" (lib "blob_analyzer__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(inputImage)" (nil ("ALL_NEIGHBORS") ("MASK") ("SCALE")))
   ("Example" pro nil (lib "blob_analyzer__define.pro" nil "coyote") "%s" (nil))
   ("Blob_Analyzer__DEFINE" pro nil (lib "blob_analyzer__define.pro" nil "coyote") "%s, class" (nil))
   ("CanConnect" fun nil (lib "canconnect.pro" nil "coyote") "Result = %s" (nil))
   ("CapFirstLetter" fun nil (lib "capfirstletter.pro" nil "coyote") "Result = %s(theString)" (nil))
   ("CenterTLB" pro nil (lib "centertlb.pro" nil "coyote") "%s, tlb, x, y" (nil ("CenterOnTLB") ("Device") ("NoCenter")))
   ("cgArrow" pro nil (lib "cgarrow.pro" nil "coyote") "%s, x0, y0, x1, y1" (nil ("_REF_EXTRA") ("COLOR") ("DATA") ("HSIZE") ("HTHICK") ("LINESTYLE") ("NORMAL") ("SOLID") ("THICK") ("WINDOW")))
   ("cgAxis" pro nil (lib "cgaxis.pro" nil "coyote") "%s, xloc, yloc, zloc" (nil ("_REF_EXTRA") ("CHARSIZE") ("COLOR") ("DATA") ("DEVICE") ("FONT") ("NORMAL") ("SAVE") ("TITLE") ("WINDOW") ("XAXIS") ("XLOG") ("XTITLE") ("YAXIS") ("YLOG") ("YNOZERO") ("YTITLE") ("ZAXIS") ("ZLOG") ("ZTITLE")))
   ("cgBarPlot" pro nil (lib "cgbarplot.pro" nil "coyote") "%s, values" (nil ("_REF_EXTRA") ("ADDCMD") ("AXISCOLOR") ("BACKGROUND") ("BARNAMES") ("BAROFFSET") ("BARSPACE") ("BARWIDTH") ("BASELINES") ("BASERANGE") ("COLORS") ("LAYOUT") ("NOERASE") ("OPLOTCOLORS") ("OUTLINE") ("OVERPLOT") ("POSITION") ("RANGE") ("ROTATE") ("TITLE") ("WINDOW") ("XTITLE") ("YTITLE")))
   ("cgBlendImage" pro nil (lib "cgblendimage.pro" nil "coyote") "%s, foreGroundImage, backGroundImage" (nil ("_EXTRA") ("ALPHA")))
   ("cgBoxPlot_Prepare_Data" fun nil (lib "cgboxplot.pro" nil "coyote") "Result = %s(data, missing_data_value)" (nil))
   ("cgBoxPlot_Draw" pro nil (lib "cgboxplot.pro" nil "coyote") "%s, thisdata" (nil ("BOXCOLOR") ("COLOR") ("FILLBOXES") ("STATS") ("WIDTH") ("XLOCATION")))
   ("cgBoxPlot" pro nil (lib "cgboxplot.pro" nil "coyote") "%s, data" (nil ("_REF_EXTRA") ("ADDCMD") ("AXES_COLOR") ("BACKGROUND_COLOR") ("BOXCOLOR") ("CHARSIZE") ("COLOR") ("FILLBOXES") ("LABELS") ("LAYOUT") ("MISSING_DATA_VALUE") ("OVERPLOT") ("ROTATE") ("STATS") ("WINDOW") ("XCHARSIZE") ("XTHICK")))
   ("cgColor_Count_Rows" fun nil (lib "cgcolor.pro" nil "coyote") "Result = %s(filename)" (nil ("MaxRows")))
   ("cgColor_Color24" fun nil (lib "cgcolor.pro" nil "coyote") "Result = %s(color)" (nil))
   ("cgColor" fun nil (lib "cgcolor.pro" nil "coyote") "Result = %s(theColour, colorIndex)" (nil ("_Extra") ("AllColors") ("Brewer") ("Cancel") ("Check_Connection") ("ColorStructure") ("Decomposed") ("Filename") ("Names") ("NColors") ("NODISPLAY") ("Row") ("SelectColor") ("Triple")))
   ("cgColorbar" pro nil (lib "cgcolorbar.pro" nil "coyote") "%s" (nil ("_REF_EXTRA") ("ADDCMD") ("ANNOTATECOLOR") ("BOTTOM") ("CHARPERCENT") ("CHARSIZE") ("CLAMP") ("COLOR") ("DIVISIONS") ("FIT") ("FONT") ("FORMAT") ("INVERTCOLORS") ("MAXRANGE") ("MINOR") ("MINRANGE") ("NCOLORS") ("NEUTRALINDEX") ("NODISPLAY") ("PALETTE") ("POSITION") ("RANGE") ("REVERSE") ("RIGHT") ("TICKLEN") ("TICKNAMES") ("TITLE") ("TOP") ("VERTICAL") ("WINDOW") ("XLOG") ("XTITLE") ("YLOG") ("YTITLE")))
   ("cgColorFill" pro nil (lib "cgcolorfill.pro" nil "coyote") "%s, x, y, z" (nil ("_REF_EXTRA") ("COLOR") ("DEVICE") ("NORMAL") ("WINDOW")))
   ("cgContour" pro nil (lib "cgcontour.pro" nil "coyote") "%s, data, x, y" (nil ("_REF_EXTRA") ("ADDCMD") ("AXESCOLOR") ("AXISCOLOR") ("BACKGROUND") ("C_CHARSIZE") ("C_COLORS") ("C_LABELS") ("CELL_FILL") ("CHARSIZE") ("COLOR") ("FILL") ("FONT") ("IRREGULAR") ("LABEL") ("LAYOUT") ("LEVELS") ("MISSINGVALUE") ("NLEVELS") ("NOERASE") ("ONIMAGE") ("OVERPLOT") ("PALETTE") ("POSITION") ("RESOLUTION") ("TRADITIONAL") ("WINDOW") ("XSTYLE") ("XTHICK") ("XTICKLEN") ("XTICKS") ("XTICKV") ("YSTYLE") ("YTHICK") ("YTICKLEN") ("YTICKS") ("YTICKV")))
   ("cgControl" pro nil (lib "cgcontrol.pro" nil "coyote") "%s, selection" (nil ("ADJUSTSIZE") ("ALL") ("BACKGROUND") ("CMDINDEX") ("CREATE_BMP") ("CREATE_GIF") ("CREATE_JPEG") ("CREATE_PNG") ("CREATE_PS") ("CREATE_TIFF") ("DELAY") ("DELETECMD") ("DESTROY") ("DIMENSIONS") ("ERASEIT") ("EXECUTE") ("GET_KEYCMDINDEX") ("GET_KEYVALUE") ("GET_KEYWORD") ("IM_DENSITY") ("IM_OPTIONS") ("IM_RASTER") ("IM_RESIZE") ("IM_TRANSPARENT") ("LISTCMD") ("MULTI") ("OBJECT") ("PALETTE") ("PS_CHARSIZE") ("PS_DECOMPOSED") ("PS_DELETE") ("PS_ENCAPSULATED") ("PS_FONT") ("PS_METRIC") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("RESTORE_VISUALIZATION") ("SAVE_VISUALIZATION") ("TITLE") ("UPDATE") ("WIDGETID") ("XOMARGIN") ("YOMARGIN")))
   ("cgDCBar" pro nil (lib "cgdcbar.pro" nil "coyote") "%s, colors" (nil ("ADDCMD") ("BARCOLOR") ("BOTTOM") ("CHARSIZE") ("COLOR") ("FILE") ("FONT") ("LABELS") ("NCOLORS") ("POSITION") ("RIGHT") ("ROTATE") ("SPACING") ("TCHARSIZE") ("TITLE") ("VERTICAL") ("WINDOW")))
   ("cgDefCharSize" fun nil (lib "cgdefcharsize.pro" nil "coyote") "Result = %s" (nil ("ADJUSTSIZE") ("FONT")))
   ("cgDelete" pro nil (lib "cgdelete.pro" nil "coyote") "%s, selectMatch" (nil ("ALL") ("OBJECT") ("TITLE") ("WIDGETID")))
   ("smooth2" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(i, w)" (nil ("help")))
   ("makez" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(nx, ny, w)" (nil ("help") ("lastseed") ("periodic") ("seed")))
   ("makey" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(n, w)" (nil ("help") ("lastseed") ("periodic") ("seed")))
   ("cgDemoData_ReadData" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(number)" (nil))
   ("cgDemoData_CenterTLB" pro nil (lib "cgdemodata.pro" nil "coyote") "%s, tlb" (nil))
   ("cgDemoData_CANCEL" pro nil (lib "cgdemodata.pro" nil "coyote") "%s, event" (nil))
   ("cgDemoData_EVENT" pro nil (lib "cgdemodata.pro" nil "coyote") "%s, event" (nil))
   ("cgDemoData" fun nil (lib "cgdemodata.pro" nil "coyote") "Result = %s(number)" (nil ("CANCEL") ("Group_Leader") ("Images")))
   ("cgDisplay" pro nil (lib "cgdisplay.pro" nil "coyote") "%s, pxsize, pysize" (nil ("_EXTRA") ("COLOR") ("FREE") ("WID") ("XSIZE") ("YSIZE")))
   ("cgErase" pro nil (lib "cgerase.pro" nil "coyote") "%s, background_color" (nil ("COLOR") ("LAYOUT") ("WINDOW")))
   ("cgHistoplot" pro nil (lib "cghistoplot.pro" nil "coyote") "%s, dataToHistogram" (nil ("_REF_EXTRA") ("ADDCMD") ("AXISCOLORNAME") ("BACKCOLORNAME") ("BINSIZE") ("CHARSIZE") ("DATACOLORNAME") ("FILE") ("FILLPOLYGON") ("FREQUENCY") ("HISTDATA") ("L64") ("LAYOUT") ("LINE_FILL") ("LOCATIONS") ("MAX_VALUE") ("MAXINPUT") ("MIN_VALUE") ("MININPUT") ("MISSING") ("NAN") ("NBINS") ("NOERASE") ("OMAX") ("OMIN") ("OPLOT") ("OPROBABILITY") ("ORIENTATION") ("OUTLINE") ("PATTERN") ("POLYCOLOR") ("PROBABILITY_FUNCTION") ("PROBCOLORNAME") ("REVERSE_INDICES") ("ROTATE") ("SPACING") ("THICK") ("WINDOW") ("XTITLE") ("YTITLE")))
   ("cgImage_PREPARE_ALPHA" fun nil (lib "cgimage.pro" nil "coyote") "Result = %s(image, position, alphaBackgroundImage)" (nil ("ALPHABGPOSITION") ("NOINTERP") ("TV")))
   ("cgImage" pro nil (lib "cgimage.pro" nil "coyote") "%s, image, x, y" (nil ("_REF_EXTRA") ("ADDCMD") ("ALPHABACKGROUNDIMAGE") ("ALPHABGPOSITION") ("AXES") ("AXIS") ("AXKEYWORDS") ("BACKGROUND") ("BOTTOM") ("CHARSIZE") ("COLOR") ("ERASE") ("FONT") ("INTERPOLATE") ("KEEP_ASPECT_RATIO") ("LAYOUT") ("MARGIN") ("MAXVALUE") ("MINUS_ONE") ("MINVALUE") ("MULTIMARGIN") ("NCOLORS") ("NOERASE") ("NOINTERPOLATION") ("NORMAL") ("OPOSITION") ("OVERPLOT") ("PALETTE") ("POSITION") ("QUIET") ("SAVE") ("SCALE") ("TITLE") ("TOP") ("TV") ("WINDOW") ("XRANGE") ("XTITLE") ("YRANGE") ("YTITLE")))
   ("cgImageInfo" pro nil (lib "cgimageinfo.pro" nil "coyote") "%s, image, position" (nil))
   ("cgDescribeThisImgValues" pro nil (lib "cgimageinfodescribevalues.pro" nil "coyote") "%s, image, id, xpixel, ypixel" (nil))
   ("cgImageInfoDescribeValues" pro nil (lib "cgimageinfodescribevalues.pro" nil "coyote") "%s, iimage, xpixel, ypixel, hsh" (nil))
   ("cgLoadCT" pro nil (lib "cgloadct.pro" nil "coyote") "%s, table" (nil ("ADDCMD") ("BOTTOM") ("BREWER") ("CLIP") ("FILE") ("GET_NAMES") ("NCOLORS") ("REVERSE") ("RGB_TABLE") ("ROW") ("SILENT") ("WINDOW") ("WINID")))
   ("cgPickfile" fun nil (lib "cgpickfile.pro" nil "coyote") "Result = %s" (nil ("_REF_EXTRA") ("DATADIR") ("DEMO") ("HDF") ("JPEG") ("LAST_FILE") ("LIDAR") ("NCDF") ("PNG") ("TIFF")))
   ("cgPlot" pro nil (lib "cgplot.pro" nil "coyote") "%s, x, y" (nil ("_REF_EXTRA") ("ADDCMD") ("ASPECT") ("AXESCOLOR") ("AXISCOLOR") ("BACKGROUND") ("CHARSIZE") ("COLOR") ("FONT") ("ISOTROPIC") ("LAYOUT") ("NODATA") ("NOERASE") ("OVERPLOT") ("POSITION") ("PSYM") ("SYMCOLOR") ("SYMSIZE") ("TRADITIONAL") ("WINDOW")))
   ("cgPlotS" pro nil (lib "cgplots.pro" nil "coyote") "%s, x, y, z" (nil ("_EXTRA") ("ADDCMD") ("COLOR") ("PSYM") ("SYMCOLOR") ("SYMSIZE") ("WINDOW")))
   ("cgQuery" fun nil (lib "cgquery.pro" nil "coyote") "Result = %s" (nil ("COUNT") ("CURRENT") ("DIMENSIONS") ("OBJECTREF") ("TITLE") ("WIDGETID")))
   ("EvaluateKeywords" fun "cgsContour" (lib "cgscontour.pro" nil "coyote") "Result = Obj ->[%s::]%s(keywords)" (nil ("SUCCESS")))
   ("SetData" pro "cgsContour" (lib "cgscontour.pro" nil "coyote") "Obj ->[%s::]%s, x, y" (nil ("NODRAW")))
   ("Save" pro "cgsContour" (lib "cgscontour.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil ("RESOLUTION")))
   ("PS" pro "cgsContour" (lib "cgscontour.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil ("GUI")))
   ("Draw" pro "cgsContour" (lib "cgscontour.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("SUCCESS")))
   ("GetKeywords" fun "cgsContour" (lib "cgscontour.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "cgsContour" (lib "cgscontour.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ASPECT") ("AXISCOLOR") ("ISOTROPIC") ("LAYOUT") ("MAX_VALUE") ("MIN_VALUE") ("NSUM") ("POLAR") ("SYMCOLOR") ("UPDATE") ("WINOBJECT") ("XLOG") ("YLOG") ("YNOZERO")))
   ("Set" pro "cgsContour" (lib "cgscontour.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA")))
   ("SetProperty" pro "cgsContour" (lib "cgscontour.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("AltPS_Keywords") ("AltPS_Params") ("ASPECT") ("AXISCOLOR") ("ISOTROPIC") ("LAYOUT") ("MAX_VALUE") ("MIN_VALUE") ("NODRAW") ("NSUM") ("POLAR") ("SYMCOLOR") ("UPDATE") ("WINOBJECT") ("XLOG") ("YLOG") ("YNOZERO")))
   ("CLEANUP" pro "cgsContour" (lib "cgscontour.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "cgsContour" (lib "cgscontour.pro" nil "coyote") "Result = Obj ->[%s::]%s(x, y)" (nil ("_EXTRA") ("ALTPS_KEYWORDS") ("ALTPS_PARAMS") ("ASPECT") ("AXISCOLOR") ("ISOTROPIC") ("LAYOUT") ("MAX_VALUE") ("MIN_VALUE") ("NSUM") ("POLAR") ("SYMCOLOR") ("UPDATE") ("XLOG") ("YLOG") ("YNOZERO")))
   ("cgsContour__DEFINE" pro nil (lib "cgscontour.pro" nil "coyote") "%s, class" (nil))
   ("cgsContour" fun nil (lib "cgscontour.pro" nil "coyote") "Result = %s(x, y)" (nil ("_EXTRA") ("ALTPS_KEYWORDS") ("ALTPS_PARAMS") ("ASPECT") ("AXISCOLOR") ("CURRENT") ("ISOTROPIC") ("LAYOUT") ("MAX_VALUE") ("MIN_VALUE") ("NOWINDOW") ("NSUM") ("POLAR") ("SYMCOLOR") ("UPDATE") ("XLOG") ("YLOG") ("YNOZERO")))
   ("cgSet" pro nil (lib "cgset.pro" nil "coyote") "%s, selection" (nil ("OBJECT") ("TITLE") ("WIDGETID")))
   ("cgShade_Surf" pro nil (lib "cgshade_surf.pro" nil "coyote") "%s, data, x, y" (nil ("_Ref_Extra") ("ADDCMD") ("AXESCOLOR") ("AXISCOLOR") ("BACKGROUND") ("BOTTOM") ("CHARSIZE") ("COLOR") ("ELEVATION_SHADING") ("FONT") ("LAYOUT") ("NOERASE") ("PALETTE") ("ROTX") ("ROTZ") ("SHADED") ("SHADES") ("SKIRT") ("TITLE") ("TRADITIONAL") ("TSIZE") ("TSPACE") ("WINDOW") ("XSTYLE") ("YSTYLE") ("ZSTYLE")))
   ("cgShow" pro nil (lib "cgshow.pro" nil "coyote") "%s, selection" (nil ("OBJECT") ("TITLE") ("WIDGETID")))
   ("cgSnapshot" fun nil (lib "cgsnapshot.pro" nil "coyote") "Result = %s(xstart, ystart, ncols, nrows)" (nil ("_Extra") ("BMP") ("Cancel") ("Colors") ("Cube") ("Dither") ("Filename") ("GIF") ("JPEG") ("NoDialog") ("Order") ("Overwrite_Prompt") ("PICT") ("PNG") ("Quality") ("TIFF") ("True") ("TYPE") ("WID")))
   ("cgSurf" pro nil (lib "cgsurf.pro" nil "coyote") "%s, data, x, y" (nil ("_Ref_Extra") ("ADDCMD") ("AXESCOLOR") ("AXISCOLOR") ("BACKGROUND") ("BOTTOM") ("CHARSIZE") ("COLOR") ("ELEVATION_SHADING") ("FONT") ("LAYOUT") ("NOERASE") ("PALETTE") ("ROTX") ("ROTZ") ("SHADED") ("SHADES") ("SKIRT") ("TITLE") ("TRADITIONAL") ("TSIZE") ("TSPACE") ("WINDOW") ("XSTYLE") ("YSTYLE") ("ZSTYLE")))
   ("CW_Light_Control_Intensity_Events" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("CW_Light_Control_Events" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("CW_Light_Control" fun nil (lib "cgsurface.pro" nil "coyote") "Result = %s(parent, theLight)" (nil ("Color") ("Event_Pro") ("Index") ("LabelSize") ("Name") ("SETCOLOR_NAME") ("UValue")))
   ("cgSurface_Light_Done" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Light_Controls_Event" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Light_Controls" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Axes_OnOff" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Bottom_OnOff" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Change_Colors" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Draw_Events" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Elevation_Colors" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Elevation_Shading" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Exit" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Move_Surface" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Move_Title" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Output" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Properties" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Resize" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Skirt_OnOff" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Style" pro nil (lib "cgsurface.pro" nil "coyote") "%s, event" (nil))
   ("cgSurface_Cleanup" pro nil (lib "cgsurface.pro" nil "coyote") "%s, tlb" (nil))
   ("cgSurface_Aspect" fun nil (lib "cgsurface.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("cgSurface" pro nil (lib "cgsurface.pro" nil "coyote") "%s, data, x, y" (nil ("_Extra") ("Axiscolor") ("Background") ("Block") ("Bottom") ("Brewer") ("Charsize") ("Color") ("Constrain_Aspect") ("CTable") ("Elevation_Shading") ("Font") ("Group_Leader") ("Hidden_Lines") ("Reverse") ("Shaded") ("Skirt") ("Style") ("TCharsize") ("TColor") ("Texture_Image") ("Title") ("Transform") ("XOffset") ("XRange") ("XSize") ("XStyle") ("XTitle") ("YOffset") ("YRange") ("YSize") ("YStyle") ("YTitle") ("ZRange") ("ZScale") ("ZStyle") ("ZTitle")))
   ("cgSymbol_Example" pro nil (lib "cgsymbol.pro" nil "coyote") "%s" (nil ("PS") ("UNICODE")))
   ("cgSymbol" fun nil (lib "cgsymbol.pro" nil "coyote") "Result = %s(symbol)" (nil ("CAPITAL") ("EXAMPLE") ("PS") ("UNICODE")))
   ("cgText" pro nil (lib "cgtext.pro" nil "coyote") "%s, xloc, yloc, text" (nil ("_REF_EXTRA") ("ADDCMD") ("ALIGNMENT") ("CHARSIZE") ("COLOR") ("DATA") ("DEVICE") ("FONT") ("NORMAL") ("OUTLOC") ("PLACE") ("TT_FONT") ("WIDTH") ("WINDOW")))
   ("AddCommand" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, command" (nil ("INDEX")))
   ("AutoPostScriptFile" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("AutoRasterFile" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, filetype, filename" (nil))
   ("CreatePostScriptFile" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("DeleteCommand" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, cmdIndex" (nil ("ALL")))
   ("FSC_CmdWindow_Dispatch_Events" pro nil (lib "cgwindow.pro" nil "coyote") "%s, event" (nil))
   ("ExecuteCommands" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("KEYWORDS")))
   ("GetCommandKeyword" fun "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(keyword, cmdIndex)" (nil ("SUCCESS")))
   ("GetProperty" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ADJUSTSIZE") ("BACKGROUND") ("COMMANDS") ("DELAY") ("ERASEIT") ("IM_DENSITY") ("IM_OPTIONS") ("IM_RASTER") ("IM_RESIZE") ("IM_TRANSPARENT") ("MULTI") ("NOEXECUTECOMMANDS") ("PALETTE") ("PS_CHARSIZE") ("PS_DECOMPOSED") ("PS_DELETE") ("PS_ENCAPSULATED") ("PS_FONT") ("PS_METRIC") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("TLB") ("WID") ("XOMARGIN") ("YOMARGIN")))
   ("InvalidateWidgetID" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("ListCommand" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, cmdIndex" (nil ("CREATECOMMANDSTRUCT")))
   ("LoadColors" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, r, g, b" (nil ("XCOLORS_DATA")))
   ("ReplaceCommand" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, command, cmdIndex" (nil ("MULTI")))
   ("Resize" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SaveAsRaster" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("RestoreCommands" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("SaveCommands" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("SetProperty" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_EXTRA") ("ADJUSTSIZE") ("BACKGROUND") ("DELAY") ("DIMENSIONS") ("ERASEIT") ("IM_DENSITY") ("IM_OPTIONS") ("IM_RASTER") ("IM_RESIZE") ("IM_TRANSPARENT") ("MULTI") ("NOEXECUTECOMMANDS") ("PALETTE") ("PS_CHARSIZE") ("PS_DECOMPOSED") ("PS_DELETE") ("PS_ENCAPSULATED") ("PS_FONT") ("PS_METRIC") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("UPDATE") ("XOMARGIN") ("YOMARGIN")))
   ("FSC_CmdWindow_Cleanup" pro nil (lib "cgwindow.pro" nil "coyote") "%s, tlb" (nil))
   ("Init" fun "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(command, p1, p2, p3)" (nil ("_Extra") ("AddCmd") ("AltPS_Keywords") ("AltPS_Params") ("CmdDelay") ("Group_Leader") ("Method") ("ReplaceCmd") ("WBackground") ("WEraseIt") ("WMulti") ("WOXMargin") ("WOYMargin") ("WTitle") ("WXPos") ("WXSize") ("WYPos") ("WYSize")))
   ("Cleanup" pro "FSC_CmdWindow" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_CmdWindow__Define" pro nil (lib "cgwindow.pro" nil "coyote") "%s, class" (nil))
   ("CreateCommandStruct" pro "FSC_Window_Command" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, structName" (nil ("Quiet")))
   ("Copy" fun "FSC_Window_Command" (lib "cgwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Keywords" fun "FSC_Window_Command" (lib "cgwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("HAS_KEYWORDS")))
   ("Draw" pro "FSC_Window_Command" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("KEYWORDS") ("SUCCESS")))
   ("EvaluateKeywords" fun "FSC_Window_Command" (lib "cgwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(keywords)" (nil ("SUCCESS")))
   ("List" pro "FSC_Window_Command" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s, prefix" (nil))
   ("Cleanup" pro "FSC_Window_Command" (lib "cgwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_Window_Command" (lib "cgwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("AltPS_Keywords") ("AltPS_Params") ("COMMAND") ("KEYWORDS") ("P1") ("P2") ("P3") ("TYPE")))
   ("FSC_Window_Command__Define" pro nil (lib "cgwindow.pro" nil "coyote") "%s" (nil))
   ("FSC_Window_ID__Define" pro nil (lib "cgwindow.pro" nil "coyote") "%s" (nil))
   ("cgWindow" pro nil (lib "cgwindow.pro" nil "coyote") "%s, command, p1, p2, p3" (nil ("_Extra") ("AddCmd") ("AltPS_Keywords") ("AltPS_Params") ("CmdDelay") ("CmdIndex") ("DeleteCmd") ("ExecuteCmd") ("Group_Leader") ("ListCmd") ("LoadCmd") ("Method") ("ReplaceCmd") ("WBackground") ("WErase") ("WinID") ("WMulti") ("WObject") ("WOXMargin") ("WOYMargin") ("WTitle") ("WXPos") ("WXSize") ("WYPos") ("WYSize")))
   ("cgWindow_GetDefs" pro nil (lib "cgwindow_getdefs.pro" nil "coyote") "%s" (nil ("AdjustSize") ("Background") ("Delay") ("EraseIt") ("IM_Density") ("IM_Options") ("IM_Raster") ("IM_Resize") ("IM_Transparent") ("Multi") ("Palette") ("PS_CHARSIZE") ("PS_Decomposed") ("PS_Delete") ("PS_Encapsulated") ("PS_FONT") ("PS_Metric") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("Title") ("XOMargin") ("XPos") ("XSize") ("YOMargin") ("YPos") ("YSize")))
   ("cgWindow_SetDefs" pro nil (lib "cgwindow_setdefs.pro" nil "coyote") "%s" (nil ("AdjustSize") ("Background") ("Delay") ("EraseIt") ("IM_Density") ("IM_Options") ("IM_Raster") ("IM_Resize") ("IM_Transparent") ("Multi") ("Palette") ("PS_CHARSIZE") ("PS_Decomposed") ("PS_Delete") ("PS_Encapsulated") ("PS_FONT") ("PS_Metric") ("PS_QUIET") ("PS_SCALE_FACTOR") ("PS_TT_FONT") ("Reset") ("Title") ("XOMargin") ("XPos") ("XSize") ("YOMargin") ("YPos") ("YSize")))
   ("Checkerboard" fun nil (lib "checkerboard.pro" nil "coyote") "Result = %s(boxes)" (nil ("BLACK") ("WHITE") ("XSIZE") ("YSIZE")))
   ("CIndex_Colors" pro nil (lib "cindex.pro" nil "coyote") "%s, event" (nil))
   ("CIndex_Event" pro nil (lib "cindex.pro" nil "coyote") "%s, event" (nil))
   ("CIndex" pro nil (lib "cindex.pro" nil "coyote") "%s" (nil ("BREWER") ("NOTIFYID")))
   ("Clipboard" pro nil (lib "clipboard.pro" nil "coyote") "%s, windowIndex" (nil ("_Extra")))
   ("ClipScl" fun nil (lib "clipscl.pro" nil "coyote") "Result = %s(image, clip)" (nil ("NEGATIVE") ("OMAX") ("OMIN") ("THRESHOLD")))
   ("COLOR24" fun nil (lib "color24.pro" nil "coyote") "Result = %s(color)" (nil))
   ("ColorButtonBitmap" fun nil (lib "colorbuttonbitmap.pro" nil "coyote") "Result = %s(theText)" (nil ("BGColor") ("FGColor")))
   ("ColorsAreIdentical" fun nil (lib "colorsareidentical.pro" nil "coyote") "Result = %s(color_1, color_2)" (nil))
   ("Clamp" pro "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Obj ->[%s::]%s, datarange" (nil))
   ("INIT" fun "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("NColors") ("Palette") ("Position") ("Range") ("Title")))
   ("Cleanup" pro "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Ref_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Text") ("Title") ("Transform")))
   ("SetProperty" pro "ContrastZoom_VColorBar" (lib "contrastzoom.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Title") ("Transform")))
   ("ContrastZoom_VColorBar__Define" pro nil (lib "contrastzoom.pro" nil "coyote") "%s" (nil))
   ("ContrastZoom_Aspect" fun nil (lib "contrastzoom.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("ContrastZoom_Resize" pro nil (lib "contrastzoom.pro" nil "coyote") "%s, event" (nil))
   ("ContrastZoom_DistinguishEvents" pro nil (lib "contrastzoom.pro" nil "coyote") "%s, event" (nil))
   ("ContrastZoom_Cleanup" pro nil (lib "contrastzoom.pro" nil "coyote") "%s, tlb" (nil))
   ("ContrastZoom" pro nil (lib "contrastzoom.pro" nil "coyote") "%s, image" (nil ("Colortable") ("Group_Leader")))
   ("Convert_To_Type" fun nil (lib "convert_to_type.pro" nil "coyote") "Result = %s(input, theType)" (nil ("CEILING") ("FLOOR") ("ROUND")))
   ("CoyoteGraphic" fun nil (lib "coyotegraphic.pro" nil "coyote") "Result = %s(routine)" (nil))
   ("CW_Drawcolor_FindTLB" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(startID)" (nil))
   ("CW_Drawcolor_Error_Message" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("NoName") ("Traceback")))
   ("GetTLB" fun "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Realize" pro "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CW_DrawColor_Realize" pro nil (lib "cw_drawcolor.pro" nil "coyote") "%s, drawID" (nil))
   ("CW_DrawColor_Pickcolor" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(event)" (nil))
   ("Pickcolor" fun "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("CW_DrawColor_Set_Value" pro nil (lib "cw_drawcolor.pro" nil "coyote") "%s, id, newcolor" (nil))
   ("Set_Value" pro "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Obj ->[%s::]%s, newcolor" (nil))
   ("CW_DrawColor_Get_Value" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(id)" (nil))
   ("Get_Value" fun "CW_DrawColor" (lib "cw_drawcolor.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Init" fun "CW_DRAWCOLOR" (lib "cw_drawcolor.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("Color") ("Column") ("Event_Func") ("Event_Pro") ("Filename") ("Index") ("Label_Left") ("Label_Right") ("LabelSize") ("LabelText") ("Title") ("UValue") ("XSize") ("YSize")))
   ("CW_DRAWCOLOR_Kill_Notify" pro nil (lib "cw_drawcolor.pro" nil "coyote") "%s, drawID" (nil))
   ("Cleanup" pro "CW_DRAWCOLOR" (lib "cw_drawcolor.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CW_DRAWCOLOR__DEFINE" pro nil (lib "cw_drawcolor.pro" nil "coyote") "%s" (nil))
   ("CW_DRAWCOLOR" fun nil (lib "cw_drawcolor.pro" nil "coyote") "Result = %s(parent)" (nil ("Color") ("Column") ("Event_Func") ("Event_Pro") ("Filename") ("Index") ("Label_Left") ("Label_Right") ("LabelSize") ("LabelText") ("Object") ("Title") ("UValue") ("XSize") ("YSize")))
   ("CW_Spacer" fun nil (lib "cw_spacer.pro" nil "coyote") "Result = %s(parent, spacer)" (nil))
   ("DBLTOSTR" fun nil (lib "dbltostr.pro" nil "coyote") "Result = %s(value)" (nil))
   ("DecomposedColor" fun nil (lib "decomposedcolor.pro" nil "coyote") "Result = %s(device)" (nil ("DEPTH")))
   ("DirPath" fun nil (lib "dirpath.pro" nil "coyote") "Result = %s(subdirectory)" (nil ("RootDirectory")))
   ("Refresh" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("OriginalColors" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("XColors_Load_Colors" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("XColors" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("BLUE") ("GREEN") ("NAMES") ("NCOLORS") ("RED") ("STARTINDEX")))
   ("SetProperty" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("BLUE") ("GREEN") ("NAMES") ("NCOLORS") ("RED") ("STARTINDEX")))
   ("Color24" fun "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theColor)" (nil))
   ("GetColor" fun "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theColor, startIndex)" (nil ("AUTODETERMINE") ("INDEXNUMBER") ("TRUECOLOR")))
   ("GetColors" fun "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(startIndex)" (nil ("INDEXNUMBER") ("Structure") ("TRUECOLOR")))
   ("LoadColors" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s, startindex" (nil))
   ("Button_Respond" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Set_Slider_Color" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Set_Standard_Color" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("DrawColors__Events" pro nil (lib "drawcolors__define.pro" nil "coyote") "%s, event" (nil))
   ("Select" fun "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("Cancel") ("Color") ("Group_Leader") ("Name") ("StartIndex") ("Title") ("TrueColor")))
   ("CLEANUP" pro "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "DrawColors" (lib "drawcolors__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(red, green, blue, names)" (nil))
   ("DrawColors__Define" pro nil (lib "drawcolors__define.pro" nil "coyote") "%s" (nil))
   ("DrawCounties_DrawEntity" pro nil (lib "drawcounties.pro" nil "coyote") "%s, entity" (nil ("COLOR") ("LINESTYLE") ("THICK")))
   ("DrawCounties" pro nil (lib "drawcounties.pro" nil "coyote") "%s, countyFile" (nil ("ATTRIBUTE_NAME") ("COLORS") ("LINESTYLE") ("STATENAMES") ("THICK")))
   ("DrawShapes_DrawEntity" pro nil (lib "drawshapes.pro" nil "coyote") "%s, entity" (nil ("COLOR") ("FCOLOR") ("FILL") ("LINESTYLE") ("MAPCOORD") ("THICK")))
   ("DrawShapes" pro nil (lib "drawshapes.pro" nil "coyote") "%s, shapeFile" (nil ("ATTRNAME") ("ATTRVALUES") ("AUTODRAW") ("COLORS") ("FCOLORS") ("FILL") ("LINESTYLE") ("MAPCOORD") ("THICK")))
   ("DrawStates_DrawEntity" pro nil (lib "drawstates.pro" nil "coyote") "%s, entity" (nil ("COLOR") ("FILL") ("LINESTYLE") ("THICK")))
   ("DrawStates" pro nil (lib "drawstates.pro" nil "coyote") "%s, stateFile" (nil ("ATTRIBUTE_NAME") ("COLORS") ("FILL") ("LINESTYLE") ("STATENAMES") ("THICK")))
   ("AddError" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s, theText" (nil))
   ("AddText" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s, theText" (nil ("PRINT")))
   ("ClearLog" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Flush" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CloseFile" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetFileName" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Status" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("SetStatus" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s, status" (nil))
   ("OpenFile" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(newLogFilename)" (nil ("DELETE_CURRENT_FILE")))
   ("LastMessage" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("PrintLastMessage" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("ALERT") ("DELETE_ON_DESTROY") ("FILENAME") ("LAST_MESSAGE") ("LUN") ("NOCLUTTER") ("NOTRACEBACK") ("STATUS")))
   ("SetProperty" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("ALERT") ("DELETE_ON_DESTROY") ("NOCLUTTER") ("NOTRACEBACK") ("STATUS")))
   ("CLEANUP" pro "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "ErrorLogger" (lib "errorlogger__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename)" (nil ("ALERT") ("DELETE_ON_DESTROY") ("IMMEDIATE") ("NOCLUTTER") ("NOTRACEBACK") ("TIMESTAMP")))
   ("ErrorLogger__Define" pro nil (lib "errorlogger__define.pro" nil "coyote") "%s, class" (nil))
   ("ERROR_MESSAGE" fun nil (lib "error_message.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("Error") ("Informational") ("NoName") ("Quiet") ("Title") ("Traceback")))
   ("FindMapBoundary" fun nil (lib "findmapboundary.pro" nil "coyote") "Result = %s(filename, boundary)" (nil ("USE_LATLON") ("XRANGE") ("YRANGE")))
   ("Find_Boundary_Outline" fun nil (lib "find_boundary.pro" nil "coyote") "Result = %s(mask, darray, boundaryPts, ptIndex, xsize, ysize, from_direction)" (nil))
   ("Find_Boundary" fun nil (lib "find_boundary.pro" nil "coyote") "Result = %s(indices)" (nil ("AREA") ("CENTER") ("PERIM_AREA") ("PERIMETER") ("SCALE") ("XSIZE") ("YSIZE")))
   ("Find_Resource_File" fun nil (lib "find_resource_file.pro" nil "coyote") "Result = %s(filename)" (nil ("SUCCESS") ("VERBOSE")))
   ("Fit_Ellipse" fun nil (lib "fit_ellipse.pro" nil "coyote") "Result = %s(indices)" (nil ("AXES") ("CENTER") ("NPOINTS") ("ORIENTATION") ("SCALE") ("SEMIAXES") ("XSIZE") ("YSIZE")))
   ("FIXPS" pro nil (lib "fixps.pro" nil "coyote") "%s, in_filename, out_filename" (nil ("A4") ("LEDGER") ("LEGAL") ("LETTER") ("PAGETYPE") ("QUIET") ("SUCCESS")))
   ("FLOATS_EQUAL" fun nil (lib "floats_equal.pro" nil "coyote") "Result = %s(array_1, array_2)" (nil ("ULP")))
   ("FPUFIX" fun nil (lib "fpufix.pro" nil "coyote") "Result = %s(data)" (nil))
   ("FSC_Base_Filename" fun nil (lib "fsc_base_filename.pro" nil "coyote") "Result = %s(filename)" (nil ("Directory") ("Extension") ("Path_Separator")))
   ("Clamp" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s, datarange" (nil ("Draw")))
   ("GetProperty" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Background") ("Bottom") ("Charsize") ("Color") ("Font") ("Format") ("Index") ("Major") ("Minor") ("MinusOne") ("NColors") ("Neighbor") ("Position") ("Range") ("TickLen") ("TickV") ("Title") ("Vertical") ("XEraseBox") ("YEraseBox")))
   ("SetProperty" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Background") ("Bottom") ("Charsize") ("Color") ("Draw") ("Erase") ("Font") ("Format") ("Horizontal") ("Index") ("Major") ("Minor") ("MinusOne") ("NColors") ("Neighbor") ("Position") ("Range") ("TickLen") ("TickV") ("Title") ("Vertical") ("XEraseBox") ("YEraseBox")))
   ("LoadCT" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s, index" (nil ("Draw") ("Erase")))
   ("Erase" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Draw" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Erase")))
   ("CleanUp" pro "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Init" fun "FSC_Colorbar" (lib "fsc_colorbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("Background") ("Bottom") ("Charsize") ("Color") ("Font") ("Format") ("Index") ("Major") ("Minor") ("MinusOne") ("NColors") ("Neighbor") ("Position") ("Range") ("TickLen") ("TickV") ("Title") ("Vertical") ("XEraseBox") ("YEraseBox")))
   ("FSC_Colorbar__Define" pro nil (lib "fsc_colorbar__define.pro" nil "coyote") "%s" (nil))
   ("FSC_COLORSELECT_WidgetFont" fun nil (lib "fsc_colorselect.pro" nil "coyote") "Result = %s" (nil ("DEFAULT")))
   ("GetTextID" fun "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Resize" pro "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s, newsize" (nil))
   ("GetID" fun "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetLabelSize" fun "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetTextSize" fun "FSC_COLORSELECT" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Geometry" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Color" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Color_Index" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("BREWER")))
   ("Set_Color" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s, color" (nil))
   ("Set_Color_Index" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s, colorIndex" (nil ("BREWER") ("TABLENAME")))
   ("FSC_ColorSelect_Event__Define" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s" (nil))
   ("PickColorEvents" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("FSC_ColorSelect_Event_Handler" fun nil (lib "fsc_colorselect.pro" nil "coyote") "Result = %s(event)" (nil))
   ("GetProperty" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("BREWER") ("COLOR") ("CT_INDEX") ("EVENT_FUNC") ("EVENT_PRO") ("ID") ("NAME") ("TEXTID") ("UVALUE")))
   ("SetProperty" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("BREWER") ("COLOR") ("CT_INDEX") ("EVENT_FUNC") ("EVENT_PRO") ("LABELSIZE") ("NAME") ("SCR_XSIZE") ("SCR_YSIZE") ("SENSITIVE") ("STYLE") ("TITLE") ("UVALUE") ("XSIZE")))
   ("INIT" fun "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("Brewer") ("Button_Text") ("CFont") ("Color") ("CT_Index") ("CT_NColors") ("Event_Func") ("Event_Pro") ("Frame") ("LabelAlign") ("LabelFont") ("LabelSize") ("Name") ("Scr_XSize") ("Scr_YSize") ("Style") ("Title") ("UValue") ("XSize")))
   ("FSC_ColorSelect_Kill_Notify" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s, textID" (nil))
   ("CLEANUP" pro "FSC_ColorSelect" (lib "fsc_colorselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_ColorSelect__Define" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s" (nil))
   ("FSC_ColorSelect" fun nil (lib "fsc_colorselect.pro" nil "coyote") "Result = %s(parent)" (nil ("_Extra") ("Brewer") ("Button_Text") ("CFont") ("Color") ("CT_Index") ("CT_NColors") ("Event_Func") ("Event_Pro") ("Frame") ("LabelAlign") ("LabelFont") ("LabelSize") ("Name") ("Scr_XSize") ("Scr_YSize") ("Style") ("Title") ("UValue") ("XSize")))
   ("Example_Event" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_colorselect.pro" nil "coyote") "%s" (nil))
   ("FSC_Droplist_Kill_Notify" pro nil (lib "fsc_droplist.pro" nil "coyote") "%s, droplistID" (nil))
   ("EventHandler" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("FSC_Droplist_Events" fun nil (lib "fsc_droplist.pro" nil "coyote") "Result = %s(event)" (nil))
   ("Sensitive" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, value" (nil))
   ("Resize" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, newSize" (nil ("ParentSize")))
   ("SetSelection" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, selection" (nil))
   ("SetIndex" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, index" (nil))
   ("SetValues" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s, theValues" (nil ("CurrentIndex")))
   ("GetIndex" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetSelection" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetValues" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetUValue" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetID" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("CLEANUP" pro "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_Droplist" (lib "fsc_droplist.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("debug") ("Event_Func") ("Event_Pro") ("Format") ("Index") ("Spaces") ("Title") ("UName") ("UValue") ("Value")))
   ("FSC_Droplist__DEFINE" pro nil (lib "fsc_droplist.pro" nil "coyote") "%s" (nil))
   ("FSC_Droplist" fun nil (lib "fsc_droplist.pro" nil "coyote") "Result = %s(parent)" (nil ("_Extra") ("Title") ("Value")))
   ("Example_Events" pro nil (lib "fsc_droplist.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_droplist.pro" nil "coyote") "%s" (nil))
   ("FSC_Field_WidgetFont" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s" (nil ("DEFAULT")))
   ("FSC_Field_Error_Message" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("NoName") ("Traceback")))
   ("GetLabelSize" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetTextSize" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("MoveTab" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetTabNext" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, nextID" (nil))
   ("GetTextID" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Resize" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, newsize" (nil))
   ("GetID" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Geometry" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Value" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Set_Value" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, value" (nil))
   ("Validate" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s(value)" (nil))
   ("ReturnValue" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s(inputValue)" (nil))
   ("TextEvents" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("GetProperty" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CR_Only") ("DataType") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("Focus_Events") ("Has_Focus") ("Highlight") ("Name") ("NoEdit") ("NonSensitive") ("Undefined") ("UValue") ("Value")))
   ("SetProperty" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CR_Only") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("Focus_Events") ("Highlight") ("LabelSize") ("Name") ("NoEdit") ("NonSensitive") ("Scr_XSize") ("Scr_YSize") ("Title") ("Undefined") ("UValue") ("Value") ("XSize")))
   ("SetEdit" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, editvalue" (nil))
   ("SetSensitive" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s, value" (nil))
   ("INIT" fun "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("Column") ("CR_Only") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("FieldFont") ("Focus_Events") ("Frame") ("Highlight") ("Label_Left") ("Label_Right") ("LabelFont") ("LabelSize") ("Name") ("NoEdit") ("NonSensitive") ("Positive") ("Scr_XSize") ("Scr_YSize") ("Title") ("Undefined") ("UValue") ("Value") ("XSize")))
   ("CLEANUP" pro "FSC_Field" (lib "fsc_field.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_Field_Event_Handler" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s(event)" (nil))
   ("FSC_Field_Event__Define" pro nil (lib "fsc_field.pro" nil "coyote") "%s" (nil))
   ("FSC_Field_Set_Compound_Widget_Value" pro nil (lib "fsc_field.pro" nil "coyote") "%s, tlb, value" (nil))
   ("FSC_Field_Get_Compound_Widget_Value" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s(tlb)" (nil))
   ("FSC_Field_Kill_Notify" pro nil (lib "fsc_field.pro" nil "coyote") "%s, textID" (nil))
   ("FSC_Field__Define" pro nil (lib "fsc_field.pro" nil "coyote") "%s" (nil))
   ("FSC_FIELD" fun nil (lib "fsc_field.pro" nil "coyote") "Result = %s(parent)" (nil ("_Extra") ("Column") ("CR_Only") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("FieldFont") ("Focus_Events") ("Frame") ("Highlight") ("Label_Left") ("Label_Right") ("LabelFont") ("LabelSize") ("Name") ("NoEdit") ("NonSensitive") ("Object") ("Positive") ("Scr_XSize") ("Scr_YSize") ("Title") ("Undefined") ("UValue") ("Value") ("XSize")))
   ("Example_Event" pro nil (lib "fsc_field.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_field.pro" nil "coyote") "%s, field1, field2, field3" (nil))
   ("FSC_Fileselect_WidgetFont" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s" (nil ("DEFAULT")))
   ("Directory_Events" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Filename_Events" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("GetFilename" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetNoMaxSize" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DirectoryName") ("Event_Func") ("Event_Pro") ("Filename") ("Filter") ("LabelName") ("LabelSize") ("MustExist") ("Parent") ("Read") ("SelectTitle") ("TLB") ("UValue") ("Write") ("XSize")))
   ("GetTLB" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Inspect_DirectoryName" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(dirname, textSelection)" (nil))
   ("Inspect_Filename" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename, textSelection)" (nil))
   ("LabelSize" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("MatchSize" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_FileSelect_RStrPos" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s(Expr, SubStr, Pos)" (nil))
   ("Select_File" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SetFilename" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, theName" (nil))
   ("SetProperty" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DirectoryName") ("Event_Func") ("Event_Pro") ("Filename") ("Filter") ("LabelName") ("LabelSize") ("MustExist") ("Read") ("SelectTitle") ("UValue") ("Write") ("XSize")))
   ("TextSelect" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s, selection" (nil))
   ("CLEANUP" pro "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_FileSelect" (lib "fsc_fileselect.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("DirectoryName") ("Event_Func") ("Event_Pro") ("Filename") ("Filter") ("Frame") ("LabelFont") ("LabelName") ("LabelSize") ("MustExist") ("NoMaxSize") ("Read") ("Scr_XSize") ("Selectdir") ("SelectFont") ("SelectTitle") ("TextFont") ("UValue") ("Write") ("XSize")))
   ("FSC_FileSelect__Define" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s" (nil))
   ("FSC_FileSelect_Set_Value" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, id, filename" (nil))
   ("FSC_FileSelect_Get_Value" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s(id)" (nil))
   ("CW_FileSelect__Define" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s" (nil))
   ("FSC_FileSelect_Event_Handler" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s(event)" (nil))
   ("FSC_FileSelect_Notify_Realize" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, labelID" (nil))
   ("FSC_FileSelect_Kill_Notify" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, labelID" (nil))
   ("FSC_FileSelect" fun nil (lib "fsc_fileselect.pro" nil "coyote") "Result = %s(parent)" (nil ("DirectoryName") ("Event_Func") ("Event_Pro") ("Filename") ("Filter") ("Frame") ("LabelFont") ("LabelName") ("LabelSize") ("MustExist") ("NoMaxSize") ("ObjectRef") ("Read") ("SelectDirectory") ("SelectFont") ("SelectTitle") ("TextFont") ("UValue") ("Write") ("XSize")))
   ("Example_Set_Size" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Set_Filter" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Set_Filename" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Shrink" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Print_Filename" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example_Quit" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_fileselect.pro" nil "coyote") "%s, theObject" (nil))
   ("FSC_InputField_WidgetFont" fun nil (lib "fsc_inputfield.pro" nil "coyote") "Result = %s" (nil ("DEFAULT")))
   ("FSC_InputField_ERROR_MESSAGE" fun nil (lib "fsc_inputfield.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("Error") ("Informational") ("NoName") ("Title") ("Traceback")))
   ("MoveTab" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetTabNext" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s, nextID" (nil))
   ("GetTextID" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Resize" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s, newsize" (nil))
   ("GetID" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetLabelSize" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetTextSize" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Geometry" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Get_Value" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Set_Value" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s, value" (nil ("DoubleValue") ("FloatValue") ("IntegerValue") ("LongValue") ("StringValue")))
   ("Validate" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s(value)" (nil))
   ("FSC_InputField_Event__Define" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s" (nil))
   ("ReturnValue" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s(inputValue)" (nil))
   ("TextEvents" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("FSC_InputField_Event_Handler" fun nil (lib "fsc_inputfield.pro" nil "coyote") "Result = %s(event)" (nil))
   ("GetProperty" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CR_Only") ("DataType") ("Decimal") ("Digits") ("Event_Func") ("Event_Pro") ("Focus_Events") ("Name") ("Positive") ("UValue") ("Value")))
   ("SetProperty" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("CR_Only") ("Decimal") ("Digits") ("DoubleValue") ("Event_Func") ("Event_Pro") ("FloatValue") ("Focus_Events") ("IntegerValue") ("LabelSize") ("LongValue") ("Name") ("Positive") ("Scr_XSize") ("Scr_YSize") ("Sensitive") ("StringValue") ("Title") ("UValue") ("Value") ("XSize")))
   ("INIT" fun "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("_Extra") ("Column") ("CR_Only") ("Decimal") ("Digits") ("DoubleValue") ("Event_Func") ("Event_Pro") ("FieldFont") ("FloatValue") ("Focus_Events") ("Frame") ("IntegerValue") ("LabelAlign") ("LabelFont") ("LabelSize") ("LongValue") ("Name") ("Positive") ("Row") ("Scr_XSize") ("Scr_YSize") ("StringValue") ("Title") ("UValue") ("Value") ("XSize")))
   ("FSC_InputField_Kill_Notify" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s, textID" (nil))
   ("CLEANUP" pro "FSC_InputField" (lib "fsc_inputfield.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_InputField__Define" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s" (nil))
   ("FSC_INPUTFIELD" fun nil (lib "fsc_inputfield.pro" nil "coyote") "Result = %s(parent)" (nil ("_Extra") ("Column") ("CR_Only") ("Decimal") ("Digits") ("DoubleValue") ("Event_Func") ("Event_Pro") ("FieldFont") ("FloatValue") ("Focus_Events") ("Frame") ("IntegerValue") ("LabelAlign") ("LabelFont") ("LabelSize") ("LongValue") ("Name") ("Positive") ("Row") ("Scr_XSize") ("Scr_YSize") ("StringValue") ("Title") ("UValue") ("Value") ("XSize")))
   ("Example_Event" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s, event" (nil))
   ("Example" pro nil (lib "fsc_inputfield.pro" nil "coyote") "%s" (nil))
   ("FSC_Normalize" fun nil (lib "fsc_normalize.pro" nil "coyote") "Result = %s(range)" (nil ("Position")))
   ("FSC_Pickfile" fun nil (lib "fsc_pickfile.pro" nil "coyote") "Result = %s" (nil ("_REF_EXTRA") ("DATA") ("DEMO") ("HDF") ("JPEG") ("LAST_FILE") ("LIDAR") ("NCDF") ("PNG") ("TIFF")))
   ("FSC_PLOTWINDOW_Error_Message" fun nil (lib "fsc_plotwindow.pro" nil "coyote") "Result = %s(theMessage)" (nil ("NoName") ("Traceback")))
   ("FSC_PLOTWINDOW_Normalize" fun nil (lib "fsc_plotwindow.pro" nil "coyote") "Result = %s(range)" (nil ("Position")))
   ("Refresh" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetWindowColor" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, theColor" (nil))
   ("GetUValue" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("SetColor" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, on_off" (nil))
   ("SetUnits" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, units" (nil))
   ("GetWindowLocation" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, xsize, ysize, xoffset, yoffset" (nil))
   ("SetWindowLocation" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, xsize, ysize, xoffset, yoffset" (nil))
   ("SetWindowSize" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, position" (nil))
   ("SetPageSize" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, pagesize" (nil ("Landscape") ("TLB")))
   ("GetPagePixels" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(pagesize)" (nil ("Landscape")))
   ("GetPosition" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Resize" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, event, direction" (nil))
   ("CenterPlot" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("MovePlot" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("WhichButtonReleased" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("WhichButtonPressed" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("InTarget" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(x, y)" (nil ("DIRECTION")))
   ("Realize" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("FSC_PLOTWINDOW_Notify_Realize" pro nil (lib "fsc_plotwindow.pro" nil "coyote") "%s, drawID" (nil))
   ("Process_Events" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("FSC_PLOTWINDOW_Events" pro nil (lib "fsc_plotwindow.pro" nil "coyote") "%s, event" (nil))
   ("FSC_PLOTWINDOW_Kill_Notify" pro nil (lib "fsc_plotwindow.pro" nil "coyote") "%s, drawID" (nil))
   ("CLEANUP" pro "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_PLOTWINDOW" (lib "fsc_plotwindow.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("Color") ("Debug") ("Event_Pro") ("Landscape") ("PageSize") ("Units") ("UValue") ("WindowColor") ("WindowSize")))
   ("FSC_PLOTWINDOW__DEFINE" pro nil (lib "fsc_plotwindow.pro" nil "coyote") "%s" (nil))
   ("FSC_PLOTWINDOW" fun nil (lib "fsc_plotwindow.pro" nil "coyote") "Result = %s(parent)" (nil ("Color") ("Event_Pro") ("Landscape") ("PageSize") ("Units") ("UValue") ("WindowSize")))
   ("FSC_PSCONFIG_RStrPos" fun nil (lib "fsc_psconfig__define.pro" nil "coyote") "Result = %s(Expr, SubStr, Pos)" (nil))
   ("FSC_PSCONFIG_CenterTLB" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s, tlb" (nil))
   ("FSC_PSCONFIG_Error_Message" fun nil (lib "fsc_psconfig__define.pro" nil "coyote") "Result = %s(theMessage)" (nil ("NoName") ("Traceback")))
   ("FSC_PSCONFIG_Events" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s, event" (nil))
   ("FSC_PSCONFIG_Normalize" fun nil (lib "fsc_psconfig__define.pro" nil "coyote") "Result = %s(range)" (nil ("Position")))
   ("FSC_PSCONFIG_Help_Event" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s, event" (nil))
   ("FSC_PSCONFIG_Restore_Device" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s, id" (nil))
   ("Accept" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Cancel" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ClearStyles" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Color" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("CMYK" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Construct_Full_Filename" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("DefaultList" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Defaults" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Encapsulate" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("FontType" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("MetricStyle" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("GetKeywords" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("FontType")))
   ("GetName" fun "FSC_PSConfig" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "FSC_PSConfig" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Extra") ("Name")))
   ("GetSizes" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GUI" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Accept_Button_Name") ("Cancel") ("FontInfo") ("FontType") ("Group_Leader") ("NoBlock")))
   ("GUIFont" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Accept_Button_Name") ("Cancel") ("FontType") ("Group_Leader") ("NoBlock") ("NoFont")))
   ("Help" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("PageDimensions" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Orientation" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("PageSize" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("PlotWindow" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Revert" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SaveConfiguration" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetDefault" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, defaultname" (nil))
   ("StatusLight" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, safe" (nil))
   ("StyleButtons" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("Units" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("UpdateDisplay" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("UpdateFontStyle" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Clear")))
   ("UpdateSizes" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, xsize, ysize, xoffset, yoffset" (nil))
   ("WindowSize" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SetProperty" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("AvantGarde") ("Bits_per_Pixel") ("Bkman") ("Bold") ("BookStyle") ("CMYK") ("Color") ("Courier") ("DefaultSetup") ("Demi") ("Directory") ("Encapsulated") ("Filename") ("FontSize") ("FontType") ("Helvetica") ("Inches") ("Isolatin") ("Italic") ("Landscape") ("LanguageLevel") ("Light") ("Medium") ("Metric") ("Name") ("Narrow") ("Oblique") ("Palatino") ("Preview") ("Schoolbook") ("Set_Font") ("Symbol") ("Times") ("TrueType") ("UpDate") ("XSize") ("YOffset") ("YSize") ("ZapfChancery") ("ZapfDingbats")))
   ("CLEANUP" pro "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "FSC_PSCONFIG" (lib "fsc_psconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("AvantGarde") ("Bits_per_Pixel") ("Bkman") ("Bold") ("BookStyle") ("CMYK") ("Color") ("Courier") ("Debug") ("Decomposed") ("Demi") ("Directory") ("Encapsulated") ("Filename") ("FontSize") ("FontType") ("Helvetica") ("Inches") ("Isolatin") ("Italic") ("Landscape") ("LanguageLevel") ("Medium") ("Metric") ("Name") ("Narrow") ("Oblique") ("Palatino") ("Preview") ("Schoolbook") ("Set_Font") ("Symbol") ("Times") ("TrueType") ("XOffset") ("XSize") ("YOffset") ("YSize") ("ZapfChancery") ("ZapfDingbats")))
   ("FSC_PSCONFIG__DEFINE" pro nil (lib "fsc_psconfig__define.pro" nil "coyote") "%s" (nil))
   ("FSC_PS_SETUP__DEFINE" pro nil (lib "fsc_ps_setup__define.pro" nil "coyote") "%s" (nil))
   ("FSC_Resize_Image" fun nil (lib "fsc_resize_image.pro" nil "coyote") "Result = %s(image, cols, rows)" (nil ("INTERPOLATE") ("MINUS_ONE")))
   ("FSC_ZImage_ZoomDied" pro nil (lib "fsc_zimage.pro" nil "coyote") "%s, zoomID" (nil))
   ("FSC_ZImage_BoxColor" pro nil (lib "fsc_zimage.pro" nil "coyote") "%s, event" (nil))
   ("FSC_ZImage_LoadColors" pro nil (lib "fsc_zimage.pro" nil "coyote") "%s, event" (nil))
   ("FSC_ZImage_Quit" pro nil (lib "fsc_zimage.pro" nil "coyote") "%s, event" (nil))
   ("FSC_ZImage_Cleanup" pro nil (lib "fsc_zimage.pro" nil "coyote") "%s, tlb" (nil))
   ("FSC_ZImage_Factor" pro nil (lib "fsc_zimage.pro" nil "coyote") "%s, event" (nil))
   ("FSC_ZImage_DrawEvents" pro nil (lib "fsc_zimage.pro" nil "coyote") "%s, event" (nil))
   ("FSC_ZImage" pro nil (lib "fsc_zimage.pro" nil "coyote") "%s, image" (nil ("BOTTOM") ("BOXCOLOR") ("GROUP_LEADER") ("MAXVALUE") ("MINVALUE") ("NCOLORS") ("NOINTERPOLATE") ("SCALE") ("TOP")))
   ("FSC_ZPlot_Cleanup" pro nil (lib "fsc_zplot.pro" nil "coyote") "%s, tlb" (nil))
   ("FSC_ZPlot_Resize" pro nil (lib "fsc_zplot.pro" nil "coyote") "%s, event" (nil))
   ("FSC_ZPlot_Events" pro nil (lib "fsc_zplot.pro" nil "coyote") "%s, event" (nil))
   ("FSC_ZPlot_Drawbox" pro nil (lib "fsc_zplot.pro" nil "coyote") "%s, event" (nil))
   ("FSC_ZPlot" pro nil (lib "fsc_zplot.pro" nil "coyote") "%s, x, y" (nil ("_Extra") ("ArrowColor") ("AxisColor") ("Background") ("Color") ("Group_Leader") ("SymColor") ("XLog") ("XSize") ("YLog") ("YSize")))
   ("GaussScl" fun nil (lib "gaussscl.pro" nil "coyote") "Result = %s(image)" (nil ("MAX") ("MIN") ("NEGATIVE") ("OMAX") ("OMIN") ("SIGMA")))
   ("GetDecomposedState" fun nil (lib "getdecomposedstate.pro" nil "coyote") "Result = %s" (nil ("DEPTH")))
   ("GETIMAGE_NULL_EVENTS" pro nil (lib "getimage.pro" nil "coyote") "%s, event" (nil))
   ("GETIMAGE_DIMS_EVENTS" pro nil (lib "getimage.pro" nil "coyote") "%s, event" (nil))
   ("GETIMAGE_XDR_EVENTS" pro nil (lib "getimage.pro" nil "coyote") "%s, event" (nil))
   ("GETIMAGE_FIND_COYOTE" fun nil (lib "getimage.pro" nil "coyote") "Result = %s" (nil))
   ("GETIMAGE_EVENT" pro nil (lib "getimage.pro" nil "coyote") "%s, event" (nil))
   ("GETIMAGE" fun nil (lib "getimage.pro" nil "coyote") "Result = %s(filename)" (nil ("Cancel") ("Catch") ("DataType") ("Dimensions") ("Directory") ("Endian") ("FRAMES") ("Group_Leader") ("HeadData") ("Header") ("Parent") ("XDR") ("XOffSet") ("XSIZE") ("YOffSet") ("YSIZE")))
   ("GetPrimaryScreenSize" fun nil (lib "getprimaryscreensize.pro" nil "coyote") "Result = %s" (nil ("Exclude_Taskbar")))
   ("Get_Object_ID" fun nil (lib "get_object_id.pro" nil "coyote") "Result = %s(theObject)" (nil ("NUMBER")))
   ("GmaScl" fun nil (lib "gmascl.pro" nil "coyote") "Result = %s(image)" (nil ("GAMMA") ("MAX") ("MIN") ("NEGATIVE") ("OMAX") ("OMIN")))
   ("Greek_Example" pro nil (lib "greek.pro" nil "coyote") "%s" (nil ("PS") ("UNICODE")))
   ("Greek" fun nil (lib "greek.pro" nil "coyote") "Result = %s(letter)" (nil ("CAPITAL") ("EXAMPLE") ("PS") ("UNICODE")))
   ("GridPositions" fun nil (lib "gridpositions.pro" nil "coyote") "Result = %s(columns, rows)" (nil ("_EXTRA") ("INCHES") ("LANDSCAPE") ("ORDER") ("XEXTENT") ("XMARGIN") ("XSIZE") ("YEXTENT") ("YMARGIN") ("YSIZE")))
   ("HasImageMagick" fun nil (lib "hasimagemagick.pro" nil "coyote") "Result = %s" (nil ("VERSION")))
   ("Clamp" pro "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s, datarange" (nil))
   ("INIT" fun "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("FontSize") ("Major") ("Minor") ("Name") ("NColors") ("Palette") ("Position") ("Range") ("Text") ("Title")))
   ("Cleanup" pro "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Ref_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Text") ("Title") ("Transform")))
   ("SetProperty" pro "HColorBar" (lib "hcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Text") ("Title") ("Transform")))
   ("HColorBar__Define" pro nil (lib "hcolorbar__define.pro" nil "coyote") "%s" (nil))
   ("TEST_ISHDF" fun nil (lib "hdfread.pro" nil "coyote") "Result = %s(filename)" (nil))
   ("HDFREAD" pro nil (lib "hdfread.pro" nil "coyote") "%s, filename" (nil))
   ("HDFWRITE" pro nil (lib "hdfwrite.pro" nil "coyote") "%s, filename" (nil))
   ("HELP_VAR_UNDEFINE" pro nil (lib "help_var.pro" nil "coyote") "%s, varname" (nil))
   ("HELP_VAR" pro nil (lib "help_var.pro" nil "coyote") "%s" (nil))
   ("HISTOMATCH_ERROR_MESSAGE" fun nil (lib "histomatch.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("Error") ("Informational") ("NoName") ("Title") ("Traceback")))
   ("HISTOMATCH" fun nil (lib "histomatch.pro" nil "coyote") "Result = %s(image, histogram_to_match)" (nil))
   ("Example" pro nil (lib "histomatch.pro" nil "coyote") "%s" (nil))
   ("ImageSelect_WindowSize" fun nil (lib "imageselect.pro" nil "coyote") "Result = %s(image)" (nil ("XSIZE") ("YSIZE")))
   ("ImageSelect_Action" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect_BSort" fun nil (lib "imageselect.pro" nil "coyote") "Result = %s(Array, Asort)" (nil ("INFO") ("REVERSE")))
   ("ImageSelect_Cleanup" pro nil (lib "imageselect.pro" nil "coyote") "%s, tlb" (nil))
   ("ImageSelect_FileExtension" fun nil (lib "imageselect.pro" nil "coyote") "Result = %s(filename)" (nil))
   ("ImageSelect_FilenameEvents" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect_FlipImage" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect_ListEvents" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect_ReadFiles" pro nil (lib "imageselect.pro" nil "coyote") "%s, extension, filename, info, fileinfo, image, ok, type" (nil ("_Extra")))
   ("ImageSelect_SetFilter" pro nil (lib "imageselect.pro" nil "coyote") "%s, event" (nil))
   ("ImageSelect" fun nil (lib "imageselect.pro" nil "coyote") "Result = %s" (nil ("_Extra") ("BMP") ("Cancel") ("Demo") ("Dicom") ("Directory") ("Examples") ("Exclude") ("FHeader") ("FileInfo") ("Filename") ("Filter") ("FITS") ("Flipimage") ("GEOTIFF") ("GIF") ("Group_Leader") ("J2000") ("J2K") ("JPEG") ("LISTXSIZE") ("OFFSETS") ("ONLY2D") ("ONLY3D") ("OutDirectory") ("OutFilename") ("Palette") ("PGM") ("PICT") ("PNG") ("PPM") ("PreviewSize") ("SILENT") ("TIFF") ("TITLE")))
   ("Image_Blend_Output" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Exit" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Foreground_Colors" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Background_Colors" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_CleanUp" pro nil (lib "image_blend.pro" nil "coyote") "%s, id" (nil))
   ("Image_Blend_Slider" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Expose" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend_Event" pro nil (lib "image_blend.pro" nil "coyote") "%s, event" (nil))
   ("Image_Blend" pro nil (lib "image_blend.pro" nil "coyote") "%s, backgroundImage, foregroundImage" (nil ("Colortable")))
   ("Image_Dimensions" fun nil (lib "image_dimensions.pro" nil "coyote") "Result = %s(image)" (nil ("AlphaChannel") ("TrueIndex") ("XIndex") ("XSize") ("YIndex") ("YSize")))
   ("Inside" fun nil (lib "inside.pro" nil "coyote") "Result = %s(x, y, xpts, ypts)" (nil ("INDEX")))
   ("iXYOUTS" pro nil (lib "ixyouts.pro" nil "coyote") "%s, theString" (nil ("_EXTRA") ("ID")))
   ("JD2Time" fun nil (lib "jd2time.pro" nil "coyote") "Result = %s(jdnumber, jdyear)" (nil))
   ("JN2Time" fun nil (lib "jn2time.pro" nil "coyote") "Result = %s(jnumber)" (nil ("SHORT")))
   ("LeftJustify" fun nil (lib "leftjustify.pro" nil "coyote") "Result = %s(theString, theWidth)" (nil))
   ("ADD" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item, index" (nil ("After") ("Before") ("Error") ("No_Copy") ("Replace")))
   ("ADD_AFTER" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item, index" (nil ("ERROR") ("NO_COPY")))
   ("ADD_BEFORE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item, index" (nil ("ERROR") ("NO_COPY")))
   ("ADD_TO_END" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item" (nil ("ERROR") ("NO_COPY")))
   ("DELETE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, index" (nil ("All") ("DESTROY") ("ERROR")))
   ("DELETE_LAST_NODE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DESTROY") ("ERROR")))
   ("DELETE_NODE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, index" (nil ("DESTROY") ("ERROR")))
   ("DELETE_NODES" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DESTROY") ("ERROR")))
   ("GET_COUNT" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GET_ITEM" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(index)" (nil ("ALL") ("Dereference") ("ERROR") ("ItemPtr") ("NO_COPY")))
   ("GET_NODE" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(index)" (nil ("ERROR")))
   ("GET_VALUE" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(index)" (nil ("ERROR") ("NO_COPY")))
   ("HAVE_ITEM" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(index)" (nil ("ERROR")))
   ("HELP" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Print")))
   ("MOVE_NODE" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, nodeIndex, location" (nil ("Before") ("Error")))
   ("REPLACE_ITEM" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s, item, index" (nil ("ERROR") ("NO_COPY")))
   ("CLEANUP" pro "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "LINKEDLIST" (lib "linkedlist__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(item)" (nil))
   ("LINKEDLIST__DEFINE" pro nil (lib "linkedlist__define.pro" nil "coyote") "%s" (nil))
   ("List_Selector_Button_Events" pro nil (lib "list_selector.pro" nil "coyote") "%s, event" (nil))
   ("List_Selector_Click_Events" pro nil (lib "list_selector.pro" nil "coyote") "%s, event" (nil))
   ("List_Selector_Size_Events" pro nil (lib "list_selector.pro" nil "coyote") "%s, event" (nil))
   ("List_Selector_Test" pro nil (lib "list_selector.pro" nil "coyote") "%s" (nil ("LIST_COUNTER") ("MORENAMES") ("SELECTED_INDICES")))
   ("List_Selector" fun nil (lib "list_selector.pro" nil "coyote") "Result = %s(theNames)" (nil ("ALL") ("CANCEL") ("COUNT") ("GROUP_LEADER") ("LABEL") ("LIST_COUNTER") ("NUMCOLS") ("SELECTED_INDICES") ("TITLE")))
   ("LogScl" fun nil (lib "logscl.pro" nil "coyote") "Result = %s(image)" (nil ("EXPONENT") ("MAX") ("MEAN") ("MIN") ("NEGATIVE") ("OMAX") ("OMIN")))
   ("Make_Transparent_Image" fun nil (lib "make_transparent_image.pro" nil "coyote") "Result = %s(image)" (nil ("COLOR") ("FILENAME") ("SAVE_PNG") ("WSET")))
   ("Map_GSHHS_Shoreline" pro nil (lib "map_gshhs_shoreline.pro" nil "coyote") "%s, filename" (nil ("_EXTRA") ("COLOR") ("FILL") ("LAND_COLOR") ("LEVEL") ("MAP_PROJECTION") ("MINAREA") ("OUTLINE") ("WATER_COLOR")))
   ("MaxMin" pro nil (lib "maxmin.pro" nil "coyote") "%s, variable" (nil ("NAN") ("TEXT")))
   ("MaxWindowSize" fun nil (lib "maxwindowsize.pro" nil "coyote") "Result = %s" (nil ("MONITOR_RESOLUTION")))
   ("MPI_Axis_Widget_Events" pro nil (lib "mpi_axis.pro" nil "coyote") "%s, Event" (nil))
   ("MPI_Axis" fun nil (lib "mpi_axis.pro" nil "coyote") "Result = %s" (nil ("_Extra") ("Group_Leader") ("Only_Style") ("Only_Tick") ("Short") ("XAxis") ("YAxis")))
   ("MPI_Axis_FindTLB" fun nil (lib "mpi_axis__define.pro" nil "coyote") "Result = %s(startID)" (nil))
   ("MPI_Axis_CenterTLB" pro nil (lib "mpi_axis__define.pro" nil "coyote") "%s, tlb" (nil))
   ("MPI_Axis_Error_Message" fun nil (lib "mpi_axis__define.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("NoName") ("Traceback")))
   ("GetProperty" pro "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Name")))
   ("ResizeTLB" pro "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetTLB" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetKeywords" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("UpdateObject" pro "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CheckEvent" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("LowRange" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("HighRange" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("ResetRange" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("AxisTitle" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("AxisThickness" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("MajorTicks" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("TickLength" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("CharSize" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("MinorTicks" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("TickFormat" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("GridStyle" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetExactStyle" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetExtendStyle" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetHideStyle" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetBoxStyle" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetZeroStyle" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetLogStyle" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("TickOptions" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("DismissDialog" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("AcceptTickOptions" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("StyleOptions" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("MPI_Axis_Widget_Events" fun nil (lib "mpi_axis__define.pro" nil "coyote") "Result = %s(event)" (nil))
   ("GUI" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(parent)" (nil ("Defaultfont") ("Event_Func") ("Event_Pro") ("LabelFont") ("Only_Style") ("Only_Tick") ("Short_Form") ("UValue")))
   ("SetProperty" pro "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("AutoKeywords") ("AutoRange") ("Charsize") ("Defaultfont") ("Exact") ("Extend") ("Gridstyle") ("Hide") ("LabelFont") ("Log") ("Margin") ("Minor") ("Name") ("NoBox") ("NoZero") ("Range") ("Style") ("Thick") ("Tickformat") ("Tickinterval") ("Ticklayout") ("Ticklen") ("Tickname") ("Ticks") ("Tickunits") ("Tickv") ("Title") ("XAxis") ("YAxis") ("ZAxis")))
   ("Init" fun "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("AutoKeywords") ("AutoRange") ("Charsize") ("Exact") ("Extend") ("Gridstyle") ("Hide") ("Log") ("Margin") ("Minor") ("Name") ("NoBox") ("NoZero") ("Range") ("Style") ("Thick") ("Tickformat") ("Tickinterval") ("Ticklayout") ("Ticklen") ("Tickname") ("Ticks") ("Tickunits") ("Tickv") ("Title") ("XAxis") ("YAxis") ("ZAxis")))
   ("Cleanup" pro "MPI_Axis" (lib "mpi_axis__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("MPI_Axis_Notify_Realize" pro nil (lib "mpi_axis__define.pro" nil "coyote") "%s, tlb" (nil))
   ("MPI_Axis_GetValue" fun nil (lib "mpi_axis__define.pro" nil "coyote") "Result = %s(id)" (nil))
   ("MPI_Axis_SetValue" pro nil (lib "mpi_axis__define.pro" nil "coyote") "%s, value" (nil))
   ("MPI_Axis__Define" pro nil (lib "mpi_axis__define.pro" nil "coyote") "%s" (nil))
   ("MPI_Overplot__Define" pro nil (lib "mpi_plot.pro" nil "coyote") "%s" (nil))
   ("MPI_Plot_Clear_Overplots" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, event" (nil))
   ("MPI_Plot_DrawThePlot" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, infoptr" (nil ("Overplot")))
   ("MPI_Plot_PostScript" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, event" (nil))
   ("MPI_Plot_Print" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, event" (nil))
   ("MPI_Plot_SaveAs" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, event" (nil))
   ("MPI_Plot_Quit" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, event" (nil))
   ("MPI_Plot_Cleanup" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, tlb" (nil))
   ("MPI_Plot_Configure_Button" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, event" (nil))
   ("MPI_Plot_Resize" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, event" (nil))
   ("MPI_Plot_Configuration_Events" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, event" (nil))
   ("MPI_Plot" pro nil (lib "mpi_plot.pro" nil "coyote") "%s, x, y" (nil ("_Extra") ("Color") ("DataColor") ("Overplot") ("PSym") ("Title") ("XLog") ("XTitle") ("YLog") ("YTitle")))
   ("MPI_PlotConfig_CenterTLB" pro nil (lib "mpi_plotconfig__define.pro" nil "coyote") "%s, tlb" (nil))
   ("MPI_PlotConfig_Error_Message" fun nil (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("NoName") ("Traceback")))
   ("Symbol" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(number)" (nil))
   ("AxisObjectEvents" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetPlotKeywords" pro "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Obj ->[%s::]%s, plotkeywords" (nil))
   ("Destroy" pro "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetTLB" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("SendEvent" pro "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetKeywords" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("UpdateObject" pro "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CheckEvent" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetPlotPosition" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetTitle" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetSubTitle" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetFont" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetLinestyle" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetSymbol" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetBackgroundColor" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetColor" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetDataColor" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetLineThick" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetCharThick" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetSymSize" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetCharSize" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SymbolWithLine" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("SetTickLen" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("DismissDialog" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("AcceptDialog" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("ApplyDialog" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(event)" (nil))
   ("GUI" pro "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("All_events") ("Block") ("Defaultfont") ("Group_Leader") ("LabelDefaultSize") ("LabelFont") ("NotifyID") ("XLongForm") ("YLongForm")))
   ("SetProperty" pro "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("Background") ("Charsize") ("Charthick") ("Color") ("Datacolor") ("Font") ("Linestyle") ("NoAxisInfo") ("Position") ("PSym") ("Subtitle") ("Symsize") ("Thick") ("Ticklen") ("Title") ("UseDataColor") ("XAxis") ("YAxis")))
   ("Init" fun "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_Extra") ("Background") ("Charsize") ("Charthick") ("Color") ("Datacolor") ("Font") ("Linestyle") ("NoAxisInfo") ("Position") ("PSym") ("Subtitle") ("Symsize") ("Thick") ("Ticklen") ("Title") ("UseDataColor") ("XAxis") ("YAxis")))
   ("MPI_PlotConfig_GetValue" fun nil (lib "mpi_plotconfig__define.pro" nil "coyote") "Result = %s(id)" (nil))
   ("MPI_PlotConfig_SetValue" pro nil (lib "mpi_plotconfig__define.pro" nil "coyote") "%s, value" (nil))
   ("MPI_PlotConfig_Widget_Events" pro nil (lib "mpi_plotconfig__define.pro" nil "coyote") "%s, event" (nil))
   ("Cleanup" pro "MPI_PlotConfig" (lib "mpi_plotconfig__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("MPI_PlotConfig__Define" pro nil (lib "mpi_plotconfig__define.pro" nil "coyote") "%s" (nil))
   ("MS_FileTime" fun nil (lib "ms_filetime.pro" nil "coyote") "Result = %s(fileTime)" (nil ("AS_STRING")))
   ("Name_Selector_Button_Events" pro nil (lib "name_selector.pro" nil "coyote") "%s, event" (nil))
   ("Name_Selector_Null_Events" pro nil (lib "name_selector.pro" nil "coyote") "%s, event" (nil))
   ("Name_Selector_Size_Events" pro nil (lib "name_selector.pro" nil "coyote") "%s, event" (nil))
   ("Name_Selector_Test" pro nil (lib "name_selector.pro" nil "coyote") "%s" (nil ("MORENAMES") ("NUMCOLS")))
   ("Name_Selector" fun nil (lib "name_selector.pro" nil "coyote") "Result = %s(theNames)" (nil ("ALL") ("CANCEL") ("COUNT") ("GROUP_LEADER") ("LABEL") ("NUMCOLS") ("TITLE")))
   ("GetName" fun "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" fun "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisProperty)" (nil))
   ("GetValue" fun "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("DATATYPE")))
   ("ParseAttribute" pro "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CLEANUP" pro "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_Attribute" (lib "ncdf_attribute__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName, parent)" (nil ("VARNAME")))
   ("NCDF_Attribute__DEFINE" pro nil (lib "ncdf_attribute__define.pro" nil "coyote") "%s, class" (nil))
   ("NCDF_BROWSER" pro nil (lib "ncdf_browser.pro" nil "coyote") "%s, filename" (nil ("EXTENSION") ("NO_NEW_FILE") ("NO_READ_ON_PARSE") ("TITLE") ("XOFFSET") ("YOFFSET")))
   ("NCDF_CastDataType" fun nil (lib "ncdf_castdatatype.pro" nil "coyote") "Result = %s(variable)" (nil ("TNAME") ("TYPE")))
   ("FindByID" fun "NCDF_Container" (lib "ncdf_container__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisID)" (nil ("COUNT")))
   ("FindByName" fun "NCDF_Container" (lib "ncdf_container__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(searchName)" (nil ("_Extra") ("Case_Sensitive") ("Count") ("RegExp")))
   ("NCDF_Container__DEFINE" pro nil (lib "ncdf_container__define.pro" nil "coyote") "%s, class" (nil))
   ("Browse" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("NO_NEW_FILE") ("SUCCESS") ("TITLE") ("XOFFSET") ("YOFFSET")))
   ("CleanParsedStructures" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("EventHandler" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("FindDimensions" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(fileID, varID)" (nil))
   ("Destroy_From_Browser" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetAttrNames" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("ListAttrNames" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetVarNames" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("ListVarNames" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetVarAttrNames" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theVariable)" (nil))
   ("OpenNewFile" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("OpenFile" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, filename" (nil))
   ("ParseFile" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Parse_HDF_File" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("Parse_HDF_EOS_File" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("ReadAttribute" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theAttribute)" (nil ("SUCCESS")))
   ("ReadAttributeFromGUI" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadAttributeFromGUI_Events" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadDimension" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(dimensionName)" (nil ("SUCCESS")))
   ("ReadFile" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theFile)" (nil ("SUCCESS")))
   ("ReadFileFromGUI" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadGlobalAttr" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("SUCCESS")))
   ("ReadVariable" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theVariable)" (nil ("COUNT") ("FILLVALUE") ("MISSINGINDICES") ("OFFSET") ("START") ("STRIDE") ("SUCCESS")))
   ("ReadVariableFromGUI" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadVarAttr" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theVariableName, theAttributeName)" (nil))
   ("ReadVariableFromGUI_Events" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadVariableWithAttr" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(theVariable)" (nil ("SUCCESS")))
   ("ReadVarPlusFromGUI" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("ReadVarPlusFromGUI_Events" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("SelectionInTree" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("CLEANUP" pro "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_DATA" (lib "ncdf_data__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename)" (nil ("BROWSE") ("DESTROY_FROM_BROWSER") ("EXTENSION") ("NO_NEW_FILE") ("NO_READ_ON_PARSE")))
   ("NCDF_DATA_ATTRIBUTE__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s" (nil))
   ("NCDF_DATA_DIMENSION__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s" (nil))
   ("NCDF_DATA_VARIABLE__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s" (nil))
   ("NCDF_DATA_SWATH__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s" (nil))
   ("NCDF_DATA_WIDGET_CLEANUP" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s, tlb" (nil))
   ("NCDF_DATA_WIDGET_EVENTS" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s, event" (nil))
   ("NCDF_DATA__DEFINE" pro nil (lib "ncdf_data__define.pro" nil "coyote") "%s, class" (nil))
   ("GetID" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetName" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetSize" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetUnlimited" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisProperty)" (nil))
   ("GetValue" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("ParseDimension" pro "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CLEANUP" pro "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_Dimension" (lib "ncdf_dimension__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(dimName, parent)" (nil))
   ("NCDF_Dimension__DEFINE" pro nil (lib "ncdf_dimension__define.pro" nil "coyote") "%s, class" (nil))
   ("NCDF_File_Examples" pro nil (lib "ncdf_file_examples.pro" nil "coyote") "%s" (nil))
   ("Browse" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("TITLE") ("XOFFSET") ("YOFFSET")))
   ("Close_File" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CreateVarObj" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName" (nil))
   ("CreateAttrObj" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName" (nil))
   ("CreateDimObj" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, dimensionName" (nil))
   ("CopyVarAttrTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, attrName, destObj" (nil))
   ("CopyVariableTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, destObj" (nil))
   ("CopyVarDataTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, destObj" (nil ("COUNT") ("OFFSET") ("STRIDE")))
   ("CopyVarDefTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, destObj" (nil))
   ("CopyGlobalAttrTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName, destObj" (nil))
   ("CopyDimTo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, dimName, destObj" (nil))
   ("GetDimNames" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetDimValue" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(dimName)" (nil))
   ("GetFileID" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetGlobalAttrNames" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetGlobalAttrValue" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName)" (nil ("DATATYPE")))
   ("GetProperty" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("ALL") ("ATTRNAMES") ("DEFINE") ("DIMENSIONS") ("DIMNAMES") ("ERRORLOGGER") ("FILEHASBEENPARSED") ("FILEID") ("FILENAME") ("N_ATTRS") ("N_DIMS") ("N_VARS") ("UNLIMITED") ("VARNAMES") ("WRITABLE")))
   ("GetProperty" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisProperty)" (nil))
   ("GetVarAttrNames" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName)" (nil ("COUNT")))
   ("GetVarAttrValue" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName, attrName)" (nil ("DATATYPE")))
   ("GetVarNames" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetVarData" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName)" (nil ("ADD_OFFSET") ("COUNT") ("DATATYPE") ("FILLVALUE") ("MISSINGINDICES") ("OFFSET") ("SCALE_FACTOR") ("STRIDE")))
   ("GetVarInfo" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName)" (nil))
   ("HasGlobalAttr" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName)" (nil ("OBJECT")))
   ("HasDim" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(dimName)" (nil ("OBJECT")))
   ("HasVar" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName)" (nil ("OBJECT")))
   ("HasVarAttr" fun "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName, varAttrName)" (nil ("OBJECT")))
   ("PrintFileInfo" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, outputFile" (nil))
   ("ParseFile" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("SetMode" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("DATA") ("DEFINE")))
   ("Sync" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("WriteVarData" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, data" (nil ("COUNT") ("OFFSET") ("STRIDE")))
   ("WriteVarDef" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, dimNames" (nil ("DATATYPE") ("OBJECT")))
   ("WriteDim" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, dimName, dimSize" (nil ("OBJECT") ("UNLIMITED")))
   ("WriteGlobalAttr" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName, attrValue" (nil ("DATATYPE") ("OBJECT")))
   ("WriteVarAttr" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s, varName, attrName, attrValue" (nil ("DATATYPE")))
   ("CLEANUP" pro "NCDF_File" (lib "ncdf_file__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_FILE" (lib "ncdf_file__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(filename)" (nil ("ALERT") ("BROWSE") ("CLOBBER") ("CREATE") ("DELETE_ON_DESTROY") ("ERRORLOGGERNAME") ("MODIFY") ("NOCLUTTER") ("TIMESTAMP")))
   ("NCDF_File__DEFINE" pro nil (lib "ncdf_file__define.pro" nil "coyote") "%s, class" (nil))
   ("NCDF_IsValidFile" fun nil (lib "ncdf_isvalidfile.pro" nil "coyote") "Result = %s(filename)" (nil))
   ("AddAttr" pro "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Obj ->[%s::]%s, attrName, attrValue" (nil ("DATATYPE")))
   ("GetAttrNames" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetAttrValue" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName)" (nil ("DATATYPE")))
   ("GetDimIDs" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetDimNames" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetDimSizes" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("COUNT")))
   ("GetID" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetInfo" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetName" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("GetProperty" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(thisProperty)" (nil))
   ("GetValue" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("ADD_OFFSET") ("COUNT") ("DATATYPE") ("FILLVALUE") ("MISSINGINDICES") ("OFFSET") ("SCALE_FACTOR") ("STRIDE")))
   ("HasAttr" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(attrName)" (nil ("OBJECT")))
   ("ParseVariable" pro "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("CLEANUP" pro "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "NCDF_Variable" (lib "ncdf_variable__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(varName, parent)" (nil))
   ("NCDF_Variable__DEFINE" pro nil (lib "ncdf_variable__define.pro" nil "coyote") "%s, class" (nil))
   ("Number_Formatter" fun nil (lib "number_formatter.pro" nil "coyote") "Result = %s(number)" (nil ("DECIMALS")))
   ("Object_Shade_Surf_Cleanup" pro nil (lib "object_shade_surf.pro" nil "coyote") "%s, tlb" (nil))
   ("Object_Shade_Surf_Draw_Events" pro nil (lib "object_shade_surf.pro" nil "coyote") "%s, event" (nil))
   ("Object_Shade_Surf_Resize" pro nil (lib "object_shade_surf.pro" nil "coyote") "%s, event" (nil))
   ("Object_Shade_Surf_Style" pro nil (lib "object_shade_surf.pro" nil "coyote") "%s, event" (nil))
   ("Object_Shade_Surf_Exit" pro nil (lib "object_shade_surf.pro" nil "coyote") "%s, event" (nil))
   ("Object_Shade_Surf" pro nil (lib "object_shade_surf.pro" nil "coyote") "%s, data, x, y" (nil ("Style")))
   ("OWindow_Cleanup" pro nil (lib "owindow.pro" nil "coyote") "%s, tlb" (nil))
   ("OWindow_Quit" pro nil (lib "owindow.pro" nil "coyote") "%s, event" (nil))
   ("OWindow_Event" pro nil (lib "owindow.pro" nil "coyote") "%s, event" (nil))
   ("OWindow" fun nil (lib "owindow.pro" nil "coyote") "Result = %s(thisView)" (nil ("Group_Leader") ("Title") ("XSize") ("YSize")))
   ("PickColor_CenterTLB" pro nil (lib "pickcolor.pro" nil "coyote") "%s, tlb" (nil))
   ("PickColor_Select_Color" pro nil (lib "pickcolor.pro" nil "coyote") "%s, event" (nil))
   ("PickColor_Sliders" pro nil (lib "pickcolor.pro" nil "coyote") "%s, event" (nil))
   ("PickColor_Buttons" pro nil (lib "pickcolor.pro" nil "coyote") "%s, event" (nil))
   ("PickColor" fun nil (lib "pickcolor.pro" nil "coyote") "Result = %s(currentColorIndex)" (nil ("BREWER") ("Cancel") ("CurrentColor") ("Group_Leader") ("Names") ("StartIndex") ("Title")))
   ("PickColorName_CenterTLB" pro nil (lib "pickcolorname.pro" nil "coyote") "%s, tlb" (nil))
   ("PickColorName_RGB_to_24Bit" fun nil (lib "pickcolorname.pro" nil "coyote") "Result = %s(number)" (nil))
   ("PickColorName_Count_Rows" fun nil (lib "pickcolorname.pro" nil "coyote") "Result = %s(filename)" (nil ("MaxRows")))
   ("PickColorName_Select_Color" pro nil (lib "pickcolorname.pro" nil "coyote") "%s, event" (nil))
   ("PickColorName_Buttons" pro nil (lib "pickcolorname.pro" nil "coyote") "%s, event" (nil))
   ("PickColorName" fun nil (lib "pickcolorname.pro" nil "coyote") "Result = %s(theName)" (nil ("Bottom") ("Brewer") ("Cancel") ("Columns") ("Filename") ("Group_Leader") ("Index") ("Title")))
   ("PrecipMap_Annotate" fun nil (lib "precipmap.pro" nil "coyote") "Result = %s(axis, index, value)" (nil))
   ("PrecipMap" pro nil (lib "precipmap.pro" nil "coyote") "%s, filename" (nil))
   ("PrintPath" pro nil (lib "printpath.pro" nil "coyote") "%s" (nil))
   ("PRINTWINDOW_PSWINDOW_ASPECT" fun nil (lib "printwindow.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("PRINTWINDOW_PSWINDOW" fun nil (lib "printwindow.pro" nil "coyote") "Result = %s" (nil ("CM") ("Fudge") ("LANDSCAPE") ("MARGIN") ("PageSize") ("Printer") ("XFudge") ("YFudge")))
   ("PrintWindow_Error" fun nil (lib "printwindow.pro" nil "coyote") "Result = %s(theMessage)" (nil ("NoName") ("Traceback")))
   ("PrintWindow" pro nil (lib "printwindow.pro" nil "coyote") "%s, wid" (nil ("Landscape") ("PageSize") ("RGB_Error")))
   ("ProgramRootDir" fun nil (lib "programrootdir.pro" nil "coyote") "Result = %s" (nil ("NoMark") ("OneUp") ("TwoUp")))
   ("PROGRESSBAR_Cleanup" pro nil (lib "progressbar__define.pro" nil "coyote") "%s, tlb" (nil))
   ("PROGRESSBAR_Error_Message" fun nil (lib "progressbar__define.pro" nil "coyote") "Result = %s(theMessage)" (nil ("_Extra") ("Error") ("Informational") ("NoName") ("Title") ("Traceback")))
   ("PROGRESSBAR_Event" pro nil (lib "progressbar__define.pro" nil "coyote") "%s, event" (nil))
   ("CheckButton" fun "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("ACCEPT") ("CANCEL")))
   ("CheckCancel" fun "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Destroy" pro "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("BACKGROUND") ("COLOR") ("FAST_LOOP") ("PERCENT") ("TEXT") ("TLB_ID")))
   ("SetProperty" pro "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("BACKGROUND") ("CANCEL") ("COLOR") ("FAST_LOOP") ("TEXT") ("TITLE") ("XOFFSET") ("YOFFSET")))
   ("Start" pro "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Obj ->[%s::]%s, initialPercent" (nil))
   ("Update" pro "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Obj ->[%s::]%s, percent" (nil ("Text") ("Title")))
   ("CLEANUP" pro "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "PROGRESSBAR" (lib "progressbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("ACCEPT") ("BACKGROUND") ("COLOR") ("FAST_LOOP") ("GROUP_LEADER") ("NOCANCEL") ("PERCENT") ("START") ("TEXT") ("TITLE") ("XOFFSET") ("XSIZE") ("YOFFSET") ("YSIZE")))
   ("PROGRESSBAR__DEFINE" pro nil (lib "progressbar__define.pro" nil "coyote") "%s" (nil))
   ("PSConfig" fun nil (lib "psconfig.pro" nil "coyote") "Result = %s(psObject)" (nil ("AvantGarde") ("Bits_per_Pixel") ("Bkman") ("Bold") ("BookStyle") ("Cancel") ("CMYK") ("Color") ("Courier") ("Debug") ("Decomposed") ("DefaultSetup") ("Demi") ("Directory") ("Encapsulated") ("European") ("Filename") ("FontInfo") ("FontSize") ("FontType") ("Group_Leader") ("Helvetica") ("Inches") ("Isolatin") ("Italic") ("Landscape") ("Light") ("Match") ("Medium") ("Metric") ("Name") ("Narrow") ("NOGUI") ("Palatino") ("Preview") ("Schoolbook") ("Set_Font") ("Symbol") ("Times") ("TrueType") ("XOffset") ("XSize") ("YOffset") ("YSize") ("ZapfChancery") ("ZapfDingbats")))
   ("PSWINDOW_ASPECT" fun nil (lib "pswindow.pro" nil "coyote") "Result = %s(aspectRatio)" (nil ("MARGIN") ("WindowAspect")))
   ("PSWINDOW" fun nil (lib "pswindow.pro" nil "coyote") "Result = %s" (nil ("ASPECTRATIO") ("CM") ("EUROPEAN") ("FUDGE") ("LANDSCAPE") ("MARGIN") ("METRIC") ("PAGESIZE") ("PRINTER") ("XFUDGE") ("YFUDGE")))
   ("PS_Background" pro nil (lib "ps_background.pro" nil "coyote") "%s, color" (nil))
   ("PS_END" pro nil (lib "ps_end.pro" nil "coyote") "%s" (nil ("ALLOW_TRANSPARENT") ("BMP") ("DELETE_PS") ("DENSITY") ("GIF") ("IM_OPTIONS") ("JPEG") ("NOFIX") ("NOMESSAGE") ("PNG") ("RESIZE") ("TIFF")))
   ("PS_START" pro nil (lib "ps_start.pro" nil "coyote") "%s" (nil ("_EXTRA") ("CANCEL") ("CHARSIZE") ("FONT") ("GUI") ("KEYWORDS") ("NOMATCH") ("QUIET") ("SCALE_FACTOR") ("TT_FONT")))
   ("PWD" pro nil (lib "pwd.pro" nil "coyote") "%s" (nil))
   ("GetRandomDigits" fun "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(digits)" (nil ("BYTES")))
   ("GetRandomNumbers" fun "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(d1, d2, d3, d4, d5, d6, d7, d8)" (nil ("BINOMIAL") ("DOUBLE") ("GAMMA") ("LONG") ("NORMAL") ("POISSON") ("UNIFORM")))
   ("SetSeed" pro "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Obj ->[%s::]%s, theSeed" (nil))
   ("CLEANUP" pro "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("INIT" fun "RandomNumberGenerator" (lib "randomnumbergenerator__define.pro" nil "coyote") "Result = Obj ->[%s::]%s(initialSeed)" (nil))
   ("RandomNumberGenerator__Define" pro nil (lib "randomnumbergenerator__define.pro" nil "coyote") "%s" (nil))
   ("RangeOf" fun nil (lib "rangeof.pro" nil "coyote") "Result = %s(variable)" (nil))
   ("RepMat" fun nil (lib "repmat.pro" nil "coyote") "Result = %s(matrix, ncol, nrow)" (nil))
   ("Resolve_Object" pro nil (lib "resolve_object.pro" nil "coyote") "%s, obj_or_class" (nil ("ROUTINE_INFO")))
   ("ReverseIndices" fun nil (lib "reverseindices.pro" nil "coyote") "Result = %s(ri, index)" (nil ("COUNT")))
   ("Reverse_Axes_Cleanup" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, tlb" (nil))
   ("Reverse_Axes_Draw_Events" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Style" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_AxisRotation" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Output" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Exit" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Printing" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes_Resize" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, event" (nil))
   ("Reverse_Axes" pro nil (lib "reverse_axes.pro" nil "coyote") "%s, data, x, y" (nil ("_Extra") ("Exact") ("Group_Leader") ("Hidden_Lines") ("Landscape") ("Vector") ("XTitle") ("YTitle") ("ZTitle")))
   ("SaveToMain" pro nil (lib "savetomain.pro" nil "coyote") "%s, data, name" (nil))
   ("ScaleModis_ScaleIt" fun nil (lib "scalemodis.pro" nil "coyote") "Result = %s(image, input, output)" (nil))
   ("ScaleModis" fun nil (lib "scalemodis.pro" nil "coyote") "Result = %s(red, grn, blu)" (nil ("CLOUD") ("RANGE")))
   ("Scale_Vector" fun nil (lib "scale_vector.pro" nil "coyote") "Result = %s(vector, minRange, maxRange)" (nil ("DOUBLE") ("MAXVALUE") ("MINVALUE") ("NAN") ("PRESERVE_TYPE")))
   ("ScrollWindow" pro nil (lib "scrollwindow.pro" nil "coyote") "%s, xsize, ysize" (nil ("FREE") ("PIXMAP") ("TITLE") ("WID") ("XPOS") ("XSIZE") ("YPOS") ("YSIZE")))
   ("Select_Button_Events" pro nil (lib "select_objects.pro" nil "coyote") "%s, event" (nil))
   ("Select_Cleanup" pro nil (lib "select_objects.pro" nil "coyote") "%s, tlb" (nil))
   ("Select_Resize" pro nil (lib "select_objects.pro" nil "coyote") "%s, event" (nil))
   ("Select_Objects" pro nil (lib "select_objects.pro" nil "coyote") "%s" (nil))
   ("SetDecomposedState" pro nil (lib "setdecomposedstate.pro" nil "coyote") "%s, state" (nil ("CURRENTSTATE") ("DEPTH") ("ZDEPTH")))
   ("SetDefaultValue" pro nil (lib "setdefaultvalue.pro" nil "coyote") "%s, argument, defaultValue" (nil ("BOOLEAN")))
   ("SetDifference" fun nil (lib "setdifference.pro" nil "coyote") "Result = %s(set_a, set_b)" (nil ("NORESULT") ("SUCCESS")))
   ("SetIntersection" fun nil (lib "setintersection.pro" nil "coyote") "Result = %s(set_a, set_b)" (nil ("NORESULT") ("SUCCESS")))
   ("SetUnion" fun nil (lib "setunion.pro" nil "coyote") "Result = %s(set_a, set_b)" (nil))
   ("ShapeInfo_Events" pro nil (lib "shapeinfo.pro" nil "coyote") "%s, event" (nil))
   ("ShapeInfo_Cleanup" pro nil (lib "shapeinfo.pro" nil "coyote") "%s, tlb" (nil))
   ("ShapeInfo" pro nil (lib "shapeinfo.pro" nil "coyote") "%s, filename" (nil ("XRANGE") ("YRANGE")))
   ("Sharpen_HistoMatch" fun nil (lib "sharpen.pro" nil "coyote") "Result = %s(image, histogram_to_match)" (nil))
   ("Sharpen" fun nil (lib "sharpen.pro" nil "coyote") "Result = %s(image)" (nil ("Display") ("Kernel")))
   ("Example" pro nil (lib "sharpen.pro" nil "coyote") "%s" (nil))
   ("Simple_Surface_Cleanup" pro nil (lib "simple_surface.pro" nil "coyote") "%s, tlb" (nil))
   ("Simple_Surface_Draw_Events" pro nil (lib "simple_surface.pro" nil "coyote") "%s, event" (nil))
   ("Simple_Surface_Style" pro nil (lib "simple_surface.pro" nil "coyote") "%s, event" (nil))
   ("Simple_Surface_Output" pro nil (lib "simple_surface.pro" nil "coyote") "%s, event" (nil))
   ("Simple_Surface_Exit" pro nil (lib "simple_surface.pro" nil "coyote") "%s, event" (nil))
   ("Simple_Surface_Printing" pro nil (lib "simple_surface.pro" nil "coyote") "%s, event" (nil))
   ("Simple_Surface_Resize" pro nil (lib "simple_surface.pro" nil "coyote") "%s, event" (nil))
   ("Simple_Surface" pro nil (lib "simple_surface.pro" nil "coyote") "%s, data, x, y" (nil ("_Extra") ("Exact") ("Group_Leader") ("Hidden_Lines") ("Landscape") ("Vector") ("XTitle") ("YTitle") ("ZTitle")))
   ("sort_nd" fun nil (lib "sort_nd.pro" nil "coyote") "Result = %s(array, dimension)" (nil))
   ("StationPlot" pro nil (lib "stationplot.pro" nil "coyote") "%s, xc, yc" (nil ("Color") ("Radius") ("Thick")))
   ("STR_SIZE" fun nil (lib "str_size.pro" nil "coyote") "Result = %s(theString, targetWidth)" (nil ("INITSIZE") ("STEP") ("XPOS") ("YPOS")))
   ("SymCat" fun nil (lib "symcat.pro" nil "coyote") "Result = %s(theSymbol)" (nil ("COLOR") ("THICK")))
   ("TextBox_CenterTLB" pro nil (lib "textbox.pro" nil "coyote") "%s, tlb" (nil))
   ("TextBox_Event" pro nil (lib "textbox.pro" nil "coyote") "%s, event" (nil))
   ("TextBox" fun nil (lib "textbox.pro" nil "coyote") "Result = %s" (nil ("Cancel") ("Group_Leader") ("Label") ("Title") ("Value") ("XSize")))
   ("TEXTLINEFORMAT" fun nil (lib "textlineformat.pro" nil "coyote") "Result = %s(theText)" (nil ("LENGTH")))
   ("Texture_Surface_Cleanup" pro nil (lib "texture_surface.pro" nil "coyote") "%s, tlb" (nil))
   ("Texture_Surface_Draw_Events" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Style" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Output" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Exit" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Printing" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface_Resize" pro nil (lib "texture_surface.pro" nil "coyote") "%s, event" (nil))
   ("Texture_Surface" pro nil (lib "texture_surface.pro" nil "coyote") "%s, surfaceData, x, y" (nil ("_Extra") ("BorderColor") ("Colortable") ("Exact") ("Group_Leader") ("Hidden_Lines") ("Image") ("Landscape") ("Position") ("Vector") ("XTitle") ("YTitle") ("ZScale") ("ZTitle")))
   ("TheMonths" fun nil (lib "themonths.pro" nil "coyote") "Result = %s(index)" (nil ("ABBREVIATION") ("ALLCAPS") ("FIRSTLETTER") ("LOWCASE")))
   ("TimeStamp" fun nil (lib "timestamp.pro" nil "coyote") "Result = %s(format)" (nil ("NO_PREFIX") ("RANDOM_DIGITS") ("UTC") ("VALID")))
   ("Transform_Volume" fun nil (lib "transform_volume.pro" nil "coyote") "Result = %s(volume)" (nil ("Buffer_Size") ("Centre_Rotation") ("Missing") ("Rotation") ("Scale") ("T3Dmat") ("Translate")))
   ("UNDEFINE" pro nil (lib "undefine.pro" nil "coyote") "%s, var0, var1, var2, var3, var4, var5, var6, var7, var8, var9" (nil))
   ("Clamp" pro "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s, datarange" (nil))
   ("INIT" fun "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("NColors") ("Palette") ("Position") ("Range") ("Title")))
   ("Cleanup" pro "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("GetProperty" pro "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Ref_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Text") ("Title") ("Transform")))
   ("SetProperty" pro "VColorBar" (lib "vcolorbar__define.pro" nil "coyote") "Obj ->[%s::]%s" (nil ("_Extra") ("Color") ("Major") ("Minor") ("Name") ("Palette") ("Position") ("Range") ("Title") ("Transform")))
   ("VColorBar__Define" pro nil (lib "vcolorbar__define.pro" nil "coyote") "%s" (nil))
   ("WhoAmI" fun nil (lib "whoami.pro" nil "coyote") "Result = %s" (nil))
   ("WhoCalledMe" fun nil (lib "whocalledme.pro" nil "coyote") "Result = %s" (nil))
   ("Windbarb" pro nil (lib "windbarb.pro" nil "coyote") "%s, x, y, wspeed, wdirection" (nil ("Aspect") ("Clip") ("Color") ("Length") ("Map_Rotation") ("Southern_Hemisphere") ("Station") ("Thick")))
   ("WindowAvailable" fun nil (lib "windowavailable.pro" nil "coyote") "Result = %s(windowID)" (nil))
   ("WindowImage_OriginalSettings" pro nil (lib "windowimage.pro" nil "coyote") "%s, event" (nil))
   ("WindowImage_Quit" pro nil (lib "windowimage.pro" nil "coyote") "%s, event" (nil))
   ("WindowImage_Resize" pro nil (lib "windowimage.pro" nil "coyote") "%s, event" (nil))
   ("WindowImage_DrawEvents" pro nil (lib "windowimage.pro" nil "coyote") "%s, event" (nil))
   ("WindowImage_Display" pro nil (lib "windowimage.pro" nil "coyote") "%s, info" (nil))
   ("WindowImage" pro nil (lib "windowimage.pro" nil "coyote") "%s, image" (nil ("BREWER") ("COLORTABLE") ("NEUTRALCOLOR") ("REVERSE")))
   ("init" fun "dirlisting" (lib "xcd.pro" nil "coyote") "Result = Obj ->[%s::]%s(location)" (nil))
   ("cleanup" pro "dirlisting" (lib "xcd.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("dirlisting__define" pro nil (lib "xcd.pro" nil "coyote") "%s" (nil))
   ("SubdirNames" fun "dirlisting" (lib "xcd.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("FileNames" fun "dirlisting" (lib "xcd.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Path" fun "dirlisting" (lib "xcd.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("Drive" fun "dirlisting" (lib "xcd.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("handle" pro "xcd" (lib "xcd.pro" nil "coyote") "Obj ->[%s::]%s, event" (nil))
   ("xcd_cleanup" pro nil (lib "xcd.pro" nil "coyote") "%s, tlb" (nil))
   ("cleanup" pro "xcd" (lib "xcd.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("xcd_event" pro nil (lib "xcd.pro" nil "coyote") "%s, event" (nil))
   ("update" pro "xcd" (lib "xcd.pro" nil "coyote") "Obj ->[%s::]%s" (nil))
   ("init" fun "xcd" (lib "xcd.pro" nil "coyote") "Result = Obj ->[%s::]%s" (nil))
   ("xcd__define" pro nil (lib "xcd.pro" nil "coyote") "%s" (nil))
   ("xcd" pro nil (lib "xcd.pro" nil "coyote") "%s" (nil))
   ("XColors_Congrid" fun nil (lib "xcolors.pro" nil "coyote") "Result = %s(arr, x, y, z)" (nil ("CUBIC") ("INTERP") ("MINUS_ONE")))
   ("XColors_NotifyObj__Define" pro nil (lib "xcolors.pro" nil "coyote") "%s" (nil))
   ("XColors_Set" pro nil (lib "xcolors.pro" nil "coyote") "%s, info" (nil))
   ("XCOLORS_TOP_SLIDER" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_BOTTOM_SLIDER" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_GAMMA_SLIDER" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_REVERSE_BUTTON" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_COLORTABLE" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_PROTECT_COLORS" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_CANCEL" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_DISMISS" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_SWITCH_COLORS" pro nil (lib "xcolors.pro" nil "coyote") "%s, event" (nil))
   ("XCOLORS_CLEANUP" pro nil (lib "xcolors.pro" nil "coyote") "%s, tlb" (nil))
   ("XCOLORS" pro nil (lib "xcolors.pro" nil "coyote") "%s" (nil ("_EXTRA") ("Block") ("Bottom") ("Brewer") ("ColorInfo") ("Data") ("Drag") ("File") ("Group_Leader") ("Index") ("Modal") ("NColors") ("NoSliders") ("NotifyID") ("NotifyObj") ("NotifyPro") ("Object_Data") ("Reverse") ("Title") ("Window") ("WinID") ("XOffset") ("YOffset")))
   ("XMOVIE_CLEANUP" pro nil (lib "xmovie.pro" nil "coyote") "%s, tlb" (nil))
   ("XMOVIE_DELAY_EVENTS" pro nil (lib "xmovie.pro" nil "coyote") "%s, event" (nil))
   ("XMOVIE_EVENT" pro nil (lib "xmovie.pro" nil "coyote") "%s, event" (nil))
   ("XMOVIE" pro nil (lib "xmovie.pro" nil "coyote") "%s, data" (nil ("GROUP") ("TITLE")))
   ("XSTRETCH_VALIDATE_THRESHOLD" fun nil (lib "xstretch.pro" nil "coyote") "Result = %s(threshold, info)" (nil))
   ("XSTRETCH_SCALEIMAGE" fun nil (lib "xstretch.pro" nil "coyote") "Result = %s(info)" (nil))
   ("XSTRETCH_IMAGEWINDOWKILLED" pro nil (lib "xstretch.pro" nil "coyote") "%s, imageWindowID" (nil))
   ("XSTRETCH_SAVETOMAIN" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_DRAWLINES" pro nil (lib "xstretch.pro" nil "coyote") "%s, minThresh, maxThresh, info" (nil))
   ("XSTRETCH_NOTIFYOTHERS" pro nil (lib "xstretch.pro" nil "coyote") "%s, info" (nil))
   ("XSTRETCH_HISTOPLOT" pro nil (lib "xstretch.pro" nil "coyote") "%s, info" (nil ("_Extra") ("MAXVALUE") ("WID")))
   ("XSTRETCH_PARAMETERS" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_FLIPIMAGE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_GAMMA" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_NEGATIVE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_OPENIMAGE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_SAVEAS" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_SAVEHISTOAS" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_SETTHRESHOLD" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_PRINT" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_PROCESS_EVENTS" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_MOVELINE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_RESTORE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_STRETCHTYPE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_QUIT" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_COLORS" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_MAXVALUE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_IMAGE_RESIZE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_HISTOGRAM_RESIZE" pro nil (lib "xstretch.pro" nil "coyote") "%s, event" (nil))
   ("XSTRETCH_CLEANUP" pro nil (lib "xstretch.pro" nil "coyote") "%s, tlb" (nil))
   ("XSTRETCH" pro nil (lib "xstretch.pro" nil "coyote") "%s, theImage" (nil ("_EXTRA") ("Beta") ("Block") ("Brewer") ("Colors") ("Colortable") ("Exponent") ("Filename") ("Gamma") ("Group_Leader") ("Max_Value") ("MaxThresh") ("Mean") ("MinThresh") ("Negative") ("No_Window") ("Notify_Obj") ("Notify_Pro") ("Sigma") ("Title") ("Type") ("UValue") ("XPos") ("YPos")))
   ("ZOOMBOX_BOX_COLOR" pro nil (lib "zoombox.pro" nil "coyote") "%s, event" (nil))
   ("ZOOMBOX_COLORS" pro nil (lib "zoombox.pro" nil "coyote") "%s, event" (nil))
   ("ZOOMBOX_QUITTER" pro nil (lib "zoombox.pro" nil "coyote") "%s, event" (nil))
   ("ZOOMBOX_CLEANUP" pro nil (lib "zoombox.pro" nil "coyote") "%s, tlb" (nil))
   ("ZOOMBOX_ZOOM_CLEANUP" pro nil (lib "zoombox.pro" nil "coyote") "%s, tlb" (nil))
   ("ZOOMBOX_FACTOR" pro nil (lib "zoombox.pro" nil "coyote") "%s, event" (nil))
   ("ZOOMBOX_DRAW_EVENTS" pro nil (lib "zoombox.pro" nil "coyote") "%s, event" (nil))
   ("ZOOMBOX" pro nil (lib "zoombox.pro" nil "coyote") "%s, image" (nil ("Group_Leader") ("Hardware_Render") ("Instance") ("Interpolation")))))
